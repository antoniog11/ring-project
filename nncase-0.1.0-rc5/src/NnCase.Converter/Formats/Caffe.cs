// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: caffe.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Caffe {

  /// <summary>Holder for reflection information generated from caffe.proto</summary>
  public static partial class CaffeReflection {

    #region Descriptor
    /// <summary>File descriptor for caffe.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CaffeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgtjYWZmZS5wcm90bxIFY2FmZmUiHAoJQmxvYlNoYXBlEg8KA2RpbRgBIAMo",
            "A0ICEAEiwAEKCUJsb2JQcm90bxIfCgVzaGFwZRgHIAEoCzIQLmNhZmZlLkJs",
            "b2JTaGFwZRIQCgRkYXRhGAUgAygCQgIQARIQCgRkaWZmGAYgAygCQgIQARIX",
            "Cgtkb3VibGVfZGF0YRgIIAMoAUICEAESFwoLZG91YmxlX2RpZmYYCSADKAFC",
            "AhABEgsKA251bRgBIAEoBRIQCghjaGFubmVscxgCIAEoBRIOCgZoZWlnaHQY",
            "AyABKAUSDQoFd2lkdGgYBCABKAUiMgoPQmxvYlByb3RvVmVjdG9yEh8KBWJs",
            "b2JzGAEgAygLMhAuY2FmZmUuQmxvYlByb3RvInoKBURhdHVtEhAKCGNoYW5u",
            "ZWxzGAEgASgFEg4KBmhlaWdodBgCIAEoBRINCgV3aWR0aBgDIAEoBRIMCgRk",
            "YXRhGAQgASgMEg0KBWxhYmVsGAUgASgFEhIKCmZsb2F0X2RhdGEYBiADKAIS",
            "DwoHZW5jb2RlZBgHIAEoCCLlAQoPRmlsbGVyUGFyYW1ldGVyEgwKBHR5cGUY",
            "ASABKAkSDQoFdmFsdWUYAiABKAISCwoDbWluGAMgASgCEgsKA21heBgEIAEo",
            "AhIMCgRtZWFuGAUgASgCEgsKA3N0ZBgGIAEoAhIOCgZzcGFyc2UYByABKAUS",
            "OgoNdmFyaWFuY2Vfbm9ybRgIIAEoDjIjLmNhZmZlLkZpbGxlclBhcmFtZXRl",
            "ci5WYXJpYW5jZU5vcm0iNAoMVmFyaWFuY2VOb3JtEgoKBkZBTl9JThAAEgsK",
            "B0ZBTl9PVVQQARILCgdBVkVSQUdFEAIigAIKDE5ldFBhcmFtZXRlchIMCgRu",
            "YW1lGAEgASgJEg0KBWlucHV0GAMgAygJEiUKC2lucHV0X3NoYXBlGAggAygL",
            "MhAuY2FmZmUuQmxvYlNoYXBlEhEKCWlucHV0X2RpbRgEIAMoBRIWCg5mb3Jj",
            "ZV9iYWNrd2FyZBgFIAEoCBIeCgVzdGF0ZRgGIAEoCzIPLmNhZmZlLk5ldFN0",
            "YXRlEhIKCmRlYnVnX2luZm8YByABKAgSJAoFbGF5ZXIYZCADKAsyFS5jYWZm",
            "ZS5MYXllclBhcmFtZXRlchInCgZsYXllcnMYAiADKAsyFy5jYWZmZS5WMUxh",
            "eWVyUGFyYW1ldGVyIuIJCg9Tb2x2ZXJQYXJhbWV0ZXISCwoDbmV0GBggASgJ",
            "EiYKCW5ldF9wYXJhbRgZIAEoCzITLmNhZmZlLk5ldFBhcmFtZXRlchIRCgl0",
            "cmFpbl9uZXQYASABKAkSEAoIdGVzdF9uZXQYAiADKAkSLAoPdHJhaW5fbmV0",
            "X3BhcmFtGBUgASgLMhMuY2FmZmUuTmV0UGFyYW1ldGVyEisKDnRlc3RfbmV0",
            "X3BhcmFtGBYgAygLMhMuY2FmZmUuTmV0UGFyYW1ldGVyEiQKC3RyYWluX3N0",
            "YXRlGBogASgLMg8uY2FmZmUuTmV0U3RhdGUSIwoKdGVzdF9zdGF0ZRgbIAMo",
            "CzIPLmNhZmZlLk5ldFN0YXRlEhEKCXRlc3RfaXRlchgDIAMoBRIVCg10ZXN0",
            "X2ludGVydmFsGAQgASgFEhkKEXRlc3RfY29tcHV0ZV9sb3NzGBMgASgIEhsK",
            "E3Rlc3RfaW5pdGlhbGl6YXRpb24YICABKAgSDwoHYmFzZV9schgFIAEoAhIP",
            "CgdkaXNwbGF5GAYgASgFEhQKDGF2ZXJhZ2VfbG9zcxghIAEoBRIQCghtYXhf",
            "aXRlchgHIAEoBRIRCglpdGVyX3NpemUYJCABKAUSEQoJbHJfcG9saWN5GAgg",
            "ASgJEg0KBWdhbW1hGAkgASgCEg0KBXBvd2VyGAogASgCEhAKCG1vbWVudHVt",
            "GAsgASgCEhQKDHdlaWdodF9kZWNheRgMIAEoAhIbChNyZWd1bGFyaXphdGlv",
            "bl90eXBlGB0gASgJEhAKCHN0ZXBzaXplGA0gASgFEhEKCXN0ZXB2YWx1ZRgi",
            "IAMoBRIWCg5jbGlwX2dyYWRpZW50cxgjIAEoAhIQCghzbmFwc2hvdBgOIAEo",
            "BRIXCg9zbmFwc2hvdF9wcmVmaXgYDyABKAkSFQoNc25hcHNob3RfZGlmZhgQ",
            "IAEoCBI+Cg9zbmFwc2hvdF9mb3JtYXQYJSABKA4yJS5jYWZmZS5Tb2x2ZXJQ",
            "YXJhbWV0ZXIuU25hcHNob3RGb3JtYXQSNgoLc29sdmVyX21vZGUYESABKA4y",
            "IS5jYWZmZS5Tb2x2ZXJQYXJhbWV0ZXIuU29sdmVyTW9kZRIRCglkZXZpY2Vf",
            "aWQYEiABKAUSEwoLcmFuZG9tX3NlZWQYFCABKAMSDAoEdHlwZRgoIAEoCRIN",
            "CgVkZWx0YRgfIAEoAhIRCgltb21lbnR1bTIYJyABKAISEQoJcm1zX2RlY2F5",
            "GCYgASgCEhIKCmRlYnVnX2luZm8YFyABKAgSHAoUc25hcHNob3RfYWZ0ZXJf",
            "dHJhaW4YHCABKAgSNgoLc29sdmVyX3R5cGUYHiABKA4yIS5jYWZmZS5Tb2x2",
            "ZXJQYXJhbWV0ZXIuU29sdmVyVHlwZRIZChFsYXllcl93aXNlX3JlZHVjZRgp",
            "IAEoCBIPCgd3ZWlnaHRzGCogAygJIisKDlNuYXBzaG90Rm9ybWF0EggKBEhE",
            "RjUQABIPCgtCSU5BUllQUk9UTxABIh4KClNvbHZlck1vZGUSBwoDQ1BVEAAS",
            "BwoDR1BVEAEiVQoKU29sdmVyVHlwZRIHCgNTR0QQABIMCghORVNURVJPVhAB",
            "EgsKB0FEQUdSQUQQAhILCgdSTVNQUk9QEAMSDAoIQURBREVMVEEQBBIICgRB",
            "REFNEAUiaQoLU29sdmVyU3RhdGUSDAoEaXRlchgBIAEoBRITCgtsZWFybmVk",
            "X25ldBgCIAEoCRIhCgdoaXN0b3J5GAMgAygLMhAuY2FmZmUuQmxvYlByb3Rv",
            "EhQKDGN1cnJlbnRfc3RlcBgEIAEoBSJFCghOZXRTdGF0ZRIbCgVwaGFzZRgB",
            "IAEoDjIMLmNhZmZlLlBoYXNlEg0KBWxldmVsGAIgASgFEg0KBXN0YWdlGAMg",
            "AygJInMKDE5ldFN0YXRlUnVsZRIbCgVwaGFzZRgBIAEoDjIMLmNhZmZlLlBo",
            "YXNlEhEKCW1pbl9sZXZlbBgCIAEoBRIRCgltYXhfbGV2ZWwYAyABKAUSDQoF",
            "c3RhZ2UYBCADKAkSEQoJbm90X3N0YWdlGAUgAygJIp0BCglQYXJhbVNwZWMS",
            "DAoEbmFtZRgBIAEoCRIxCgpzaGFyZV9tb2RlGAIgASgOMh0uY2FmZmUuUGFy",
            "YW1TcGVjLkRpbUNoZWNrTW9kZRIPCgdscl9tdWx0GAMgASgCEhIKCmRlY2F5",
            "X211bHQYBCABKAIiKgoMRGltQ2hlY2tNb2RlEgoKBlNUUklDVBAAEg4KClBF",
            "Uk1JU1NJVkUQASKXFwoOTGF5ZXJQYXJhbWV0ZXISDAoEbmFtZRgBIAEoCRIM",
            "CgR0eXBlGAIgASgJEg4KBmJvdHRvbRgDIAMoCRILCgN0b3AYBCADKAkSGwoF",
            "cGhhc2UYCiABKA4yDC5jYWZmZS5QaGFzZRITCgtsb3NzX3dlaWdodBgFIAMo",
            "AhIfCgVwYXJhbRgGIAMoCzIQLmNhZmZlLlBhcmFtU3BlYxIfCgVibG9icxgH",
            "IAMoCzIQLmNhZmZlLkJsb2JQcm90bxIWCg5wcm9wYWdhdGVfZG93bhgLIAMo",
            "CBIkCgdpbmNsdWRlGAggAygLMhMuY2FmZmUuTmV0U3RhdGVSdWxlEiQKB2V4",
            "Y2x1ZGUYCSADKAsyEy5jYWZmZS5OZXRTdGF0ZVJ1bGUSNwoPdHJhbnNmb3Jt",
            "X3BhcmFtGGQgASgLMh4uY2FmZmUuVHJhbnNmb3JtYXRpb25QYXJhbWV0ZXIS",
            "KAoKbG9zc19wYXJhbRhlIAEoCzIULmNhZmZlLkxvc3NQYXJhbWV0ZXISMAoO",
            "YWNjdXJhY3lfcGFyYW0YZiABKAsyGC5jYWZmZS5BY2N1cmFjeVBhcmFtZXRl",
            "chIsCgxhcmdtYXhfcGFyYW0YZyABKAsyFi5jYWZmZS5BcmdNYXhQYXJhbWV0",
            "ZXISNAoQYmF0Y2hfbm9ybV9wYXJhbRiLASABKAsyGS5jYWZmZS5CYXRjaE5v",
            "cm1QYXJhbWV0ZXISKQoKYmlhc19wYXJhbRiNASABKAsyFC5jYWZmZS5CaWFz",
            "UGFyYW1ldGVyEiwKDGNvbmNhdF9wYXJhbRhoIAEoCzIWLmNhZmZlLkNvbmNh",
            "dFBhcmFtZXRlchI/ChZjb250cmFzdGl2ZV9sb3NzX3BhcmFtGGkgASgLMh8u",
            "Y2FmZmUuQ29udHJhc3RpdmVMb3NzUGFyYW1ldGVyEjYKEWNvbnZvbHV0aW9u",
            "X3BhcmFtGGogASgLMhsuY2FmZmUuQ29udm9sdXRpb25QYXJhbWV0ZXISKQoK",
            "Y3JvcF9wYXJhbRiQASABKAsyFC5jYWZmZS5Dcm9wUGFyYW1ldGVyEigKCmRh",
            "dGFfcGFyYW0YayABKAsyFC5jYWZmZS5EYXRhUGFyYW1ldGVyEi4KDWRyb3Bv",
            "dXRfcGFyYW0YbCABKAsyFy5jYWZmZS5Ecm9wb3V0UGFyYW1ldGVyEjMKEGR1",
            "bW15X2RhdGFfcGFyYW0YbSABKAsyGS5jYWZmZS5EdW1teURhdGFQYXJhbWV0",
            "ZXISLgoNZWx0d2lzZV9wYXJhbRhuIAEoCzIXLmNhZmZlLkVsdHdpc2VQYXJh",
            "bWV0ZXISJwoJZWx1X3BhcmFtGIwBIAEoCzITLmNhZmZlLkVMVVBhcmFtZXRl",
            "chIrCgtlbWJlZF9wYXJhbRiJASABKAsyFS5jYWZmZS5FbWJlZFBhcmFtZXRl",
            "chImCglleHBfcGFyYW0YbyABKAsyEy5jYWZmZS5FeHBQYXJhbWV0ZXISLwoN",
            "ZmxhdHRlbl9wYXJhbRiHASABKAsyFy5jYWZmZS5GbGF0dGVuUGFyYW1ldGVy",
            "EjEKD2hkZjVfZGF0YV9wYXJhbRhwIAEoCzIYLmNhZmZlLkhERjVEYXRhUGFy",
            "YW1ldGVyEjUKEWhkZjVfb3V0cHV0X3BhcmFtGHEgASgLMhouY2FmZmUuSERG",
            "NU91dHB1dFBhcmFtZXRlchIzChBoaW5nZV9sb3NzX3BhcmFtGHIgASgLMhku",
            "Y2FmZmUuSGluZ2VMb3NzUGFyYW1ldGVyEjMKEGltYWdlX2RhdGFfcGFyYW0Y",
            "cyABKAsyGS5jYWZmZS5JbWFnZURhdGFQYXJhbWV0ZXISOQoTaW5mb2dhaW5f",
            "bG9zc19wYXJhbRh0IAEoCzIcLmNhZmZlLkluZm9nYWluTG9zc1BhcmFtZXRl",
            "chI5ChNpbm5lcl9wcm9kdWN0X3BhcmFtGHUgASgLMhwuY2FmZmUuSW5uZXJQ",
            "cm9kdWN0UGFyYW1ldGVyEisKC2lucHV0X3BhcmFtGI8BIAEoCzIVLmNhZmZl",
            "LklucHV0UGFyYW1ldGVyEicKCWxvZ19wYXJhbRiGASABKAsyEy5jYWZmZS5M",
            "b2dQYXJhbWV0ZXISJgoJbHJuX3BhcmFtGHYgASgLMhMuY2FmZmUuTFJOUGFy",
            "YW1ldGVyEjUKEW1lbW9yeV9kYXRhX3BhcmFtGHcgASgLMhouY2FmZmUuTWVt",
            "b3J5RGF0YVBhcmFtZXRlchImCgltdm5fcGFyYW0YeCABKAsyEy5jYWZmZS5N",
            "Vk5QYXJhbWV0ZXISMwoPcGFyYW1ldGVyX3BhcmFtGJEBIAEoCzIZLmNhZmZl",
            "LlBhcmFtZXRlclBhcmFtZXRlchIuCg1wb29saW5nX3BhcmFtGHkgASgLMhcu",
            "Y2FmZmUuUG9vbGluZ1BhcmFtZXRlchIqCgtwb3dlcl9wYXJhbRh6IAEoCzIV",
            "LmNhZmZlLlBvd2VyUGFyYW1ldGVyEisKC3ByZWx1X3BhcmFtGIMBIAEoCzIV",
            "LmNhZmZlLlBSZUxVUGFyYW1ldGVyEi0KDHB5dGhvbl9wYXJhbRiCASABKAsy",
            "Fi5jYWZmZS5QeXRob25QYXJhbWV0ZXISMwoPcmVjdXJyZW50X3BhcmFtGJIB",
            "IAEoCzIZLmNhZmZlLlJlY3VycmVudFBhcmFtZXRlchIzCg9yZWR1Y3Rpb25f",
            "cGFyYW0YiAEgASgLMhkuY2FmZmUuUmVkdWN0aW9uUGFyYW1ldGVyEigKCnJl",
            "bHVfcGFyYW0YeyABKAsyFC5jYWZmZS5SZUxVUGFyYW1ldGVyEi8KDXJlc2hh",
            "cGVfcGFyYW0YhQEgASgLMhcuY2FmZmUuUmVzaGFwZVBhcmFtZXRlchIrCgtz",
            "Y2FsZV9wYXJhbRiOASABKAsyFS5jYWZmZS5TY2FsZVBhcmFtZXRlchIuCg1z",
            "aWdtb2lkX3BhcmFtGHwgASgLMhcuY2FmZmUuU2lnbW9pZFBhcmFtZXRlchIu",
            "Cg1zb2Z0bWF4X3BhcmFtGH0gASgLMhcuY2FmZmUuU29mdG1heFBhcmFtZXRl",
            "chInCglzcHBfcGFyYW0YhAEgASgLMhMuY2FmZmUuU1BQUGFyYW1ldGVyEioK",
            "C3NsaWNlX3BhcmFtGH4gASgLMhUuY2FmZmUuU2xpY2VQYXJhbWV0ZXISKwoL",
            "c3dpc2hfcGFyYW0YkwEgASgLMhUuY2FmZmUuU3dpc2hQYXJhbWV0ZXISKAoK",
            "dGFuaF9wYXJhbRh/IAEoCzIULmNhZmZlLlRhbkhQYXJhbWV0ZXISMwoPdGhy",
            "ZXNob2xkX3BhcmFtGIABIAEoCzIZLmNhZmZlLlRocmVzaG9sZFBhcmFtZXRl",
            "chIpCgp0aWxlX3BhcmFtGIoBIAEoCzIULmNhZmZlLlRpbGVQYXJhbWV0ZXIS",
            "NgoRd2luZG93X2RhdGFfcGFyYW0YgQEgASgLMhouY2FmZmUuV2luZG93RGF0",
            "YVBhcmFtZXRlchI+ChVjb21iaW5lZF9tYXJnaW5fcGFyYW0YlAEgASgLMh4u",
            "Y2FmZmUuQ29tYmluZWRNYXJnaW5QYXJhbWV0ZXISNQoRY29zaW5fYWRkX21f",
            "cGFyYW0YlQEgASgLMhkuY2FmZmUuQ29zaW5BZGRtUGFyYW1ldGVyEjMKD25v",
            "cm1hbGl6ZV9wYXJhbRiWASABKAsyGS5jYWZmZS5Ob3JtYWxpemVQYXJhbWV0",
            "ZXISPwoVbDJub3JtYWxpemF0aW9uX3BhcmFtGJcBIAEoCzIfLmNhZmZlLkwy",
            "Tm9ybWFsaXphdGlvblBhcmFtZXRlchI0ChBmb2NhbF9sb3NzX3BhcmFtGJgB",
            "IAEoCzIZLmNhZmZlLkZvY2FsTG9zc1BhcmFtZXRlchJDChhsYWJlbF9zcGVj",
            "aWZpY19hZGRfcGFyYW0YmQEgASgLMiAuY2FmZmUuTGFiZWxTcGVjaWZpY0Fk",
            "ZFBhcmFtZXRlciKbAQoXVHJhbnNmb3JtYXRpb25QYXJhbWV0ZXISDQoFc2Nh",
            "bGUYASABKAISDgoGbWlycm9yGAIgASgIEhEKCWNyb3Bfc2l6ZRgDIAEoDRIR",
            "CgltZWFuX2ZpbGUYBCABKAkSEgoKbWVhbl92YWx1ZRgFIAMoAhITCgtmb3Jj",
            "ZV9jb2xvchgGIAEoCBISCgpmb3JjZV9ncmF5GAcgASgIIrsBCg1Mb3NzUGFy",
            "YW1ldGVyEhQKDGlnbm9yZV9sYWJlbBgBIAEoBRI9Cg1ub3JtYWxpemF0aW9u",
            "GAMgASgOMiYuY2FmZmUuTG9zc1BhcmFtZXRlci5Ob3JtYWxpemF0aW9uTW9k",
            "ZRIRCglub3JtYWxpemUYAiABKAgiQgoRTm9ybWFsaXphdGlvbk1vZGUSCAoE",
            "RlVMTBAAEgkKBVZBTElEEAESDgoKQkFUQ0hfU0laRRACEggKBE5PTkUQAyJG",
            "ChFBY2N1cmFjeVBhcmFtZXRlchINCgV0b3BfaxgBIAEoDRIMCgRheGlzGAIg",
            "ASgFEhQKDGlnbm9yZV9sYWJlbBgDIAEoBSJDCg9BcmdNYXhQYXJhbWV0ZXIS",
            "EwoLb3V0X21heF92YWwYASABKAgSDQoFdG9wX2sYAiABKA0SDAoEYXhpcxgD",
            "IAEoBSIzCg9Db25jYXRQYXJhbWV0ZXISDAoEYXhpcxgCIAEoBRISCgpjb25j",
            "YXRfZGltGAEgASgNIlwKEkJhdGNoTm9ybVBhcmFtZXRlchIYChB1c2VfZ2xv",
            "YmFsX3N0YXRzGAEgASgIEh8KF21vdmluZ19hdmVyYWdlX2ZyYWN0aW9uGAIg",
            "ASgCEgsKA2VwcxgDIAEoAiJXCg1CaWFzUGFyYW1ldGVyEgwKBGF4aXMYASAB",
            "KAUSEAoIbnVtX2F4ZXMYAiABKAUSJgoGZmlsbGVyGAMgASgLMhYuY2FmZmUu",
            "RmlsbGVyUGFyYW1ldGVyIkIKGENvbnRyYXN0aXZlTG9zc1BhcmFtZXRlchIO",
            "CgZtYXJnaW4YASABKAISFgoObGVnYWN5X3ZlcnNpb24YAiABKAgi2gMKFENv",
            "bnZvbHV0aW9uUGFyYW1ldGVyEhIKCm51bV9vdXRwdXQYASABKA0SEQoJYmlh",
            "c190ZXJtGAIgASgIEgsKA3BhZBgDIAMoDRITCgtrZXJuZWxfc2l6ZRgEIAMo",
            "DRIOCgZzdHJpZGUYBiADKA0SEAoIZGlsYXRpb24YEiADKA0SDQoFcGFkX2gY",
            "CSABKA0SDQoFcGFkX3cYCiABKA0SEAoIa2VybmVsX2gYCyABKA0SEAoIa2Vy",
            "bmVsX3cYDCABKA0SEAoIc3RyaWRlX2gYDSABKA0SEAoIc3RyaWRlX3cYDiAB",
            "KA0SDQoFZ3JvdXAYBSABKA0SLQoNd2VpZ2h0X2ZpbGxlchgHIAEoCzIWLmNh",
            "ZmZlLkZpbGxlclBhcmFtZXRlchIrCgtiaWFzX2ZpbGxlchgIIAEoCzIWLmNh",
            "ZmZlLkZpbGxlclBhcmFtZXRlchIyCgZlbmdpbmUYDyABKA4yIi5jYWZmZS5D",
            "b252b2x1dGlvblBhcmFtZXRlci5FbmdpbmUSDAoEYXhpcxgQIAEoBRIXCg9m",
            "b3JjZV9uZF9pbTJjb2wYESABKAgiKwoGRW5naW5lEgsKB0RFRkFVTFQQABIJ",
            "CgVDQUZGRRABEgkKBUNVRE5OEAIiLQoNQ3JvcFBhcmFtZXRlchIMCgRheGlz",
            "GAEgASgFEg4KBm9mZnNldBgCIAMoDSKBAgoNRGF0YVBhcmFtZXRlchIOCgZz",
            "b3VyY2UYASABKAkSEgoKYmF0Y2hfc2l6ZRgEIAEoDRIRCglyYW5kX3NraXAY",
            "ByABKA0SKAoHYmFja2VuZBgIIAEoDjIXLmNhZmZlLkRhdGFQYXJhbWV0ZXIu",
            "REISDQoFc2NhbGUYAiABKAISEQoJbWVhbl9maWxlGAMgASgJEhEKCWNyb3Bf",
            "c2l6ZRgFIAEoDRIOCgZtaXJyb3IYBiABKAgSGwoTZm9yY2VfZW5jb2RlZF9j",
            "b2xvchgJIAEoCBIQCghwcmVmZXRjaBgKIAEoDSIbCgJEQhILCgdMRVZFTERC",
            "EAASCAoETE1EQhABIikKEERyb3BvdXRQYXJhbWV0ZXISFQoNZHJvcG91dF9y",
            "YXRpbxgBIAEoAiKgAQoSRHVtbXlEYXRhUGFyYW1ldGVyEisKC2RhdGFfZmls",
            "bGVyGAEgAygLMhYuY2FmZmUuRmlsbGVyUGFyYW1ldGVyEh8KBXNoYXBlGAYg",
            "AygLMhAuY2FmZmUuQmxvYlNoYXBlEgsKA251bRgCIAMoDRIQCghjaGFubmVs",
            "cxgDIAMoDRIOCgZoZWlnaHQYBCADKA0SDQoFd2lkdGgYBSADKA0imgEKEEVs",
            "dHdpc2VQYXJhbWV0ZXISNAoJb3BlcmF0aW9uGAEgASgOMiEuY2FmZmUuRWx0",
            "d2lzZVBhcmFtZXRlci5FbHR3aXNlT3ASDQoFY29lZmYYAiADKAISGAoQc3Rh",
            "YmxlX3Byb2RfZ3JhZBgDIAEoCCInCglFbHR3aXNlT3ASCAoEUFJPRBAAEgcK",
            "A1NVTRABEgcKA01BWBACIh0KDEVMVVBhcmFtZXRlchINCgVhbHBoYRgBIAEo",
            "AiKmAQoORW1iZWRQYXJhbWV0ZXISEgoKbnVtX291dHB1dBgBIAEoDRIRCglp",
            "bnB1dF9kaW0YAiABKA0SEQoJYmlhc190ZXJtGAMgASgIEi0KDXdlaWdodF9m",
            "aWxsZXIYBCABKAsyFi5jYWZmZS5GaWxsZXJQYXJhbWV0ZXISKwoLYmlhc19m",
            "aWxsZXIYBSABKAsyFi5jYWZmZS5GaWxsZXJQYXJhbWV0ZXIiOgoMRXhwUGFy",
            "YW1ldGVyEgwKBGJhc2UYASABKAISDQoFc2NhbGUYAiABKAISDQoFc2hpZnQY",
            "AyABKAIiMgoQRmxhdHRlblBhcmFtZXRlchIMCgRheGlzGAEgASgFEhAKCGVu",
            "ZF9heGlzGAIgASgFIkgKEUhERjVEYXRhUGFyYW1ldGVyEg4KBnNvdXJjZRgB",
            "IAEoCRISCgpiYXRjaF9zaXplGAIgASgNEg8KB3NodWZmbGUYAyABKAgiKAoT",
            "SERGNU91dHB1dFBhcmFtZXRlchIRCglmaWxlX25hbWUYASABKAkiZwoSSGlu",
            "Z2VMb3NzUGFyYW1ldGVyEiwKBG5vcm0YASABKA4yHi5jYWZmZS5IaW5nZUxv",
            "c3NQYXJhbWV0ZXIuTm9ybSIjCgROb3JtEgsKB0lOVkFMSUQQABIGCgJMMRAB",
            "EgYKAkwyEAIi7wEKEkltYWdlRGF0YVBhcmFtZXRlchIOCgZzb3VyY2UYASAB",
            "KAkSEgoKYmF0Y2hfc2l6ZRgEIAEoDRIRCglyYW5kX3NraXAYByABKA0SDwoH",
            "c2h1ZmZsZRgIIAEoCBISCgpuZXdfaGVpZ2h0GAkgASgNEhEKCW5ld193aWR0",
            "aBgKIAEoDRIQCghpc19jb2xvchgLIAEoCBINCgVzY2FsZRgCIAEoAhIRCglt",
            "ZWFuX2ZpbGUYAyABKAkSEQoJY3JvcF9zaXplGAUgASgNEg4KBm1pcnJvchgG",
            "IAEoCBITCgtyb290X2ZvbGRlchgMIAEoCSI1ChVJbmZvZ2Fpbkxvc3NQYXJh",
            "bWV0ZXISDgoGc291cmNlGAEgASgJEgwKBGF4aXMYAiABKAUizgEKFUlubmVy",
            "UHJvZHVjdFBhcmFtZXRlchISCgpudW1fb3V0cHV0GAEgASgNEhEKCWJpYXNf",
            "dGVybRgCIAEoCBItCg13ZWlnaHRfZmlsbGVyGAMgASgLMhYuY2FmZmUuRmls",
            "bGVyUGFyYW1ldGVyEisKC2JpYXNfZmlsbGVyGAQgASgLMhYuY2FmZmUuRmls",
            "bGVyUGFyYW1ldGVyEgwKBGF4aXMYBSABKAUSEQoJdHJhbnNwb3NlGAYgASgI",
            "EhEKCW5vcm1hbGl6ZRgHIAEoCCIxCg5JbnB1dFBhcmFtZXRlchIfCgVzaGFw",
            "ZRgBIAMoCzIQLmNhZmZlLkJsb2JTaGFwZSI6CgxMb2dQYXJhbWV0ZXISDAoE",
            "YmFzZRgBIAEoAhINCgVzY2FsZRgCIAEoAhINCgVzaGlmdBgDIAEoAiKPAgoM",
            "TFJOUGFyYW1ldGVyEhIKCmxvY2FsX3NpemUYASABKA0SDQoFYWxwaGEYAiAB",
            "KAISDAoEYmV0YRgDIAEoAhIzCgtub3JtX3JlZ2lvbhgEIAEoDjIeLmNhZmZl",
            "LkxSTlBhcmFtZXRlci5Ob3JtUmVnaW9uEgkKAWsYBSABKAISKgoGZW5naW5l",
            "GAYgASgOMhouY2FmZmUuTFJOUGFyYW1ldGVyLkVuZ2luZSI1CgpOb3JtUmVn",
            "aW9uEhMKD0FDUk9TU19DSEFOTkVMUxAAEhIKDldJVEhJTl9DSEFOTkVMEAEi",
            "KwoGRW5naW5lEgsKB0RFRkFVTFQQABIJCgVDQUZGRRABEgkKBUNVRE5OEAIi",
            "WgoTTWVtb3J5RGF0YVBhcmFtZXRlchISCgpiYXRjaF9zaXplGAEgASgNEhAK",
            "CGNoYW5uZWxzGAIgASgNEg4KBmhlaWdodBgDIAEoDRINCgV3aWR0aBgEIAEo",
            "DSJQCgxNVk5QYXJhbWV0ZXISGgoSbm9ybWFsaXplX3ZhcmlhbmNlGAEgASgI",
            "EhcKD2Fjcm9zc19jaGFubmVscxgCIAEoCBILCgNlcHMYAyABKAIiNQoSUGFy",
            "YW1ldGVyUGFyYW1ldGVyEh8KBXNoYXBlGAEgASgLMhAuY2FmZmUuQmxvYlNo",
            "YXBlIoEDChBQb29saW5nUGFyYW1ldGVyEjAKBHBvb2wYASABKA4yIi5jYWZm",
            "ZS5Qb29saW5nUGFyYW1ldGVyLlBvb2xNZXRob2QSCwoDcGFkGAQgASgNEg0K",
            "BXBhZF9oGAkgASgNEg0KBXBhZF93GAogASgNEhMKC2tlcm5lbF9zaXplGAIg",
            "ASgNEhAKCGtlcm5lbF9oGAUgASgNEhAKCGtlcm5lbF93GAYgASgNEg4KBnN0",
            "cmlkZRgDIAEoDRIQCghzdHJpZGVfaBgHIAEoDRIQCghzdHJpZGVfdxgIIAEo",
            "DRIuCgZlbmdpbmUYCyABKA4yHi5jYWZmZS5Qb29saW5nUGFyYW1ldGVyLkVu",
            "Z2luZRIWCg5nbG9iYWxfcG9vbGluZxgMIAEoCCIuCgpQb29sTWV0aG9kEgcK",
            "A01BWBAAEgcKA0FWRRABEg4KClNUT0NIQVNUSUMQAiIrCgZFbmdpbmUSCwoH",
            "REVGQVVMVBAAEgkKBUNBRkZFEAESCQoFQ1VETk4QAiI9Cg5Qb3dlclBhcmFt",
            "ZXRlchINCgVwb3dlchgBIAEoAhINCgVzY2FsZRgCIAEoAhINCgVzaGlmdBgD",
            "IAEoAiJeCg9QeXRob25QYXJhbWV0ZXISDgoGbW9kdWxlGAEgASgJEg0KBWxh",
            "eWVyGAIgASgJEhEKCXBhcmFtX3N0chgDIAEoCRIZChFzaGFyZV9pbl9wYXJh",
            "bGxlbBgEIAEoCCKvAQoSUmVjdXJyZW50UGFyYW1ldGVyEhIKCm51bV9vdXRw",
            "dXQYASABKA0SLQoNd2VpZ2h0X2ZpbGxlchgCIAEoCzIWLmNhZmZlLkZpbGxl",
            "clBhcmFtZXRlchIrCgtiaWFzX2ZpbGxlchgDIAEoCzIWLmNhZmZlLkZpbGxl",
            "clBhcmFtZXRlchISCgpkZWJ1Z19pbmZvGAQgASgIEhUKDWV4cG9zZV9oaWRk",
            "ZW4YBSABKAgirwEKElJlZHVjdGlvblBhcmFtZXRlchI4CglvcGVyYXRpb24Y",
            "ASABKA4yJS5jYWZmZS5SZWR1Y3Rpb25QYXJhbWV0ZXIuUmVkdWN0aW9uT3AS",
            "DAoEYXhpcxgCIAEoBRINCgVjb2VmZhgDIAEoAiJCCgtSZWR1Y3Rpb25PcBIL",
            "CgdJTlZBTElEEAASBwoDU1VNEAESCAoEQVNVTRACEgkKBVNVTVNREAMSCAoE",
            "TUVBThAEIoEBCg1SZUxVUGFyYW1ldGVyEhYKDm5lZ2F0aXZlX3Nsb3BlGAEg",
            "ASgCEisKBmVuZ2luZRgCIAEoDjIbLmNhZmZlLlJlTFVQYXJhbWV0ZXIuRW5n",
            "aW5lIisKBkVuZ2luZRILCgdERUZBVUxUEAASCQoFQ0FGRkUQARIJCgVDVURO",
            "ThACIlMKEFJlc2hhcGVQYXJhbWV0ZXISHwoFc2hhcGUYASABKAsyEC5jYWZm",
            "ZS5CbG9iU2hhcGUSDAoEYXhpcxgCIAEoBRIQCghudW1fYXhlcxgDIAEoBSKY",
            "AQoOU2NhbGVQYXJhbWV0ZXISDAoEYXhpcxgBIAEoBRIQCghudW1fYXhlcxgC",
            "IAEoBRImCgZmaWxsZXIYAyABKAsyFi5jYWZmZS5GaWxsZXJQYXJhbWV0ZXIS",
            "EQoJYmlhc190ZXJtGAQgASgIEisKC2JpYXNfZmlsbGVyGAUgASgLMhYuY2Fm",
            "ZmUuRmlsbGVyUGFyYW1ldGVyIm8KEFNpZ21vaWRQYXJhbWV0ZXISLgoGZW5n",
            "aW5lGAEgASgOMh4uY2FmZmUuU2lnbW9pZFBhcmFtZXRlci5FbmdpbmUiKwoG",
            "RW5naW5lEgsKB0RFRkFVTFQQABIJCgVDQUZGRRABEgkKBUNVRE5OEAIiRgoO",
            "U2xpY2VQYXJhbWV0ZXISDAoEYXhpcxgDIAEoBRITCgtzbGljZV9wb2ludBgC",
            "IAMoDRIRCglzbGljZV9kaW0YASABKA0ifQoQU29mdG1heFBhcmFtZXRlchIu",
            "CgZlbmdpbmUYASABKA4yHi5jYWZmZS5Tb2Z0bWF4UGFyYW1ldGVyLkVuZ2lu",
            "ZRIMCgRheGlzGAIgASgFIisKBkVuZ2luZRILCgdERUZBVUxUEAASCQoFQ0FG",
            "RkUQARIJCgVDVUROThACIh4KDlN3aXNoUGFyYW1ldGVyEgwKBGJldGEYASAB",
            "KAIiaQoNVGFuSFBhcmFtZXRlchIrCgZlbmdpbmUYASABKA4yGy5jYWZmZS5U",
            "YW5IUGFyYW1ldGVyLkVuZ2luZSIrCgZFbmdpbmUSCwoHREVGQVVMVBAAEgkK",
            "BUNBRkZFEAESCQoFQ1VETk4QAiIsCg1UaWxlUGFyYW1ldGVyEgwKBGF4aXMY",
            "ASABKAUSDQoFdGlsZXMYAiABKAUiJwoSVGhyZXNob2xkUGFyYW1ldGVyEhEK",
            "CXRocmVzaG9sZBgBIAEoAiKSAgoTV2luZG93RGF0YVBhcmFtZXRlchIOCgZz",
            "b3VyY2UYASABKAkSDQoFc2NhbGUYAiABKAISEQoJbWVhbl9maWxlGAMgASgJ",
            "EhIKCmJhdGNoX3NpemUYBCABKA0SEQoJY3JvcF9zaXplGAUgASgNEg4KBm1p",
            "cnJvchgGIAEoCBIUCgxmZ190aHJlc2hvbGQYByABKAISFAoMYmdfdGhyZXNo",
            "b2xkGAggASgCEhMKC2ZnX2ZyYWN0aW9uGAkgASgCEhMKC2NvbnRleHRfcGFk",
            "GAogASgNEhEKCWNyb3BfbW9kZRgLIAEoCRIUCgxjYWNoZV9pbWFnZXMYDCAB",
            "KAgSEwoLcm9vdF9mb2xkZXIYDSABKAki3QEKDFNQUFBhcmFtZXRlchIWCg5w",
            "eXJhbWlkX2hlaWdodBgBIAEoDRIsCgRwb29sGAIgASgOMh4uY2FmZmUuU1BQ",
            "UGFyYW1ldGVyLlBvb2xNZXRob2QSKgoGZW5naW5lGAYgASgOMhouY2FmZmUu",
            "U1BQUGFyYW1ldGVyLkVuZ2luZSIuCgpQb29sTWV0aG9kEgcKA01BWBAAEgcK",
            "A0FWRRABEg4KClNUT0NIQVNUSUMQAiIrCgZFbmdpbmUSCwoHREVGQVVMVBAA",
            "EgkKBUNBRkZFEAESCQoFQ1VETk4QAiLgEwoQVjFMYXllclBhcmFtZXRlchIO",
            "CgZib3R0b20YAiADKAkSCwoDdG9wGAMgAygJEgwKBG5hbWUYBCABKAkSJAoH",
            "aW5jbHVkZRggIAMoCzITLmNhZmZlLk5ldFN0YXRlUnVsZRIkCgdleGNsdWRl",
            "GCEgAygLMhMuY2FmZmUuTmV0U3RhdGVSdWxlEi8KBHR5cGUYBSABKA4yIS5j",
            "YWZmZS5WMUxheWVyUGFyYW1ldGVyLkxheWVyVHlwZRIfCgVibG9icxgGIAMo",
            "CzIQLmNhZmZlLkJsb2JQcm90bxIOCgVwYXJhbRjpByADKAkSPgoPYmxvYl9z",
            "aGFyZV9tb2RlGOoHIAMoDjIkLmNhZmZlLlYxTGF5ZXJQYXJhbWV0ZXIuRGlt",
            "Q2hlY2tNb2RlEhAKCGJsb2JzX2xyGAcgAygCEhQKDHdlaWdodF9kZWNheRgI",
            "IAMoAhITCgtsb3NzX3dlaWdodBgjIAMoAhIwCg5hY2N1cmFjeV9wYXJhbRgb",
            "IAEoCzIYLmNhZmZlLkFjY3VyYWN5UGFyYW1ldGVyEiwKDGFyZ21heF9wYXJh",
            "bRgXIAEoCzIWLmNhZmZlLkFyZ01heFBhcmFtZXRlchIsCgxjb25jYXRfcGFy",
            "YW0YCSABKAsyFi5jYWZmZS5Db25jYXRQYXJhbWV0ZXISPwoWY29udHJhc3Rp",
            "dmVfbG9zc19wYXJhbRgoIAEoCzIfLmNhZmZlLkNvbnRyYXN0aXZlTG9zc1Bh",
            "cmFtZXRlchI2ChFjb252b2x1dGlvbl9wYXJhbRgKIAEoCzIbLmNhZmZlLkNv",
            "bnZvbHV0aW9uUGFyYW1ldGVyEigKCmRhdGFfcGFyYW0YCyABKAsyFC5jYWZm",
            "ZS5EYXRhUGFyYW1ldGVyEi4KDWRyb3BvdXRfcGFyYW0YDCABKAsyFy5jYWZm",
            "ZS5Ecm9wb3V0UGFyYW1ldGVyEjMKEGR1bW15X2RhdGFfcGFyYW0YGiABKAsy",
            "GS5jYWZmZS5EdW1teURhdGFQYXJhbWV0ZXISLgoNZWx0d2lzZV9wYXJhbRgY",
            "IAEoCzIXLmNhZmZlLkVsdHdpc2VQYXJhbWV0ZXISJgoJZXhwX3BhcmFtGCkg",
            "ASgLMhMuY2FmZmUuRXhwUGFyYW1ldGVyEjEKD2hkZjVfZGF0YV9wYXJhbRgN",
            "IAEoCzIYLmNhZmZlLkhERjVEYXRhUGFyYW1ldGVyEjUKEWhkZjVfb3V0cHV0",
            "X3BhcmFtGA4gASgLMhouY2FmZmUuSERGNU91dHB1dFBhcmFtZXRlchIzChBo",
            "aW5nZV9sb3NzX3BhcmFtGB0gASgLMhkuY2FmZmUuSGluZ2VMb3NzUGFyYW1l",
            "dGVyEjMKEGltYWdlX2RhdGFfcGFyYW0YDyABKAsyGS5jYWZmZS5JbWFnZURh",
            "dGFQYXJhbWV0ZXISOQoTaW5mb2dhaW5fbG9zc19wYXJhbRgQIAEoCzIcLmNh",
            "ZmZlLkluZm9nYWluTG9zc1BhcmFtZXRlchI5ChNpbm5lcl9wcm9kdWN0X3Bh",
            "cmFtGBEgASgLMhwuY2FmZmUuSW5uZXJQcm9kdWN0UGFyYW1ldGVyEiYKCWxy",
            "bl9wYXJhbRgSIAEoCzITLmNhZmZlLkxSTlBhcmFtZXRlchI1ChFtZW1vcnlf",
            "ZGF0YV9wYXJhbRgWIAEoCzIaLmNhZmZlLk1lbW9yeURhdGFQYXJhbWV0ZXIS",
            "JgoJbXZuX3BhcmFtGCIgASgLMhMuY2FmZmUuTVZOUGFyYW1ldGVyEi4KDXBv",
            "b2xpbmdfcGFyYW0YEyABKAsyFy5jYWZmZS5Qb29saW5nUGFyYW1ldGVyEioK",
            "C3Bvd2VyX3BhcmFtGBUgASgLMhUuY2FmZmUuUG93ZXJQYXJhbWV0ZXISKAoK",
            "cmVsdV9wYXJhbRgeIAEoCzIULmNhZmZlLlJlTFVQYXJhbWV0ZXISLgoNc2ln",
            "bW9pZF9wYXJhbRgmIAEoCzIXLmNhZmZlLlNpZ21vaWRQYXJhbWV0ZXISLgoN",
            "c29mdG1heF9wYXJhbRgnIAEoCzIXLmNhZmZlLlNvZnRtYXhQYXJhbWV0ZXIS",
            "KgoLc2xpY2VfcGFyYW0YHyABKAsyFS5jYWZmZS5TbGljZVBhcmFtZXRlchIo",
            "Cgp0YW5oX3BhcmFtGCUgASgLMhQuY2FmZmUuVGFuSFBhcmFtZXRlchIyCg90",
            "aHJlc2hvbGRfcGFyYW0YGSABKAsyGS5jYWZmZS5UaHJlc2hvbGRQYXJhbWV0",
            "ZXISNQoRd2luZG93X2RhdGFfcGFyYW0YFCABKAsyGi5jYWZmZS5XaW5kb3dE",
            "YXRhUGFyYW1ldGVyEjcKD3RyYW5zZm9ybV9wYXJhbRgkIAEoCzIeLmNhZmZl",
            "LlRyYW5zZm9ybWF0aW9uUGFyYW1ldGVyEigKCmxvc3NfcGFyYW0YKiABKAsy",
            "FC5jYWZmZS5Mb3NzUGFyYW1ldGVyEiYKBWxheWVyGAEgASgLMhcuY2FmZmUu",
            "VjBMYXllclBhcmFtZXRlciLYBAoJTGF5ZXJUeXBlEggKBE5PTkUQABIKCgZB",
            "QlNWQUwQIxIMCghBQ0NVUkFDWRABEgoKBkFSR01BWBAeEggKBEJOTEwQAhIK",
            "CgZDT05DQVQQAxIUChBDT05UUkFTVElWRV9MT1NTECUSDwoLQ09OVk9MVVRJ",
            "T04QBBIICgREQVRBEAUSEQoNREVDT05WT0xVVElPThAnEgsKB0RST1BPVVQQ",
            "BhIOCgpEVU1NWV9EQVRBECASEgoORVVDTElERUFOX0xPU1MQBxILCgdFTFRX",
            "SVNFEBkSBwoDRVhQECYSCwoHRkxBVFRFThAIEg0KCUhERjVfREFUQRAJEg8K",
            "C0hERjVfT1VUUFVUEAoSDgoKSElOR0VfTE9TUxAcEgoKBklNMkNPTBALEg4K",
            "CklNQUdFX0RBVEEQDBIRCg1JTkZPR0FJTl9MT1NTEA0SEQoNSU5ORVJfUFJP",
            "RFVDVBAOEgcKA0xSThAPEg8KC01FTU9SWV9EQVRBEB0SHQoZTVVMVElOT01J",
            "QUxfTE9HSVNUSUNfTE9TUxAQEgcKA01WThAiEgsKB1BPT0xJTkcQERIJCgVQ",
            "T1dFUhAaEggKBFJFTFUQEhILCgdTSUdNT0lEEBMSHgoaU0lHTU9JRF9DUk9T",
            "U19FTlRST1BZX0xPU1MQGxILCgdTSUxFTkNFECQSCwoHU09GVE1BWBAUEhAK",
            "DFNPRlRNQVhfTE9TUxAVEgkKBVNQTElUEBYSCQoFU0xJQ0UQIRIICgRUQU5I",
            "EBcSDwoLV0lORE9XX0RBVEEQGBINCglUSFJFU0hPTEQQHyIqCgxEaW1DaGVj",
            "a01vZGUSCgoGU1RSSUNUEAASDgoKUEVSTUlTU0lWRRABIpYHChBWMExheWVy",
            "UGFyYW1ldGVyEgwKBG5hbWUYASABKAkSDAoEdHlwZRgCIAEoCRISCgpudW1f",
            "b3V0cHV0GAMgASgNEhAKCGJpYXN0ZXJtGAQgASgIEi0KDXdlaWdodF9maWxs",
            "ZXIYBSABKAsyFi5jYWZmZS5GaWxsZXJQYXJhbWV0ZXISKwoLYmlhc19maWxs",
            "ZXIYBiABKAsyFi5jYWZmZS5GaWxsZXJQYXJhbWV0ZXISCwoDcGFkGAcgASgN",
            "EhIKCmtlcm5lbHNpemUYCCABKA0SDQoFZ3JvdXAYCSABKA0SDgoGc3RyaWRl",
            "GAogASgNEjAKBHBvb2wYCyABKA4yIi5jYWZmZS5WMExheWVyUGFyYW1ldGVy",
            "LlBvb2xNZXRob2QSFQoNZHJvcG91dF9yYXRpbxgMIAEoAhISCgpsb2NhbF9z",
            "aXplGA0gASgNEg0KBWFscGhhGA4gASgCEgwKBGJldGEYDyABKAISCQoBaxgW",
            "IAEoAhIOCgZzb3VyY2UYECABKAkSDQoFc2NhbGUYESABKAISEAoIbWVhbmZp",
            "bGUYEiABKAkSEQoJYmF0Y2hzaXplGBMgASgNEhAKCGNyb3BzaXplGBQgASgN",
            "Eg4KBm1pcnJvchgVIAEoCBIfCgVibG9icxgyIAMoCzIQLmNhZmZlLkJsb2JQ",
            "cm90bxIQCghibG9ic19schgzIAMoAhIUCgx3ZWlnaHRfZGVjYXkYNCADKAIS",
            "EQoJcmFuZF9za2lwGDUgASgNEhgKEGRldF9mZ190aHJlc2hvbGQYNiABKAIS",
            "GAoQZGV0X2JnX3RocmVzaG9sZBg3IAEoAhIXCg9kZXRfZmdfZnJhY3Rpb24Y",
            "OCABKAISFwoPZGV0X2NvbnRleHRfcGFkGDogASgNEhUKDWRldF9jcm9wX21v",
            "ZGUYOyABKAkSDwoHbmV3X251bRg8IAEoBRIUCgxuZXdfY2hhbm5lbHMYPSAB",
            "KAUSEgoKbmV3X2hlaWdodBg+IAEoBRIRCgluZXdfd2lkdGgYPyABKAUSFgoO",
            "c2h1ZmZsZV9pbWFnZXMYQCABKAgSEgoKY29uY2F0X2RpbRhBIAEoDRI2ChFo",
            "ZGY1X291dHB1dF9wYXJhbRjpByABKAsyGi5jYWZmZS5IREY1T3V0cHV0UGFy",
            "YW1ldGVyIi4KClBvb2xNZXRob2QSBwoDTUFYEAASBwoDQVZFEAESDgoKU1RP",
            "Q0hBU1RJQxACIlAKDlBSZUxVUGFyYW1ldGVyEiYKBmZpbGxlchgBIAEoCzIW",
            "LmNhZmZlLkZpbGxlclBhcmFtZXRlchIWCg5jaGFubmVsX3NoYXJlZBgCIAEo",
            "CCJVChdDb21iaW5lZE1hcmdpblBhcmFtZXRlchIKCgJtMRgBIAEoAhIKCgJt",
            "MhgCIAEoAhIKCgJtMxgDIAEoAhIWCg50cmFuc2Zvcm1fdGVzdBgEIAEoCCI3",
            "ChJDb3NpbkFkZG1QYXJhbWV0ZXISCQoBbRgBIAEoAhIWCg50cmFuc2Zvcm1f",
            "dGVzdBgCIAEoCCJTChJOb3JtYWxpemVQYXJhbWV0ZXISFgoObm9ybWFsaXpl",
            "X3R5cGUYASABKAkSFAoMZml4X2dyYWRpZW50GAIgASgIEg8KB2JwX25vcm0Y",
            "AyABKAgiGgoYTDJOb3JtYWxpemF0aW9uUGFyYW1ldGVyIpsBChJGb2NhbExv",
            "c3NQYXJhbWV0ZXISLAoEdHlwZRgBIAEoDjIeLmNhZmZlLkZvY2FsTG9zc1Bh",
            "cmFtZXRlci5UeXBlEg0KBWdhbW1hGAIgASgCEg0KBWFscGhhGAMgASgCEgwK",
            "BGJldGEYBCABKAIiKwoEVHlwZRIKCgZPUklHSU4QABIKCgZMSU5FQVIQARIL",
            "CgdPTkVBRERQEAIiswEKGUxhYmVsU3BlY2lmaWNBZGRQYXJhbWV0ZXISDAoE",
            "YmlhcxgBIAEoAhIWCg50cmFuc2Zvcm1fdGVzdBgCIAEoCBIRCgliaWFzX2Jh",
            "c2UYAyABKAISEgoKYmlhc19nYW1tYRgEIAEoAhISCgpiaWFzX3Bvd2VyGAUg",
            "ASgCEhAKCGJpYXNfbWluGAYgASgCEhAKCGJpYXNfbWF4GAcgASgCEhEKCWl0",
            "ZXJhdGlvbhgIIAEoDSocCgVQaGFzZRIJCgVUUkFJThAAEggKBFRFU1QQAWIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Caffe.Phase), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.BlobShape), global::Caffe.BlobShape.Parser, new[]{ "Dim" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.BlobProto), global::Caffe.BlobProto.Parser, new[]{ "Shape", "Data", "Diff", "DoubleData", "DoubleDiff", "Num", "Channels", "Height", "Width" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.BlobProtoVector), global::Caffe.BlobProtoVector.Parser, new[]{ "Blobs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.Datum), global::Caffe.Datum.Parser, new[]{ "Channels", "Height", "Width", "Data", "Label", "FloatData", "Encoded" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.FillerParameter), global::Caffe.FillerParameter.Parser, new[]{ "Type", "Value", "Min", "Max", "Mean", "Std", "Sparse", "VarianceNorm" }, null, new[]{ typeof(global::Caffe.FillerParameter.Types.VarianceNorm) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.NetParameter), global::Caffe.NetParameter.Parser, new[]{ "Name", "Input", "InputShape", "InputDim", "ForceBackward", "State", "DebugInfo", "Layer", "Layers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.SolverParameter), global::Caffe.SolverParameter.Parser, new[]{ "Net", "NetParam", "TrainNet", "TestNet", "TrainNetParam", "TestNetParam", "TrainState", "TestState", "TestIter", "TestInterval", "TestComputeLoss", "TestInitialization", "BaseLr", "Display", "AverageLoss", "MaxIter", "IterSize", "LrPolicy", "Gamma", "Power", "Momentum", "WeightDecay", "RegularizationType", "Stepsize", "Stepvalue", "ClipGradients", "Snapshot", "SnapshotPrefix", "SnapshotDiff", "SnapshotFormat", "SolverMode", "DeviceId", "RandomSeed", "Type", "Delta", "Momentum2", "RmsDecay", "DebugInfo", "SnapshotAfterTrain", "SolverType", "LayerWiseReduce", "Weights" }, null, new[]{ typeof(global::Caffe.SolverParameter.Types.SnapshotFormat), typeof(global::Caffe.SolverParameter.Types.SolverMode), typeof(global::Caffe.SolverParameter.Types.SolverType) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.SolverState), global::Caffe.SolverState.Parser, new[]{ "Iter", "LearnedNet", "History", "CurrentStep" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.NetState), global::Caffe.NetState.Parser, new[]{ "Phase", "Level", "Stage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.NetStateRule), global::Caffe.NetStateRule.Parser, new[]{ "Phase", "MinLevel", "MaxLevel", "Stage", "NotStage" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ParamSpec), global::Caffe.ParamSpec.Parser, new[]{ "Name", "ShareMode", "LrMult", "DecayMult" }, null, new[]{ typeof(global::Caffe.ParamSpec.Types.DimCheckMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.LayerParameter), global::Caffe.LayerParameter.Parser, new[]{ "Name", "Type", "Bottom", "Top", "Phase", "LossWeight", "Param", "Blobs", "PropagateDown", "Include", "Exclude", "TransformParam", "LossParam", "AccuracyParam", "ArgmaxParam", "BatchNormParam", "BiasParam", "ConcatParam", "ContrastiveLossParam", "ConvolutionParam", "CropParam", "DataParam", "DropoutParam", "DummyDataParam", "EltwiseParam", "EluParam", "EmbedParam", "ExpParam", "FlattenParam", "Hdf5DataParam", "Hdf5OutputParam", "HingeLossParam", "ImageDataParam", "InfogainLossParam", "InnerProductParam", "InputParam", "LogParam", "LrnParam", "MemoryDataParam", "MvnParam", "ParameterParam", "PoolingParam", "PowerParam", "PreluParam", "PythonParam", "RecurrentParam", "ReductionParam", "ReluParam", "ReshapeParam", "ScaleParam", "SigmoidParam", "SoftmaxParam", "SppParam", "SliceParam", "SwishParam", "TanhParam", "ThresholdParam", "TileParam", "WindowDataParam", "CombinedMarginParam", "CosinAddMParam", "NormalizeParam", "L2NormalizationParam", "FocalLossParam", "LabelSpecificAddParam" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.TransformationParameter), global::Caffe.TransformationParameter.Parser, new[]{ "Scale", "Mirror", "CropSize", "MeanFile", "MeanValue", "ForceColor", "ForceGray" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.LossParameter), global::Caffe.LossParameter.Parser, new[]{ "IgnoreLabel", "Normalization", "Normalize" }, null, new[]{ typeof(global::Caffe.LossParameter.Types.NormalizationMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.AccuracyParameter), global::Caffe.AccuracyParameter.Parser, new[]{ "TopK", "Axis", "IgnoreLabel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ArgMaxParameter), global::Caffe.ArgMaxParameter.Parser, new[]{ "OutMaxVal", "TopK", "Axis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ConcatParameter), global::Caffe.ConcatParameter.Parser, new[]{ "Axis", "ConcatDim" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.BatchNormParameter), global::Caffe.BatchNormParameter.Parser, new[]{ "UseGlobalStats", "MovingAverageFraction", "Eps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.BiasParameter), global::Caffe.BiasParameter.Parser, new[]{ "Axis", "NumAxes", "Filler" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ContrastiveLossParameter), global::Caffe.ContrastiveLossParameter.Parser, new[]{ "Margin", "LegacyVersion" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ConvolutionParameter), global::Caffe.ConvolutionParameter.Parser, new[]{ "NumOutput", "BiasTerm", "Pad", "KernelSize", "Stride", "Dilation", "PadH", "PadW", "KernelH", "KernelW", "StrideH", "StrideW", "Group", "WeightFiller", "BiasFiller", "Engine", "Axis", "ForceNdIm2Col" }, null, new[]{ typeof(global::Caffe.ConvolutionParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.CropParameter), global::Caffe.CropParameter.Parser, new[]{ "Axis", "Offset" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.DataParameter), global::Caffe.DataParameter.Parser, new[]{ "Source", "BatchSize", "RandSkip", "Backend", "Scale", "MeanFile", "CropSize", "Mirror", "ForceEncodedColor", "Prefetch" }, null, new[]{ typeof(global::Caffe.DataParameter.Types.DB) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.DropoutParameter), global::Caffe.DropoutParameter.Parser, new[]{ "DropoutRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.DummyDataParameter), global::Caffe.DummyDataParameter.Parser, new[]{ "DataFiller", "Shape", "Num", "Channels", "Height", "Width" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.EltwiseParameter), global::Caffe.EltwiseParameter.Parser, new[]{ "Operation", "Coeff", "StableProdGrad" }, null, new[]{ typeof(global::Caffe.EltwiseParameter.Types.EltwiseOp) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ELUParameter), global::Caffe.ELUParameter.Parser, new[]{ "Alpha" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.EmbedParameter), global::Caffe.EmbedParameter.Parser, new[]{ "NumOutput", "InputDim", "BiasTerm", "WeightFiller", "BiasFiller" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ExpParameter), global::Caffe.ExpParameter.Parser, new[]{ "Base", "Scale", "Shift" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.FlattenParameter), global::Caffe.FlattenParameter.Parser, new[]{ "Axis", "EndAxis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.HDF5DataParameter), global::Caffe.HDF5DataParameter.Parser, new[]{ "Source", "BatchSize", "Shuffle" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.HDF5OutputParameter), global::Caffe.HDF5OutputParameter.Parser, new[]{ "FileName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.HingeLossParameter), global::Caffe.HingeLossParameter.Parser, new[]{ "Norm" }, null, new[]{ typeof(global::Caffe.HingeLossParameter.Types.Norm) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ImageDataParameter), global::Caffe.ImageDataParameter.Parser, new[]{ "Source", "BatchSize", "RandSkip", "Shuffle", "NewHeight", "NewWidth", "IsColor", "Scale", "MeanFile", "CropSize", "Mirror", "RootFolder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.InfogainLossParameter), global::Caffe.InfogainLossParameter.Parser, new[]{ "Source", "Axis" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.InnerProductParameter), global::Caffe.InnerProductParameter.Parser, new[]{ "NumOutput", "BiasTerm", "WeightFiller", "BiasFiller", "Axis", "Transpose", "Normalize" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.InputParameter), global::Caffe.InputParameter.Parser, new[]{ "Shape" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.LogParameter), global::Caffe.LogParameter.Parser, new[]{ "Base", "Scale", "Shift" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.LRNParameter), global::Caffe.LRNParameter.Parser, new[]{ "LocalSize", "Alpha", "Beta", "NormRegion", "K", "Engine" }, null, new[]{ typeof(global::Caffe.LRNParameter.Types.NormRegion), typeof(global::Caffe.LRNParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.MemoryDataParameter), global::Caffe.MemoryDataParameter.Parser, new[]{ "BatchSize", "Channels", "Height", "Width" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.MVNParameter), global::Caffe.MVNParameter.Parser, new[]{ "NormalizeVariance", "AcrossChannels", "Eps" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ParameterParameter), global::Caffe.ParameterParameter.Parser, new[]{ "Shape" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.PoolingParameter), global::Caffe.PoolingParameter.Parser, new[]{ "Pool", "Pad", "PadH", "PadW", "KernelSize", "KernelH", "KernelW", "Stride", "StrideH", "StrideW", "Engine", "GlobalPooling" }, null, new[]{ typeof(global::Caffe.PoolingParameter.Types.PoolMethod), typeof(global::Caffe.PoolingParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.PowerParameter), global::Caffe.PowerParameter.Parser, new[]{ "Power", "Scale", "Shift" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.PythonParameter), global::Caffe.PythonParameter.Parser, new[]{ "Module", "Layer", "ParamStr", "ShareInParallel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.RecurrentParameter), global::Caffe.RecurrentParameter.Parser, new[]{ "NumOutput", "WeightFiller", "BiasFiller", "DebugInfo", "ExposeHidden" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ReductionParameter), global::Caffe.ReductionParameter.Parser, new[]{ "Operation", "Axis", "Coeff" }, null, new[]{ typeof(global::Caffe.ReductionParameter.Types.ReductionOp) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ReLUParameter), global::Caffe.ReLUParameter.Parser, new[]{ "NegativeSlope", "Engine" }, null, new[]{ typeof(global::Caffe.ReLUParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ReshapeParameter), global::Caffe.ReshapeParameter.Parser, new[]{ "Shape", "Axis", "NumAxes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ScaleParameter), global::Caffe.ScaleParameter.Parser, new[]{ "Axis", "NumAxes", "Filler", "BiasTerm", "BiasFiller" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.SigmoidParameter), global::Caffe.SigmoidParameter.Parser, new[]{ "Engine" }, null, new[]{ typeof(global::Caffe.SigmoidParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.SliceParameter), global::Caffe.SliceParameter.Parser, new[]{ "Axis", "SlicePoint", "SliceDim" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.SoftmaxParameter), global::Caffe.SoftmaxParameter.Parser, new[]{ "Engine", "Axis" }, null, new[]{ typeof(global::Caffe.SoftmaxParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.SwishParameter), global::Caffe.SwishParameter.Parser, new[]{ "Beta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.TanHParameter), global::Caffe.TanHParameter.Parser, new[]{ "Engine" }, null, new[]{ typeof(global::Caffe.TanHParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.TileParameter), global::Caffe.TileParameter.Parser, new[]{ "Axis", "Tiles" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.ThresholdParameter), global::Caffe.ThresholdParameter.Parser, new[]{ "Threshold" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.WindowDataParameter), global::Caffe.WindowDataParameter.Parser, new[]{ "Source", "Scale", "MeanFile", "BatchSize", "CropSize", "Mirror", "FgThreshold", "BgThreshold", "FgFraction", "ContextPad", "CropMode", "CacheImages", "RootFolder" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.SPPParameter), global::Caffe.SPPParameter.Parser, new[]{ "PyramidHeight", "Pool", "Engine" }, null, new[]{ typeof(global::Caffe.SPPParameter.Types.PoolMethod), typeof(global::Caffe.SPPParameter.Types.Engine) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.V1LayerParameter), global::Caffe.V1LayerParameter.Parser, new[]{ "Bottom", "Top", "Name", "Include", "Exclude", "Type", "Blobs", "Param", "BlobShareMode", "BlobsLr", "WeightDecay", "LossWeight", "AccuracyParam", "ArgmaxParam", "ConcatParam", "ContrastiveLossParam", "ConvolutionParam", "DataParam", "DropoutParam", "DummyDataParam", "EltwiseParam", "ExpParam", "Hdf5DataParam", "Hdf5OutputParam", "HingeLossParam", "ImageDataParam", "InfogainLossParam", "InnerProductParam", "LrnParam", "MemoryDataParam", "MvnParam", "PoolingParam", "PowerParam", "ReluParam", "SigmoidParam", "SoftmaxParam", "SliceParam", "TanhParam", "ThresholdParam", "WindowDataParam", "TransformParam", "LossParam", "Layer" }, null, new[]{ typeof(global::Caffe.V1LayerParameter.Types.LayerType), typeof(global::Caffe.V1LayerParameter.Types.DimCheckMode) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.V0LayerParameter), global::Caffe.V0LayerParameter.Parser, new[]{ "Name", "Type", "NumOutput", "Biasterm", "WeightFiller", "BiasFiller", "Pad", "Kernelsize", "Group", "Stride", "Pool", "DropoutRatio", "LocalSize", "Alpha", "Beta", "K", "Source", "Scale", "Meanfile", "Batchsize", "Cropsize", "Mirror", "Blobs", "BlobsLr", "WeightDecay", "RandSkip", "DetFgThreshold", "DetBgThreshold", "DetFgFraction", "DetContextPad", "DetCropMode", "NewNum", "NewChannels", "NewHeight", "NewWidth", "ShuffleImages", "ConcatDim", "Hdf5OutputParam" }, null, new[]{ typeof(global::Caffe.V0LayerParameter.Types.PoolMethod) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.PReLUParameter), global::Caffe.PReLUParameter.Parser, new[]{ "Filler", "ChannelShared" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.CombinedMarginParameter), global::Caffe.CombinedMarginParameter.Parser, new[]{ "M1", "M2", "M3", "TransformTest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.CosinAddmParameter), global::Caffe.CosinAddmParameter.Parser, new[]{ "M", "TransformTest" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.NormalizeParameter), global::Caffe.NormalizeParameter.Parser, new[]{ "NormalizeType", "FixGradient", "BpNorm" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.L2NormalizationParameter), global::Caffe.L2NormalizationParameter.Parser, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.FocalLossParameter), global::Caffe.FocalLossParameter.Parser, new[]{ "Type", "Gamma", "Alpha", "Beta" }, null, new[]{ typeof(global::Caffe.FocalLossParameter.Types.Type) }, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Caffe.LabelSpecificAddParameter), global::Caffe.LabelSpecificAddParameter.Parser, new[]{ "Bias", "TransformTest", "BiasBase", "BiasGamma", "BiasPower", "BiasMin", "BiasMax", "Iteration" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum Phase {
    [pbr::OriginalName("TRAIN")] Train = 0,
    [pbr::OriginalName("TEST")] Test = 1,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Specifies the shape (dimensions) of a Blob.
  /// </summary>
  public sealed partial class BlobShape : pb::IMessage<BlobShape> {
    private static readonly pb::MessageParser<BlobShape> _parser = new pb::MessageParser<BlobShape>(() => new BlobShape());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlobShape> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobShape() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobShape(BlobShape other) : this() {
      dim_ = other.dim_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobShape Clone() {
      return new BlobShape(this);
    }

    /// <summary>Field number for the "dim" field.</summary>
    public const int DimFieldNumber = 1;
    private static readonly pb::FieldCodec<long> _repeated_dim_codec
        = pb::FieldCodec.ForInt64(10);
    private readonly pbc::RepeatedField<long> dim_ = new pbc::RepeatedField<long>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<long> Dim {
      get { return dim_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlobShape);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlobShape other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dim_.Equals(other.dim_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dim_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dim_.WriteTo(output, _repeated_dim_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dim_.CalculateSize(_repeated_dim_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlobShape other) {
      if (other == null) {
        return;
      }
      dim_.Add(other.dim_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10:
          case 8: {
            dim_.AddEntriesFrom(input, _repeated_dim_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlobProto : pb::IMessage<BlobProto> {
    private static readonly pb::MessageParser<BlobProto> _parser = new pb::MessageParser<BlobProto>(() => new BlobProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlobProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobProto(BlobProto other) : this() {
      shape_ = other.shape_ != null ? other.shape_.Clone() : null;
      data_ = other.data_.Clone();
      diff_ = other.diff_.Clone();
      doubleData_ = other.doubleData_.Clone();
      doubleDiff_ = other.doubleDiff_.Clone();
      num_ = other.num_;
      channels_ = other.channels_;
      height_ = other.height_;
      width_ = other.width_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobProto Clone() {
      return new BlobProto(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 7;
    private global::Caffe.BlobShape shape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.BlobShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_data_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> data_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Data {
      get { return data_; }
    }

    /// <summary>Field number for the "diff" field.</summary>
    public const int DiffFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_diff_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> diff_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Diff {
      get { return diff_; }
    }

    /// <summary>Field number for the "double_data" field.</summary>
    public const int DoubleDataFieldNumber = 8;
    private static readonly pb::FieldCodec<double> _repeated_doubleData_codec
        = pb::FieldCodec.ForDouble(66);
    private readonly pbc::RepeatedField<double> doubleData_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> DoubleData {
      get { return doubleData_; }
    }

    /// <summary>Field number for the "double_diff" field.</summary>
    public const int DoubleDiffFieldNumber = 9;
    private static readonly pb::FieldCodec<double> _repeated_doubleDiff_codec
        = pb::FieldCodec.ForDouble(74);
    private readonly pbc::RepeatedField<double> doubleDiff_ = new pbc::RepeatedField<double>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<double> DoubleDiff {
      get { return doubleDiff_; }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 1;
    private int num_;
    /// <summary>
    /// 4D dimensions -- deprecated.  Use "shape" instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Num {
      get { return num_; }
      set {
        num_ = value;
      }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 2;
    private int channels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channels {
      get { return channels_; }
      set {
        channels_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlobProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlobProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Shape, other.Shape)) return false;
      if(!data_.Equals(other.data_)) return false;
      if(!diff_.Equals(other.diff_)) return false;
      if(!doubleData_.Equals(other.doubleData_)) return false;
      if(!doubleDiff_.Equals(other.doubleDiff_)) return false;
      if (Num != other.Num) return false;
      if (Channels != other.Channels) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shape_ != null) hash ^= Shape.GetHashCode();
      hash ^= data_.GetHashCode();
      hash ^= diff_.GetHashCode();
      hash ^= doubleData_.GetHashCode();
      hash ^= doubleDiff_.GetHashCode();
      if (Num != 0) hash ^= Num.GetHashCode();
      if (Channels != 0) hash ^= Channels.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Num != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Num);
      }
      if (Channels != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Channels);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Width);
      }
      data_.WriteTo(output, _repeated_data_codec);
      diff_.WriteTo(output, _repeated_diff_codec);
      if (shape_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Shape);
      }
      doubleData_.WriteTo(output, _repeated_doubleData_codec);
      doubleDiff_.WriteTo(output, _repeated_doubleDiff_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      size += diff_.CalculateSize(_repeated_diff_codec);
      size += doubleData_.CalculateSize(_repeated_doubleData_codec);
      size += doubleDiff_.CalculateSize(_repeated_doubleDiff_codec);
      if (Num != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Num);
      }
      if (Channels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channels);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlobProto other) {
      if (other == null) {
        return;
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          shape_ = new global::Caffe.BlobShape();
        }
        Shape.MergeFrom(other.Shape);
      }
      data_.Add(other.data_);
      diff_.Add(other.diff_);
      doubleData_.Add(other.doubleData_);
      doubleDiff_.Add(other.doubleDiff_);
      if (other.Num != 0) {
        Num = other.Num;
      }
      if (other.Channels != 0) {
        Channels = other.Channels;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Num = input.ReadInt32();
            break;
          }
          case 16: {
            Channels = input.ReadInt32();
            break;
          }
          case 24: {
            Height = input.ReadInt32();
            break;
          }
          case 32: {
            Width = input.ReadInt32();
            break;
          }
          case 42:
          case 45: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 50:
          case 53: {
            diff_.AddEntriesFrom(input, _repeated_diff_codec);
            break;
          }
          case 58: {
            if (shape_ == null) {
              shape_ = new global::Caffe.BlobShape();
            }
            input.ReadMessage(shape_);
            break;
          }
          case 66:
          case 65: {
            doubleData_.AddEntriesFrom(input, _repeated_doubleData_codec);
            break;
          }
          case 74:
          case 73: {
            doubleDiff_.AddEntriesFrom(input, _repeated_doubleDiff_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// The BlobProtoVector is simply a way to pass multiple blobproto instances
  /// around.
  /// </summary>
  public sealed partial class BlobProtoVector : pb::IMessage<BlobProtoVector> {
    private static readonly pb::MessageParser<BlobProtoVector> _parser = new pb::MessageParser<BlobProtoVector>(() => new BlobProtoVector());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlobProtoVector> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobProtoVector() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobProtoVector(BlobProtoVector other) : this() {
      blobs_ = other.blobs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlobProtoVector Clone() {
      return new BlobProtoVector(this);
    }

    /// <summary>Field number for the "blobs" field.</summary>
    public const int BlobsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Caffe.BlobProto> _repeated_blobs_codec
        = pb::FieldCodec.ForMessage(10, global::Caffe.BlobProto.Parser);
    private readonly pbc::RepeatedField<global::Caffe.BlobProto> blobs_ = new pbc::RepeatedField<global::Caffe.BlobProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.BlobProto> Blobs {
      get { return blobs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlobProtoVector);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlobProtoVector other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blobs_.Equals(other.blobs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blobs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blobs_.WriteTo(output, _repeated_blobs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blobs_.CalculateSize(_repeated_blobs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlobProtoVector other) {
      if (other == null) {
        return;
      }
      blobs_.Add(other.blobs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            blobs_.AddEntriesFrom(input, _repeated_blobs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class Datum : pb::IMessage<Datum> {
    private static readonly pb::MessageParser<Datum> _parser = new pb::MessageParser<Datum>(() => new Datum());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Datum> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Datum() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Datum(Datum other) : this() {
      channels_ = other.channels_;
      height_ = other.height_;
      width_ = other.width_;
      data_ = other.data_;
      label_ = other.label_;
      floatData_ = other.floatData_.Clone();
      encoded_ = other.encoded_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Datum Clone() {
      return new Datum(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private int channels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Channels {
      get { return channels_; }
      set {
        channels_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 2;
    private int height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 3;
    private int width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    /// the actual image data, in bytes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "label" field.</summary>
    public const int LabelFieldNumber = 5;
    private int label_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Label {
      get { return label_; }
      set {
        label_ = value;
      }
    }

    /// <summary>Field number for the "float_data" field.</summary>
    public const int FloatDataFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_floatData_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> floatData_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// Optionally, the datum could also hold float data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FloatData {
      get { return floatData_; }
    }

    /// <summary>Field number for the "encoded" field.</summary>
    public const int EncodedFieldNumber = 7;
    private bool encoded_;
    /// <summary>
    /// If true data contains an encoded image that need to be decoded
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Encoded {
      get { return encoded_; }
      set {
        encoded_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Datum);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Datum other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Channels != other.Channels) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      if (Data != other.Data) return false;
      if (Label != other.Label) return false;
      if(!floatData_.Equals(other.floatData_)) return false;
      if (Encoded != other.Encoded) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Channels != 0) hash ^= Channels.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (Label != 0) hash ^= Label.GetHashCode();
      hash ^= floatData_.GetHashCode();
      if (Encoded != false) hash ^= Encoded.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Channels != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Channels);
      }
      if (Height != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Width);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
      if (Label != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Label);
      }
      floatData_.WriteTo(output, _repeated_floatData_codec);
      if (Encoded != false) {
        output.WriteRawTag(56);
        output.WriteBool(Encoded);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Channels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channels);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      if (Label != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Label);
      }
      size += floatData_.CalculateSize(_repeated_floatData_codec);
      if (Encoded != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Datum other) {
      if (other == null) {
        return;
      }
      if (other.Channels != 0) {
        Channels = other.Channels;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.Label != 0) {
        Label = other.Label;
      }
      floatData_.Add(other.floatData_);
      if (other.Encoded != false) {
        Encoded = other.Encoded;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Channels = input.ReadInt32();
            break;
          }
          case 16: {
            Height = input.ReadInt32();
            break;
          }
          case 24: {
            Width = input.ReadInt32();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
          case 40: {
            Label = input.ReadInt32();
            break;
          }
          case 50:
          case 53: {
            floatData_.AddEntriesFrom(input, _repeated_floatData_codec);
            break;
          }
          case 56: {
            Encoded = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FillerParameter : pb::IMessage<FillerParameter> {
    private static readonly pb::MessageParser<FillerParameter> _parser = new pb::MessageParser<FillerParameter>(() => new FillerParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FillerParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FillerParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FillerParameter(FillerParameter other) : this() {
      type_ = other.type_;
      value_ = other.value_;
      min_ = other.min_;
      max_ = other.max_;
      mean_ = other.mean_;
      std_ = other.std_;
      sparse_ = other.sparse_;
      varianceNorm_ = other.varianceNorm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FillerParameter Clone() {
      return new FillerParameter(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// The filler type.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "value" field.</summary>
    public const int ValueFieldNumber = 2;
    private float value_;
    /// <summary>
    /// the value in constant filler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Value {
      get { return value_; }
      set {
        value_ = value;
      }
    }

    /// <summary>Field number for the "min" field.</summary>
    public const int MinFieldNumber = 3;
    private float min_;
    /// <summary>
    /// the min value in uniform filler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Min {
      get { return min_; }
      set {
        min_ = value;
      }
    }

    /// <summary>Field number for the "max" field.</summary>
    public const int MaxFieldNumber = 4;
    private float max_;
    /// <summary>
    /// the max value in uniform filler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Max {
      get { return max_; }
      set {
        max_ = value;
      }
    }

    /// <summary>Field number for the "mean" field.</summary>
    public const int MeanFieldNumber = 5;
    private float mean_;
    /// <summary>
    /// the mean value in Gaussian filler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Mean {
      get { return mean_; }
      set {
        mean_ = value;
      }
    }

    /// <summary>Field number for the "std" field.</summary>
    public const int StdFieldNumber = 6;
    private float std_;
    /// <summary>
    /// the std value in Gaussian filler
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Std {
      get { return std_; }
      set {
        std_ = value;
      }
    }

    /// <summary>Field number for the "sparse" field.</summary>
    public const int SparseFieldNumber = 7;
    private int sparse_;
    /// <summary>
    /// The expected number of non-zero output weights for a given input in
    /// Gaussian filler -- the default -1 means don't perform sparsification.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Sparse {
      get { return sparse_; }
      set {
        sparse_ = value;
      }
    }

    /// <summary>Field number for the "variance_norm" field.</summary>
    public const int VarianceNormFieldNumber = 8;
    private global::Caffe.FillerParameter.Types.VarianceNorm varianceNorm_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter.Types.VarianceNorm VarianceNorm {
      get { return varianceNorm_; }
      set {
        varianceNorm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FillerParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FillerParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Min, other.Min)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Max, other.Max)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Mean, other.Mean)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Std, other.Std)) return false;
      if (Sparse != other.Sparse) return false;
      if (VarianceNorm != other.VarianceNorm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
      if (Min != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Min);
      if (Max != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Max);
      if (Mean != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Mean);
      if (Std != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Std);
      if (Sparse != 0) hash ^= Sparse.GetHashCode();
      if (VarianceNorm != 0) hash ^= VarianceNorm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (Value != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Value);
      }
      if (Min != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Min);
      }
      if (Max != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Max);
      }
      if (Mean != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Mean);
      }
      if (Std != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(Std);
      }
      if (Sparse != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Sparse);
      }
      if (VarianceNorm != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) VarianceNorm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Value != 0F) {
        size += 1 + 4;
      }
      if (Min != 0F) {
        size += 1 + 4;
      }
      if (Max != 0F) {
        size += 1 + 4;
      }
      if (Mean != 0F) {
        size += 1 + 4;
      }
      if (Std != 0F) {
        size += 1 + 4;
      }
      if (Sparse != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sparse);
      }
      if (VarianceNorm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VarianceNorm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FillerParameter other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Value != 0F) {
        Value = other.Value;
      }
      if (other.Min != 0F) {
        Min = other.Min;
      }
      if (other.Max != 0F) {
        Max = other.Max;
      }
      if (other.Mean != 0F) {
        Mean = other.Mean;
      }
      if (other.Std != 0F) {
        Std = other.Std;
      }
      if (other.Sparse != 0) {
        Sparse = other.Sparse;
      }
      if (other.VarianceNorm != 0) {
        VarianceNorm = other.VarianceNorm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 21: {
            Value = input.ReadFloat();
            break;
          }
          case 29: {
            Min = input.ReadFloat();
            break;
          }
          case 37: {
            Max = input.ReadFloat();
            break;
          }
          case 45: {
            Mean = input.ReadFloat();
            break;
          }
          case 53: {
            Std = input.ReadFloat();
            break;
          }
          case 56: {
            Sparse = input.ReadInt32();
            break;
          }
          case 64: {
            varianceNorm_ = (global::Caffe.FillerParameter.Types.VarianceNorm) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FillerParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// Normalize the filler variance by fan_in, fan_out, or their average.
      /// Applies to 'xavier' and 'msra' fillers.
      /// </summary>
      public enum VarianceNorm {
        [pbr::OriginalName("FAN_IN")] FanIn = 0,
        [pbr::OriginalName("FAN_OUT")] FanOut = 1,
        [pbr::OriginalName("AVERAGE")] Average = 2,
      }

    }
    #endregion

  }

  public sealed partial class NetParameter : pb::IMessage<NetParameter> {
    private static readonly pb::MessageParser<NetParameter> _parser = new pb::MessageParser<NetParameter>(() => new NetParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetParameter(NetParameter other) : this() {
      name_ = other.name_;
      input_ = other.input_.Clone();
      inputShape_ = other.inputShape_.Clone();
      inputDim_ = other.inputDim_.Clone();
      forceBackward_ = other.forceBackward_;
      state_ = other.state_ != null ? other.state_.Clone() : null;
      debugInfo_ = other.debugInfo_;
      layer_ = other.layer_.Clone();
      layers_ = other.layers_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetParameter Clone() {
      return new NetParameter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// consider giving the network a name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "input" field.</summary>
    public const int InputFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_input_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> input_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// DEPRECATED. See InputParameter. The input blobs to the network.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Input {
      get { return input_; }
    }

    /// <summary>Field number for the "input_shape" field.</summary>
    public const int InputShapeFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Caffe.BlobShape> _repeated_inputShape_codec
        = pb::FieldCodec.ForMessage(66, global::Caffe.BlobShape.Parser);
    private readonly pbc::RepeatedField<global::Caffe.BlobShape> inputShape_ = new pbc::RepeatedField<global::Caffe.BlobShape>();
    /// <summary>
    /// DEPRECATED. See InputParameter. The shape of the input blobs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.BlobShape> InputShape {
      get { return inputShape_; }
    }

    /// <summary>Field number for the "input_dim" field.</summary>
    public const int InputDimFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_inputDim_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> inputDim_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// 4D input dimensions -- deprecated.  Use "input_shape" instead.
    /// If specified, for each input blob there should be four
    /// values specifying the num, channels, height and width of the input blob.
    /// Thus, there should be a total of (4 * #input) numbers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> InputDim {
      get { return inputDim_; }
    }

    /// <summary>Field number for the "force_backward" field.</summary>
    public const int ForceBackwardFieldNumber = 5;
    private bool forceBackward_;
    /// <summary>
    /// Whether the network will force every layer to carry out backward operation.
    /// If set False, then whether to carry out backward is determined
    /// automatically according to the net structure and learning rates.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceBackward {
      get { return forceBackward_; }
      set {
        forceBackward_ = value;
      }
    }

    /// <summary>Field number for the "state" field.</summary>
    public const int StateFieldNumber = 6;
    private global::Caffe.NetState state_;
    /// <summary>
    /// The current "state" of the network, including the phase, level, and stage.
    /// Some layers may be included/excluded depending on this state and the states
    /// specified in the layers' include and exclude fields.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.NetState State {
      get { return state_; }
      set {
        state_ = value;
      }
    }

    /// <summary>Field number for the "debug_info" field.</summary>
    public const int DebugInfoFieldNumber = 7;
    private bool debugInfo_;
    /// <summary>
    /// Print debugging information about results while running Net::Forward,
    /// Net::Backward, and Net::Update.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DebugInfo {
      get { return debugInfo_; }
      set {
        debugInfo_ = value;
      }
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 100;
    private static readonly pb::FieldCodec<global::Caffe.LayerParameter> _repeated_layer_codec
        = pb::FieldCodec.ForMessage(802, global::Caffe.LayerParameter.Parser);
    private readonly pbc::RepeatedField<global::Caffe.LayerParameter> layer_ = new pbc::RepeatedField<global::Caffe.LayerParameter>();
    /// <summary>
    /// The layers that make up the net.  Each of their configurations, including
    /// connectivity and behavior, is specified as a LayerParameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.LayerParameter> Layer {
      get { return layer_; }
    }

    /// <summary>Field number for the "layers" field.</summary>
    public const int LayersFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Caffe.V1LayerParameter> _repeated_layers_codec
        = pb::FieldCodec.ForMessage(18, global::Caffe.V1LayerParameter.Parser);
    private readonly pbc::RepeatedField<global::Caffe.V1LayerParameter> layers_ = new pbc::RepeatedField<global::Caffe.V1LayerParameter>();
    /// <summary>
    /// DEPRECATED: use 'layer' instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.V1LayerParameter> Layers {
      get { return layers_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!input_.Equals(other.input_)) return false;
      if(!inputShape_.Equals(other.inputShape_)) return false;
      if(!inputDim_.Equals(other.inputDim_)) return false;
      if (ForceBackward != other.ForceBackward) return false;
      if (!object.Equals(State, other.State)) return false;
      if (DebugInfo != other.DebugInfo) return false;
      if(!layer_.Equals(other.layer_)) return false;
      if(!layers_.Equals(other.layers_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= input_.GetHashCode();
      hash ^= inputShape_.GetHashCode();
      hash ^= inputDim_.GetHashCode();
      if (ForceBackward != false) hash ^= ForceBackward.GetHashCode();
      if (state_ != null) hash ^= State.GetHashCode();
      if (DebugInfo != false) hash ^= DebugInfo.GetHashCode();
      hash ^= layer_.GetHashCode();
      hash ^= layers_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      layers_.WriteTo(output, _repeated_layers_codec);
      input_.WriteTo(output, _repeated_input_codec);
      inputDim_.WriteTo(output, _repeated_inputDim_codec);
      if (ForceBackward != false) {
        output.WriteRawTag(40);
        output.WriteBool(ForceBackward);
      }
      if (state_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(State);
      }
      if (DebugInfo != false) {
        output.WriteRawTag(56);
        output.WriteBool(DebugInfo);
      }
      inputShape_.WriteTo(output, _repeated_inputShape_codec);
      layer_.WriteTo(output, _repeated_layer_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += input_.CalculateSize(_repeated_input_codec);
      size += inputShape_.CalculateSize(_repeated_inputShape_codec);
      size += inputDim_.CalculateSize(_repeated_inputDim_codec);
      if (ForceBackward != false) {
        size += 1 + 1;
      }
      if (state_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
      }
      if (DebugInfo != false) {
        size += 1 + 1;
      }
      size += layer_.CalculateSize(_repeated_layer_codec);
      size += layers_.CalculateSize(_repeated_layers_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetParameter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      input_.Add(other.input_);
      inputShape_.Add(other.inputShape_);
      inputDim_.Add(other.inputDim_);
      if (other.ForceBackward != false) {
        ForceBackward = other.ForceBackward;
      }
      if (other.state_ != null) {
        if (state_ == null) {
          state_ = new global::Caffe.NetState();
        }
        State.MergeFrom(other.State);
      }
      if (other.DebugInfo != false) {
        DebugInfo = other.DebugInfo;
      }
      layer_.Add(other.layer_);
      layers_.Add(other.layers_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            layers_.AddEntriesFrom(input, _repeated_layers_codec);
            break;
          }
          case 26: {
            input_.AddEntriesFrom(input, _repeated_input_codec);
            break;
          }
          case 34:
          case 32: {
            inputDim_.AddEntriesFrom(input, _repeated_inputDim_codec);
            break;
          }
          case 40: {
            ForceBackward = input.ReadBool();
            break;
          }
          case 50: {
            if (state_ == null) {
              state_ = new global::Caffe.NetState();
            }
            input.ReadMessage(state_);
            break;
          }
          case 56: {
            DebugInfo = input.ReadBool();
            break;
          }
          case 66: {
            inputShape_.AddEntriesFrom(input, _repeated_inputShape_codec);
            break;
          }
          case 802: {
            layer_.AddEntriesFrom(input, _repeated_layer_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// NOTE
  /// Update the next available ID when you add a new SolverParameter field.
  ///
  /// SolverParameter next available ID: 43 (last added: weights)
  /// </summary>
  public sealed partial class SolverParameter : pb::IMessage<SolverParameter> {
    private static readonly pb::MessageParser<SolverParameter> _parser = new pb::MessageParser<SolverParameter>(() => new SolverParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolverParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolverParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolverParameter(SolverParameter other) : this() {
      net_ = other.net_;
      netParam_ = other.netParam_ != null ? other.netParam_.Clone() : null;
      trainNet_ = other.trainNet_;
      testNet_ = other.testNet_.Clone();
      trainNetParam_ = other.trainNetParam_ != null ? other.trainNetParam_.Clone() : null;
      testNetParam_ = other.testNetParam_.Clone();
      trainState_ = other.trainState_ != null ? other.trainState_.Clone() : null;
      testState_ = other.testState_.Clone();
      testIter_ = other.testIter_.Clone();
      testInterval_ = other.testInterval_;
      testComputeLoss_ = other.testComputeLoss_;
      testInitialization_ = other.testInitialization_;
      baseLr_ = other.baseLr_;
      display_ = other.display_;
      averageLoss_ = other.averageLoss_;
      maxIter_ = other.maxIter_;
      iterSize_ = other.iterSize_;
      lrPolicy_ = other.lrPolicy_;
      gamma_ = other.gamma_;
      power_ = other.power_;
      momentum_ = other.momentum_;
      weightDecay_ = other.weightDecay_;
      regularizationType_ = other.regularizationType_;
      stepsize_ = other.stepsize_;
      stepvalue_ = other.stepvalue_.Clone();
      clipGradients_ = other.clipGradients_;
      snapshot_ = other.snapshot_;
      snapshotPrefix_ = other.snapshotPrefix_;
      snapshotDiff_ = other.snapshotDiff_;
      snapshotFormat_ = other.snapshotFormat_;
      solverMode_ = other.solverMode_;
      deviceId_ = other.deviceId_;
      randomSeed_ = other.randomSeed_;
      type_ = other.type_;
      delta_ = other.delta_;
      momentum2_ = other.momentum2_;
      rmsDecay_ = other.rmsDecay_;
      debugInfo_ = other.debugInfo_;
      snapshotAfterTrain_ = other.snapshotAfterTrain_;
      solverType_ = other.solverType_;
      layerWiseReduce_ = other.layerWiseReduce_;
      weights_ = other.weights_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolverParameter Clone() {
      return new SolverParameter(this);
    }

    /// <summary>Field number for the "net" field.</summary>
    public const int NetFieldNumber = 24;
    private string net_ = "";
    /// <summary>
    /// Proto filename for the train net, possibly combined with one or more
    /// test nets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Net {
      get { return net_; }
      set {
        net_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "net_param" field.</summary>
    public const int NetParamFieldNumber = 25;
    private global::Caffe.NetParameter netParam_;
    /// <summary>
    /// Inline train net param, possibly combined with one or more test nets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.NetParameter NetParam {
      get { return netParam_; }
      set {
        netParam_ = value;
      }
    }

    /// <summary>Field number for the "train_net" field.</summary>
    public const int TrainNetFieldNumber = 1;
    private string trainNet_ = "";
    /// <summary>
    /// Proto filename for the train net.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TrainNet {
      get { return trainNet_; }
      set {
        trainNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "test_net" field.</summary>
    public const int TestNetFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_testNet_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> testNet_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Proto filenames for the test nets.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> TestNet {
      get { return testNet_; }
    }

    /// <summary>Field number for the "train_net_param" field.</summary>
    public const int TrainNetParamFieldNumber = 21;
    private global::Caffe.NetParameter trainNetParam_;
    /// <summary>
    /// Inline train net params.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.NetParameter TrainNetParam {
      get { return trainNetParam_; }
      set {
        trainNetParam_ = value;
      }
    }

    /// <summary>Field number for the "test_net_param" field.</summary>
    public const int TestNetParamFieldNumber = 22;
    private static readonly pb::FieldCodec<global::Caffe.NetParameter> _repeated_testNetParam_codec
        = pb::FieldCodec.ForMessage(178, global::Caffe.NetParameter.Parser);
    private readonly pbc::RepeatedField<global::Caffe.NetParameter> testNetParam_ = new pbc::RepeatedField<global::Caffe.NetParameter>();
    /// <summary>
    /// Inline test net params.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.NetParameter> TestNetParam {
      get { return testNetParam_; }
    }

    /// <summary>Field number for the "train_state" field.</summary>
    public const int TrainStateFieldNumber = 26;
    private global::Caffe.NetState trainState_;
    /// <summary>
    /// The states for the train/test nets. Must be unspecified or
    /// specified once per net.
    ///
    /// By default, train_state will have phase = TRAIN,
    /// and all test_state's will have phase = TEST.
    /// Other defaults are set according to the NetState defaults.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.NetState TrainState {
      get { return trainState_; }
      set {
        trainState_ = value;
      }
    }

    /// <summary>Field number for the "test_state" field.</summary>
    public const int TestStateFieldNumber = 27;
    private static readonly pb::FieldCodec<global::Caffe.NetState> _repeated_testState_codec
        = pb::FieldCodec.ForMessage(218, global::Caffe.NetState.Parser);
    private readonly pbc::RepeatedField<global::Caffe.NetState> testState_ = new pbc::RepeatedField<global::Caffe.NetState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.NetState> TestState {
      get { return testState_; }
    }

    /// <summary>Field number for the "test_iter" field.</summary>
    public const int TestIterFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_testIter_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> testIter_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// The number of iterations for each test net.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TestIter {
      get { return testIter_; }
    }

    /// <summary>Field number for the "test_interval" field.</summary>
    public const int TestIntervalFieldNumber = 4;
    private int testInterval_;
    /// <summary>
    /// The number of iterations between two testing phases.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TestInterval {
      get { return testInterval_; }
      set {
        testInterval_ = value;
      }
    }

    /// <summary>Field number for the "test_compute_loss" field.</summary>
    public const int TestComputeLossFieldNumber = 19;
    private bool testComputeLoss_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TestComputeLoss {
      get { return testComputeLoss_; }
      set {
        testComputeLoss_ = value;
      }
    }

    /// <summary>Field number for the "test_initialization" field.</summary>
    public const int TestInitializationFieldNumber = 32;
    private bool testInitialization_;
    /// <summary>
    /// If true, run an initial test pass before the first iteration,
    /// ensuring memory availability and printing the starting value of the loss.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TestInitialization {
      get { return testInitialization_; }
      set {
        testInitialization_ = value;
      }
    }

    /// <summary>Field number for the "base_lr" field.</summary>
    public const int BaseLrFieldNumber = 5;
    private float baseLr_;
    /// <summary>
    /// The base learning rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseLr {
      get { return baseLr_; }
      set {
        baseLr_ = value;
      }
    }

    /// <summary>Field number for the "display" field.</summary>
    public const int DisplayFieldNumber = 6;
    private int display_;
    /// <summary>
    /// the number of iterations between displaying info. If display = 0, no info
    /// will be displayed.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Display {
      get { return display_; }
      set {
        display_ = value;
      }
    }

    /// <summary>Field number for the "average_loss" field.</summary>
    public const int AverageLossFieldNumber = 33;
    private int averageLoss_;
    /// <summary>
    /// Display the loss averaged over the last average_loss iterations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AverageLoss {
      get { return averageLoss_; }
      set {
        averageLoss_ = value;
      }
    }

    /// <summary>Field number for the "max_iter" field.</summary>
    public const int MaxIterFieldNumber = 7;
    private int maxIter_;
    /// <summary>
    /// the maximum number of iterations
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxIter {
      get { return maxIter_; }
      set {
        maxIter_ = value;
      }
    }

    /// <summary>Field number for the "iter_size" field.</summary>
    public const int IterSizeFieldNumber = 36;
    private int iterSize_;
    /// <summary>
    /// accumulate gradients over `iter_size` x `batch_size` instances
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IterSize {
      get { return iterSize_; }
      set {
        iterSize_ = value;
      }
    }

    /// <summary>Field number for the "lr_policy" field.</summary>
    public const int LrPolicyFieldNumber = 8;
    private string lrPolicy_ = "";
    /// <summary>
    /// The learning rate decay policy. The currently implemented learning rate
    /// policies are as follows:
    ///    - fixed: always return base_lr.
    ///    - step: return base_lr * gamma ^ (floor(iter / step))
    ///    - exp: return base_lr * gamma ^ iter
    ///    - inv: return base_lr * (1 + gamma * iter) ^ (- power)
    ///    - multistep: similar to step but it allows non uniform steps defined by
    ///      stepvalue
    ///    - poly: the effective learning rate follows a polynomial decay, to be
    ///      zero by the max_iter. return base_lr (1 - iter/max_iter) ^ (power)
    ///    - sigmoid: the effective learning rate follows a sigmod decay
    ///      return base_lr ( 1/(1 + exp(-gamma * (iter - stepsize))))
    ///
    /// where base_lr, max_iter, gamma, step, stepvalue and power are defined
    /// in the solver parameter protocol buffer, and iter is the current iteration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LrPolicy {
      get { return lrPolicy_; }
      set {
        lrPolicy_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 9;
    private float gamma_;
    /// <summary>
    /// The parameter to compute the learning rate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 10;
    private float power_;
    /// <summary>
    /// The parameter to compute the learning rate.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "momentum" field.</summary>
    public const int MomentumFieldNumber = 11;
    private float momentum_;
    /// <summary>
    /// The momentum value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Momentum {
      get { return momentum_; }
      set {
        momentum_ = value;
      }
    }

    /// <summary>Field number for the "weight_decay" field.</summary>
    public const int WeightDecayFieldNumber = 12;
    private float weightDecay_;
    /// <summary>
    /// The weight decay.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeightDecay {
      get { return weightDecay_; }
      set {
        weightDecay_ = value;
      }
    }

    /// <summary>Field number for the "regularization_type" field.</summary>
    public const int RegularizationTypeFieldNumber = 29;
    private string regularizationType_ = "";
    /// <summary>
    /// regularization types supported: L1 and L2
    /// controlled by weight_decay
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RegularizationType {
      get { return regularizationType_; }
      set {
        regularizationType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "stepsize" field.</summary>
    public const int StepsizeFieldNumber = 13;
    private int stepsize_;
    /// <summary>
    /// the stepsize for learning rate policy "step"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stepsize {
      get { return stepsize_; }
      set {
        stepsize_ = value;
      }
    }

    /// <summary>Field number for the "stepvalue" field.</summary>
    public const int StepvalueFieldNumber = 34;
    private static readonly pb::FieldCodec<int> _repeated_stepvalue_codec
        = pb::FieldCodec.ForInt32(274);
    private readonly pbc::RepeatedField<int> stepvalue_ = new pbc::RepeatedField<int>();
    /// <summary>
    /// the stepsize for learning rate policy "multistep"
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Stepvalue {
      get { return stepvalue_; }
    }

    /// <summary>Field number for the "clip_gradients" field.</summary>
    public const int ClipGradientsFieldNumber = 35;
    private float clipGradients_;
    /// <summary>
    /// Set clip_gradients to >= 0 to clip parameter gradients to that L2 norm,
    /// whenever their actual L2 norm is larger.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ClipGradients {
      get { return clipGradients_; }
      set {
        clipGradients_ = value;
      }
    }

    /// <summary>Field number for the "snapshot" field.</summary>
    public const int SnapshotFieldNumber = 14;
    private int snapshot_;
    /// <summary>
    /// The snapshot interval
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Snapshot {
      get { return snapshot_; }
      set {
        snapshot_ = value;
      }
    }

    /// <summary>Field number for the "snapshot_prefix" field.</summary>
    public const int SnapshotPrefixFieldNumber = 15;
    private string snapshotPrefix_ = "";
    /// <summary>
    /// The prefix for the snapshot.
    /// If not set then is replaced by prototxt file path without extention.
    /// If is set to directory then is augmented by prototxt file name
    /// without extention.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SnapshotPrefix {
      get { return snapshotPrefix_; }
      set {
        snapshotPrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "snapshot_diff" field.</summary>
    public const int SnapshotDiffFieldNumber = 16;
    private bool snapshotDiff_;
    /// <summary>
    /// whether to snapshot diff in the results or not. Snapshotting diff will help
    /// debugging but the final protocol buffer size will be much larger.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SnapshotDiff {
      get { return snapshotDiff_; }
      set {
        snapshotDiff_ = value;
      }
    }

    /// <summary>Field number for the "snapshot_format" field.</summary>
    public const int SnapshotFormatFieldNumber = 37;
    private global::Caffe.SolverParameter.Types.SnapshotFormat snapshotFormat_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SolverParameter.Types.SnapshotFormat SnapshotFormat {
      get { return snapshotFormat_; }
      set {
        snapshotFormat_ = value;
      }
    }

    /// <summary>Field number for the "solver_mode" field.</summary>
    public const int SolverModeFieldNumber = 17;
    private global::Caffe.SolverParameter.Types.SolverMode solverMode_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SolverParameter.Types.SolverMode SolverMode {
      get { return solverMode_; }
      set {
        solverMode_ = value;
      }
    }

    /// <summary>Field number for the "device_id" field.</summary>
    public const int DeviceIdFieldNumber = 18;
    private int deviceId_;
    /// <summary>
    /// the device_id will that be used in GPU mode. Use device_id = 0 in default.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = value;
      }
    }

    /// <summary>Field number for the "random_seed" field.</summary>
    public const int RandomSeedFieldNumber = 20;
    private long randomSeed_;
    /// <summary>
    /// If non-negative, the seed with which the Solver will initialize the Caffe
    /// random number generator -- useful for reproducible results. Otherwise,
    /// (and by default) initialize using a seed derived from the system clock.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long RandomSeed {
      get { return randomSeed_; }
      set {
        randomSeed_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 40;
    private string type_ = "";
    /// <summary>
    /// type of the solver
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "delta" field.</summary>
    public const int DeltaFieldNumber = 31;
    private float delta_;
    /// <summary>
    /// numerical stability for RMSProp, AdaGrad and AdaDelta and Adam
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Delta {
      get { return delta_; }
      set {
        delta_ = value;
      }
    }

    /// <summary>Field number for the "momentum2" field.</summary>
    public const int Momentum2FieldNumber = 39;
    private float momentum2_;
    /// <summary>
    /// parameters for the Adam solver
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Momentum2 {
      get { return momentum2_; }
      set {
        momentum2_ = value;
      }
    }

    /// <summary>Field number for the "rms_decay" field.</summary>
    public const int RmsDecayFieldNumber = 38;
    private float rmsDecay_;
    /// <summary>
    /// RMSProp decay value
    /// MeanSquare(t) = rms_decay*MeanSquare(t-1) + (1-rms_decay)*SquareGradient(t)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RmsDecay {
      get { return rmsDecay_; }
      set {
        rmsDecay_ = value;
      }
    }

    /// <summary>Field number for the "debug_info" field.</summary>
    public const int DebugInfoFieldNumber = 23;
    private bool debugInfo_;
    /// <summary>
    /// If true, print information about the state of the net that may help with
    /// debugging learning problems.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DebugInfo {
      get { return debugInfo_; }
      set {
        debugInfo_ = value;
      }
    }

    /// <summary>Field number for the "snapshot_after_train" field.</summary>
    public const int SnapshotAfterTrainFieldNumber = 28;
    private bool snapshotAfterTrain_;
    /// <summary>
    /// If false, don't save a snapshot after training finishes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SnapshotAfterTrain {
      get { return snapshotAfterTrain_; }
      set {
        snapshotAfterTrain_ = value;
      }
    }

    /// <summary>Field number for the "solver_type" field.</summary>
    public const int SolverTypeFieldNumber = 30;
    private global::Caffe.SolverParameter.Types.SolverType solverType_ = 0;
    /// <summary>
    /// DEPRECATED: use type instead of solver_type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SolverParameter.Types.SolverType SolverType {
      get { return solverType_; }
      set {
        solverType_ = value;
      }
    }

    /// <summary>Field number for the "layer_wise_reduce" field.</summary>
    public const int LayerWiseReduceFieldNumber = 41;
    private bool layerWiseReduce_;
    /// <summary>
    /// Overlap compute and communication for data parallel training
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LayerWiseReduce {
      get { return layerWiseReduce_; }
      set {
        layerWiseReduce_ = value;
      }
    }

    /// <summary>Field number for the "weights" field.</summary>
    public const int WeightsFieldNumber = 42;
    private static readonly pb::FieldCodec<string> _repeated_weights_codec
        = pb::FieldCodec.ForString(338);
    private readonly pbc::RepeatedField<string> weights_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Path to caffemodel file(s) with pretrained weights to initialize finetuning.
    /// Tha same as command line --weights parameter for caffe train command.
    /// If command line --weights parameter if specified, it has higher priority
    /// and owerwrites this one(s).
    /// If --snapshot command line parameter is specified, this one(s) are ignored.
    /// If several model files are expected, they can be listed in a one
    /// weights parameter separated by ',' (like in a command string) or
    /// in repeated weights parameters separately.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Weights {
      get { return weights_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolverParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolverParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Net != other.Net) return false;
      if (!object.Equals(NetParam, other.NetParam)) return false;
      if (TrainNet != other.TrainNet) return false;
      if(!testNet_.Equals(other.testNet_)) return false;
      if (!object.Equals(TrainNetParam, other.TrainNetParam)) return false;
      if(!testNetParam_.Equals(other.testNetParam_)) return false;
      if (!object.Equals(TrainState, other.TrainState)) return false;
      if(!testState_.Equals(other.testState_)) return false;
      if(!testIter_.Equals(other.testIter_)) return false;
      if (TestInterval != other.TestInterval) return false;
      if (TestComputeLoss != other.TestComputeLoss) return false;
      if (TestInitialization != other.TestInitialization) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BaseLr, other.BaseLr)) return false;
      if (Display != other.Display) return false;
      if (AverageLoss != other.AverageLoss) return false;
      if (MaxIter != other.MaxIter) return false;
      if (IterSize != other.IterSize) return false;
      if (LrPolicy != other.LrPolicy) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gamma, other.Gamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Power, other.Power)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Momentum, other.Momentum)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(WeightDecay, other.WeightDecay)) return false;
      if (RegularizationType != other.RegularizationType) return false;
      if (Stepsize != other.Stepsize) return false;
      if(!stepvalue_.Equals(other.stepvalue_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ClipGradients, other.ClipGradients)) return false;
      if (Snapshot != other.Snapshot) return false;
      if (SnapshotPrefix != other.SnapshotPrefix) return false;
      if (SnapshotDiff != other.SnapshotDiff) return false;
      if (SnapshotFormat != other.SnapshotFormat) return false;
      if (SolverMode != other.SolverMode) return false;
      if (DeviceId != other.DeviceId) return false;
      if (RandomSeed != other.RandomSeed) return false;
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Delta, other.Delta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Momentum2, other.Momentum2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RmsDecay, other.RmsDecay)) return false;
      if (DebugInfo != other.DebugInfo) return false;
      if (SnapshotAfterTrain != other.SnapshotAfterTrain) return false;
      if (SolverType != other.SolverType) return false;
      if (LayerWiseReduce != other.LayerWiseReduce) return false;
      if(!weights_.Equals(other.weights_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Net.Length != 0) hash ^= Net.GetHashCode();
      if (netParam_ != null) hash ^= NetParam.GetHashCode();
      if (TrainNet.Length != 0) hash ^= TrainNet.GetHashCode();
      hash ^= testNet_.GetHashCode();
      if (trainNetParam_ != null) hash ^= TrainNetParam.GetHashCode();
      hash ^= testNetParam_.GetHashCode();
      if (trainState_ != null) hash ^= TrainState.GetHashCode();
      hash ^= testState_.GetHashCode();
      hash ^= testIter_.GetHashCode();
      if (TestInterval != 0) hash ^= TestInterval.GetHashCode();
      if (TestComputeLoss != false) hash ^= TestComputeLoss.GetHashCode();
      if (TestInitialization != false) hash ^= TestInitialization.GetHashCode();
      if (BaseLr != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BaseLr);
      if (Display != 0) hash ^= Display.GetHashCode();
      if (AverageLoss != 0) hash ^= AverageLoss.GetHashCode();
      if (MaxIter != 0) hash ^= MaxIter.GetHashCode();
      if (IterSize != 0) hash ^= IterSize.GetHashCode();
      if (LrPolicy.Length != 0) hash ^= LrPolicy.GetHashCode();
      if (Gamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gamma);
      if (Power != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Power);
      if (Momentum != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Momentum);
      if (WeightDecay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(WeightDecay);
      if (RegularizationType.Length != 0) hash ^= RegularizationType.GetHashCode();
      if (Stepsize != 0) hash ^= Stepsize.GetHashCode();
      hash ^= stepvalue_.GetHashCode();
      if (ClipGradients != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ClipGradients);
      if (Snapshot != 0) hash ^= Snapshot.GetHashCode();
      if (SnapshotPrefix.Length != 0) hash ^= SnapshotPrefix.GetHashCode();
      if (SnapshotDiff != false) hash ^= SnapshotDiff.GetHashCode();
      if (SnapshotFormat != 0) hash ^= SnapshotFormat.GetHashCode();
      if (SolverMode != 0) hash ^= SolverMode.GetHashCode();
      if (DeviceId != 0) hash ^= DeviceId.GetHashCode();
      if (RandomSeed != 0L) hash ^= RandomSeed.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (Delta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Delta);
      if (Momentum2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Momentum2);
      if (RmsDecay != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RmsDecay);
      if (DebugInfo != false) hash ^= DebugInfo.GetHashCode();
      if (SnapshotAfterTrain != false) hash ^= SnapshotAfterTrain.GetHashCode();
      if (SolverType != 0) hash ^= SolverType.GetHashCode();
      if (LayerWiseReduce != false) hash ^= LayerWiseReduce.GetHashCode();
      hash ^= weights_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TrainNet.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TrainNet);
      }
      testNet_.WriteTo(output, _repeated_testNet_codec);
      testIter_.WriteTo(output, _repeated_testIter_codec);
      if (TestInterval != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TestInterval);
      }
      if (BaseLr != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BaseLr);
      }
      if (Display != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Display);
      }
      if (MaxIter != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(MaxIter);
      }
      if (LrPolicy.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(LrPolicy);
      }
      if (Gamma != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Gamma);
      }
      if (Power != 0F) {
        output.WriteRawTag(85);
        output.WriteFloat(Power);
      }
      if (Momentum != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(Momentum);
      }
      if (WeightDecay != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(WeightDecay);
      }
      if (Stepsize != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Stepsize);
      }
      if (Snapshot != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Snapshot);
      }
      if (SnapshotPrefix.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(SnapshotPrefix);
      }
      if (SnapshotDiff != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(SnapshotDiff);
      }
      if (SolverMode != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) SolverMode);
      }
      if (DeviceId != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(DeviceId);
      }
      if (TestComputeLoss != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(TestComputeLoss);
      }
      if (RandomSeed != 0L) {
        output.WriteRawTag(160, 1);
        output.WriteInt64(RandomSeed);
      }
      if (trainNetParam_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(TrainNetParam);
      }
      testNetParam_.WriteTo(output, _repeated_testNetParam_codec);
      if (DebugInfo != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(DebugInfo);
      }
      if (Net.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(Net);
      }
      if (netParam_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(NetParam);
      }
      if (trainState_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(TrainState);
      }
      testState_.WriteTo(output, _repeated_testState_codec);
      if (SnapshotAfterTrain != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(SnapshotAfterTrain);
      }
      if (RegularizationType.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(RegularizationType);
      }
      if (SolverType != 0) {
        output.WriteRawTag(240, 1);
        output.WriteEnum((int) SolverType);
      }
      if (Delta != 0F) {
        output.WriteRawTag(253, 1);
        output.WriteFloat(Delta);
      }
      if (TestInitialization != false) {
        output.WriteRawTag(128, 2);
        output.WriteBool(TestInitialization);
      }
      if (AverageLoss != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(AverageLoss);
      }
      stepvalue_.WriteTo(output, _repeated_stepvalue_codec);
      if (ClipGradients != 0F) {
        output.WriteRawTag(157, 2);
        output.WriteFloat(ClipGradients);
      }
      if (IterSize != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(IterSize);
      }
      if (SnapshotFormat != 0) {
        output.WriteRawTag(168, 2);
        output.WriteEnum((int) SnapshotFormat);
      }
      if (RmsDecay != 0F) {
        output.WriteRawTag(181, 2);
        output.WriteFloat(RmsDecay);
      }
      if (Momentum2 != 0F) {
        output.WriteRawTag(189, 2);
        output.WriteFloat(Momentum2);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(194, 2);
        output.WriteString(Type);
      }
      if (LayerWiseReduce != false) {
        output.WriteRawTag(200, 2);
        output.WriteBool(LayerWiseReduce);
      }
      weights_.WriteTo(output, _repeated_weights_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Net.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Net);
      }
      if (netParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NetParam);
      }
      if (TrainNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TrainNet);
      }
      size += testNet_.CalculateSize(_repeated_testNet_codec);
      if (trainNetParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrainNetParam);
      }
      size += testNetParam_.CalculateSize(_repeated_testNetParam_codec);
      if (trainState_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TrainState);
      }
      size += testState_.CalculateSize(_repeated_testState_codec);
      size += testIter_.CalculateSize(_repeated_testIter_codec);
      if (TestInterval != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TestInterval);
      }
      if (TestComputeLoss != false) {
        size += 2 + 1;
      }
      if (TestInitialization != false) {
        size += 2 + 1;
      }
      if (BaseLr != 0F) {
        size += 1 + 4;
      }
      if (Display != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Display);
      }
      if (AverageLoss != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AverageLoss);
      }
      if (MaxIter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxIter);
      }
      if (IterSize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IterSize);
      }
      if (LrPolicy.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LrPolicy);
      }
      if (Gamma != 0F) {
        size += 1 + 4;
      }
      if (Power != 0F) {
        size += 1 + 4;
      }
      if (Momentum != 0F) {
        size += 1 + 4;
      }
      if (WeightDecay != 0F) {
        size += 1 + 4;
      }
      if (RegularizationType.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(RegularizationType);
      }
      if (Stepsize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stepsize);
      }
      size += stepvalue_.CalculateSize(_repeated_stepvalue_codec);
      if (ClipGradients != 0F) {
        size += 2 + 4;
      }
      if (Snapshot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Snapshot);
      }
      if (SnapshotPrefix.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SnapshotPrefix);
      }
      if (SnapshotDiff != false) {
        size += 2 + 1;
      }
      if (SnapshotFormat != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SnapshotFormat);
      }
      if (SolverMode != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SolverMode);
      }
      if (DeviceId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeviceId);
      }
      if (RandomSeed != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(RandomSeed);
      }
      if (Type.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (Delta != 0F) {
        size += 2 + 4;
      }
      if (Momentum2 != 0F) {
        size += 2 + 4;
      }
      if (RmsDecay != 0F) {
        size += 2 + 4;
      }
      if (DebugInfo != false) {
        size += 2 + 1;
      }
      if (SnapshotAfterTrain != false) {
        size += 2 + 1;
      }
      if (SolverType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) SolverType);
      }
      if (LayerWiseReduce != false) {
        size += 2 + 1;
      }
      size += weights_.CalculateSize(_repeated_weights_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolverParameter other) {
      if (other == null) {
        return;
      }
      if (other.Net.Length != 0) {
        Net = other.Net;
      }
      if (other.netParam_ != null) {
        if (netParam_ == null) {
          netParam_ = new global::Caffe.NetParameter();
        }
        NetParam.MergeFrom(other.NetParam);
      }
      if (other.TrainNet.Length != 0) {
        TrainNet = other.TrainNet;
      }
      testNet_.Add(other.testNet_);
      if (other.trainNetParam_ != null) {
        if (trainNetParam_ == null) {
          trainNetParam_ = new global::Caffe.NetParameter();
        }
        TrainNetParam.MergeFrom(other.TrainNetParam);
      }
      testNetParam_.Add(other.testNetParam_);
      if (other.trainState_ != null) {
        if (trainState_ == null) {
          trainState_ = new global::Caffe.NetState();
        }
        TrainState.MergeFrom(other.TrainState);
      }
      testState_.Add(other.testState_);
      testIter_.Add(other.testIter_);
      if (other.TestInterval != 0) {
        TestInterval = other.TestInterval;
      }
      if (other.TestComputeLoss != false) {
        TestComputeLoss = other.TestComputeLoss;
      }
      if (other.TestInitialization != false) {
        TestInitialization = other.TestInitialization;
      }
      if (other.BaseLr != 0F) {
        BaseLr = other.BaseLr;
      }
      if (other.Display != 0) {
        Display = other.Display;
      }
      if (other.AverageLoss != 0) {
        AverageLoss = other.AverageLoss;
      }
      if (other.MaxIter != 0) {
        MaxIter = other.MaxIter;
      }
      if (other.IterSize != 0) {
        IterSize = other.IterSize;
      }
      if (other.LrPolicy.Length != 0) {
        LrPolicy = other.LrPolicy;
      }
      if (other.Gamma != 0F) {
        Gamma = other.Gamma;
      }
      if (other.Power != 0F) {
        Power = other.Power;
      }
      if (other.Momentum != 0F) {
        Momentum = other.Momentum;
      }
      if (other.WeightDecay != 0F) {
        WeightDecay = other.WeightDecay;
      }
      if (other.RegularizationType.Length != 0) {
        RegularizationType = other.RegularizationType;
      }
      if (other.Stepsize != 0) {
        Stepsize = other.Stepsize;
      }
      stepvalue_.Add(other.stepvalue_);
      if (other.ClipGradients != 0F) {
        ClipGradients = other.ClipGradients;
      }
      if (other.Snapshot != 0) {
        Snapshot = other.Snapshot;
      }
      if (other.SnapshotPrefix.Length != 0) {
        SnapshotPrefix = other.SnapshotPrefix;
      }
      if (other.SnapshotDiff != false) {
        SnapshotDiff = other.SnapshotDiff;
      }
      if (other.SnapshotFormat != 0) {
        SnapshotFormat = other.SnapshotFormat;
      }
      if (other.SolverMode != 0) {
        SolverMode = other.SolverMode;
      }
      if (other.DeviceId != 0) {
        DeviceId = other.DeviceId;
      }
      if (other.RandomSeed != 0L) {
        RandomSeed = other.RandomSeed;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.Delta != 0F) {
        Delta = other.Delta;
      }
      if (other.Momentum2 != 0F) {
        Momentum2 = other.Momentum2;
      }
      if (other.RmsDecay != 0F) {
        RmsDecay = other.RmsDecay;
      }
      if (other.DebugInfo != false) {
        DebugInfo = other.DebugInfo;
      }
      if (other.SnapshotAfterTrain != false) {
        SnapshotAfterTrain = other.SnapshotAfterTrain;
      }
      if (other.SolverType != 0) {
        SolverType = other.SolverType;
      }
      if (other.LayerWiseReduce != false) {
        LayerWiseReduce = other.LayerWiseReduce;
      }
      weights_.Add(other.weights_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TrainNet = input.ReadString();
            break;
          }
          case 18: {
            testNet_.AddEntriesFrom(input, _repeated_testNet_codec);
            break;
          }
          case 26:
          case 24: {
            testIter_.AddEntriesFrom(input, _repeated_testIter_codec);
            break;
          }
          case 32: {
            TestInterval = input.ReadInt32();
            break;
          }
          case 45: {
            BaseLr = input.ReadFloat();
            break;
          }
          case 48: {
            Display = input.ReadInt32();
            break;
          }
          case 56: {
            MaxIter = input.ReadInt32();
            break;
          }
          case 66: {
            LrPolicy = input.ReadString();
            break;
          }
          case 77: {
            Gamma = input.ReadFloat();
            break;
          }
          case 85: {
            Power = input.ReadFloat();
            break;
          }
          case 93: {
            Momentum = input.ReadFloat();
            break;
          }
          case 101: {
            WeightDecay = input.ReadFloat();
            break;
          }
          case 104: {
            Stepsize = input.ReadInt32();
            break;
          }
          case 112: {
            Snapshot = input.ReadInt32();
            break;
          }
          case 122: {
            SnapshotPrefix = input.ReadString();
            break;
          }
          case 128: {
            SnapshotDiff = input.ReadBool();
            break;
          }
          case 136: {
            solverMode_ = (global::Caffe.SolverParameter.Types.SolverMode) input.ReadEnum();
            break;
          }
          case 144: {
            DeviceId = input.ReadInt32();
            break;
          }
          case 152: {
            TestComputeLoss = input.ReadBool();
            break;
          }
          case 160: {
            RandomSeed = input.ReadInt64();
            break;
          }
          case 170: {
            if (trainNetParam_ == null) {
              trainNetParam_ = new global::Caffe.NetParameter();
            }
            input.ReadMessage(trainNetParam_);
            break;
          }
          case 178: {
            testNetParam_.AddEntriesFrom(input, _repeated_testNetParam_codec);
            break;
          }
          case 184: {
            DebugInfo = input.ReadBool();
            break;
          }
          case 194: {
            Net = input.ReadString();
            break;
          }
          case 202: {
            if (netParam_ == null) {
              netParam_ = new global::Caffe.NetParameter();
            }
            input.ReadMessage(netParam_);
            break;
          }
          case 210: {
            if (trainState_ == null) {
              trainState_ = new global::Caffe.NetState();
            }
            input.ReadMessage(trainState_);
            break;
          }
          case 218: {
            testState_.AddEntriesFrom(input, _repeated_testState_codec);
            break;
          }
          case 224: {
            SnapshotAfterTrain = input.ReadBool();
            break;
          }
          case 234: {
            RegularizationType = input.ReadString();
            break;
          }
          case 240: {
            solverType_ = (global::Caffe.SolverParameter.Types.SolverType) input.ReadEnum();
            break;
          }
          case 253: {
            Delta = input.ReadFloat();
            break;
          }
          case 256: {
            TestInitialization = input.ReadBool();
            break;
          }
          case 264: {
            AverageLoss = input.ReadInt32();
            break;
          }
          case 274:
          case 272: {
            stepvalue_.AddEntriesFrom(input, _repeated_stepvalue_codec);
            break;
          }
          case 285: {
            ClipGradients = input.ReadFloat();
            break;
          }
          case 288: {
            IterSize = input.ReadInt32();
            break;
          }
          case 296: {
            snapshotFormat_ = (global::Caffe.SolverParameter.Types.SnapshotFormat) input.ReadEnum();
            break;
          }
          case 309: {
            RmsDecay = input.ReadFloat();
            break;
          }
          case 317: {
            Momentum2 = input.ReadFloat();
            break;
          }
          case 322: {
            Type = input.ReadString();
            break;
          }
          case 328: {
            LayerWiseReduce = input.ReadBool();
            break;
          }
          case 338: {
            weights_.AddEntriesFrom(input, _repeated_weights_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SolverParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SnapshotFormat {
        [pbr::OriginalName("HDF5")] Hdf5 = 0,
        [pbr::OriginalName("BINARYPROTO")] Binaryproto = 1,
      }

      /// <summary>
      /// the mode solver will use: 0 for CPU and 1 for GPU. Use GPU in default.
      /// </summary>
      public enum SolverMode {
        [pbr::OriginalName("CPU")] Cpu = 0,
        [pbr::OriginalName("GPU")] Gpu = 1,
      }

      /// <summary>
      /// DEPRECATED: old solver enum types, use string instead
      /// </summary>
      public enum SolverType {
        [pbr::OriginalName("SGD")] Sgd = 0,
        [pbr::OriginalName("NESTEROV")] Nesterov = 1,
        [pbr::OriginalName("ADAGRAD")] Adagrad = 2,
        [pbr::OriginalName("RMSPROP")] Rmsprop = 3,
        [pbr::OriginalName("ADADELTA")] Adadelta = 4,
        [pbr::OriginalName("ADAM")] Adam = 5,
      }

    }
    #endregion

  }

  /// <summary>
  /// A message that stores the solver snapshots
  /// </summary>
  public sealed partial class SolverState : pb::IMessage<SolverState> {
    private static readonly pb::MessageParser<SolverState> _parser = new pb::MessageParser<SolverState>(() => new SolverState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SolverState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolverState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolverState(SolverState other) : this() {
      iter_ = other.iter_;
      learnedNet_ = other.learnedNet_;
      history_ = other.history_.Clone();
      currentStep_ = other.currentStep_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SolverState Clone() {
      return new SolverState(this);
    }

    /// <summary>Field number for the "iter" field.</summary>
    public const int IterFieldNumber = 1;
    private int iter_;
    /// <summary>
    /// The current iteration
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Iter {
      get { return iter_; }
      set {
        iter_ = value;
      }
    }

    /// <summary>Field number for the "learned_net" field.</summary>
    public const int LearnedNetFieldNumber = 2;
    private string learnedNet_ = "";
    /// <summary>
    /// The file that stores the learned net.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LearnedNet {
      get { return learnedNet_; }
      set {
        learnedNet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "history" field.</summary>
    public const int HistoryFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Caffe.BlobProto> _repeated_history_codec
        = pb::FieldCodec.ForMessage(26, global::Caffe.BlobProto.Parser);
    private readonly pbc::RepeatedField<global::Caffe.BlobProto> history_ = new pbc::RepeatedField<global::Caffe.BlobProto>();
    /// <summary>
    /// The history for sgd solvers
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.BlobProto> History {
      get { return history_; }
    }

    /// <summary>Field number for the "current_step" field.</summary>
    public const int CurrentStepFieldNumber = 4;
    private int currentStep_;
    /// <summary>
    /// The current step for learning rate
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CurrentStep {
      get { return currentStep_; }
      set {
        currentStep_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SolverState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SolverState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Iter != other.Iter) return false;
      if (LearnedNet != other.LearnedNet) return false;
      if(!history_.Equals(other.history_)) return false;
      if (CurrentStep != other.CurrentStep) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Iter != 0) hash ^= Iter.GetHashCode();
      if (LearnedNet.Length != 0) hash ^= LearnedNet.GetHashCode();
      hash ^= history_.GetHashCode();
      if (CurrentStep != 0) hash ^= CurrentStep.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Iter != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Iter);
      }
      if (LearnedNet.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LearnedNet);
      }
      history_.WriteTo(output, _repeated_history_codec);
      if (CurrentStep != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(CurrentStep);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Iter != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Iter);
      }
      if (LearnedNet.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LearnedNet);
      }
      size += history_.CalculateSize(_repeated_history_codec);
      if (CurrentStep != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentStep);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SolverState other) {
      if (other == null) {
        return;
      }
      if (other.Iter != 0) {
        Iter = other.Iter;
      }
      if (other.LearnedNet.Length != 0) {
        LearnedNet = other.LearnedNet;
      }
      history_.Add(other.history_);
      if (other.CurrentStep != 0) {
        CurrentStep = other.CurrentStep;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Iter = input.ReadInt32();
            break;
          }
          case 18: {
            LearnedNet = input.ReadString();
            break;
          }
          case 26: {
            history_.AddEntriesFrom(input, _repeated_history_codec);
            break;
          }
          case 32: {
            CurrentStep = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetState : pb::IMessage<NetState> {
    private static readonly pb::MessageParser<NetState> _parser = new pb::MessageParser<NetState>(() => new NetState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetState(NetState other) : this() {
      phase_ = other.phase_;
      level_ = other.level_;
      stage_ = other.stage_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetState Clone() {
      return new NetState(this);
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 1;
    private global::Caffe.Phase phase_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.Phase Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "level" field.</summary>
    public const int LevelFieldNumber = 2;
    private int level_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Level {
      get { return level_; }
      set {
        level_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_stage_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> stage_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Stage {
      get { return stage_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phase != other.Phase) return false;
      if (Level != other.Level) return false;
      if(!stage_.Equals(other.stage_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phase != 0) hash ^= Phase.GetHashCode();
      if (Level != 0) hash ^= Level.GetHashCode();
      hash ^= stage_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phase != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Phase);
      }
      if (Level != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Level);
      }
      stage_.WriteTo(output, _repeated_stage_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phase);
      }
      if (Level != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
      }
      size += stage_.CalculateSize(_repeated_stage_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetState other) {
      if (other == null) {
        return;
      }
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      if (other.Level != 0) {
        Level = other.Level;
      }
      stage_.Add(other.stage_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            phase_ = (global::Caffe.Phase) input.ReadEnum();
            break;
          }
          case 16: {
            Level = input.ReadInt32();
            break;
          }
          case 26: {
            stage_.AddEntriesFrom(input, _repeated_stage_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class NetStateRule : pb::IMessage<NetStateRule> {
    private static readonly pb::MessageParser<NetStateRule> _parser = new pb::MessageParser<NetStateRule>(() => new NetStateRule());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NetStateRule> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetStateRule() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetStateRule(NetStateRule other) : this() {
      phase_ = other.phase_;
      minLevel_ = other.minLevel_;
      maxLevel_ = other.maxLevel_;
      stage_ = other.stage_.Clone();
      notStage_ = other.notStage_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NetStateRule Clone() {
      return new NetStateRule(this);
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 1;
    private global::Caffe.Phase phase_ = 0;
    /// <summary>
    /// Set phase to require the NetState have a particular phase (TRAIN or TEST)
    /// to meet this rule.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.Phase Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "min_level" field.</summary>
    public const int MinLevelFieldNumber = 2;
    private int minLevel_;
    /// <summary>
    /// Set the minimum and/or maximum levels in which the layer should be used.
    /// Leave undefined to meet the rule regardless of level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinLevel {
      get { return minLevel_; }
      set {
        minLevel_ = value;
      }
    }

    /// <summary>Field number for the "max_level" field.</summary>
    public const int MaxLevelFieldNumber = 3;
    private int maxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "stage" field.</summary>
    public const int StageFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_stage_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> stage_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Customizable sets of stages to include or exclude.
    /// The net must have ALL of the specified stages and NONE of the specified
    /// "not_stage"s to meet the rule.
    /// (Use multiple NetStateRules to specify conjunctions of stages.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Stage {
      get { return stage_; }
    }

    /// <summary>Field number for the "not_stage" field.</summary>
    public const int NotStageFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_notStage_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> notStage_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> NotStage {
      get { return notStage_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NetStateRule);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NetStateRule other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Phase != other.Phase) return false;
      if (MinLevel != other.MinLevel) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if(!stage_.Equals(other.stage_)) return false;
      if(!notStage_.Equals(other.notStage_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Phase != 0) hash ^= Phase.GetHashCode();
      if (MinLevel != 0) hash ^= MinLevel.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      hash ^= stage_.GetHashCode();
      hash ^= notStage_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Phase != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Phase);
      }
      if (MinLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MinLevel);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MaxLevel);
      }
      stage_.WriteTo(output, _repeated_stage_codec);
      notStage_.WriteTo(output, _repeated_notStage_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phase);
      }
      if (MinLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinLevel);
      }
      if (MaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLevel);
      }
      size += stage_.CalculateSize(_repeated_stage_codec);
      size += notStage_.CalculateSize(_repeated_notStage_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NetStateRule other) {
      if (other == null) {
        return;
      }
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      if (other.MinLevel != 0) {
        MinLevel = other.MinLevel;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      stage_.Add(other.stage_);
      notStage_.Add(other.notStage_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            phase_ = (global::Caffe.Phase) input.ReadEnum();
            break;
          }
          case 16: {
            MinLevel = input.ReadInt32();
            break;
          }
          case 24: {
            MaxLevel = input.ReadInt32();
            break;
          }
          case 34: {
            stage_.AddEntriesFrom(input, _repeated_stage_codec);
            break;
          }
          case 42: {
            notStage_.AddEntriesFrom(input, _repeated_notStage_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Specifies training parameters (multipliers on global learning constants,
  /// and the name and other settings used for weight sharing).
  /// </summary>
  public sealed partial class ParamSpec : pb::IMessage<ParamSpec> {
    private static readonly pb::MessageParser<ParamSpec> _parser = new pb::MessageParser<ParamSpec>(() => new ParamSpec());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParamSpec> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamSpec() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamSpec(ParamSpec other) : this() {
      name_ = other.name_;
      shareMode_ = other.shareMode_;
      lrMult_ = other.lrMult_;
      decayMult_ = other.decayMult_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParamSpec Clone() {
      return new ParamSpec(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// The names of the parameter blobs -- useful for sharing parameters among
    /// layers, but never required otherwise.  To share a parameter between two
    /// layers, give it a (non-empty) name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "share_mode" field.</summary>
    public const int ShareModeFieldNumber = 2;
    private global::Caffe.ParamSpec.Types.DimCheckMode shareMode_ = 0;
    /// <summary>
    /// Whether to require shared weights to have the same shape, or just the same
    /// count -- defaults to STRICT if unspecified.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ParamSpec.Types.DimCheckMode ShareMode {
      get { return shareMode_; }
      set {
        shareMode_ = value;
      }
    }

    /// <summary>Field number for the "lr_mult" field.</summary>
    public const int LrMultFieldNumber = 3;
    private float lrMult_;
    /// <summary>
    /// The multiplier on the global learning rate for this parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float LrMult {
      get { return lrMult_; }
      set {
        lrMult_ = value;
      }
    }

    /// <summary>Field number for the "decay_mult" field.</summary>
    public const int DecayMultFieldNumber = 4;
    private float decayMult_;
    /// <summary>
    /// The multiplier on the global weight decay for this parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DecayMult {
      get { return decayMult_; }
      set {
        decayMult_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParamSpec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParamSpec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (ShareMode != other.ShareMode) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LrMult, other.LrMult)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DecayMult, other.DecayMult)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (ShareMode != 0) hash ^= ShareMode.GetHashCode();
      if (LrMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LrMult);
      if (DecayMult != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DecayMult);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (ShareMode != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ShareMode);
      }
      if (LrMult != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(LrMult);
      }
      if (DecayMult != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DecayMult);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (ShareMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ShareMode);
      }
      if (LrMult != 0F) {
        size += 1 + 4;
      }
      if (DecayMult != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParamSpec other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.ShareMode != 0) {
        ShareMode = other.ShareMode;
      }
      if (other.LrMult != 0F) {
        LrMult = other.LrMult;
      }
      if (other.DecayMult != 0F) {
        DecayMult = other.DecayMult;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            shareMode_ = (global::Caffe.ParamSpec.Types.DimCheckMode) input.ReadEnum();
            break;
          }
          case 29: {
            LrMult = input.ReadFloat();
            break;
          }
          case 37: {
            DecayMult = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ParamSpec message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DimCheckMode {
        /// <summary>
        /// STRICT (default) requires that num, channels, height, width each match.
        /// </summary>
        [pbr::OriginalName("STRICT")] Strict = 0,
        /// <summary>
        /// PERMISSIVE requires only the count (num*channels*height*width) to match.
        /// </summary>
        [pbr::OriginalName("PERMISSIVE")] Permissive = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// NOTE
  /// Update the next available ID when you add a new LayerParameter field.
  ///
  /// LayerParameter next available layer-specific ID: 154 (last added: swish_param)
  /// </summary>
  public sealed partial class LayerParameter : pb::IMessage<LayerParameter> {
    private static readonly pb::MessageParser<LayerParameter> _parser = new pb::MessageParser<LayerParameter>(() => new LayerParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LayerParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayerParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayerParameter(LayerParameter other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      bottom_ = other.bottom_.Clone();
      top_ = other.top_.Clone();
      phase_ = other.phase_;
      lossWeight_ = other.lossWeight_.Clone();
      param_ = other.param_.Clone();
      blobs_ = other.blobs_.Clone();
      propagateDown_ = other.propagateDown_.Clone();
      include_ = other.include_.Clone();
      exclude_ = other.exclude_.Clone();
      transformParam_ = other.transformParam_ != null ? other.transformParam_.Clone() : null;
      lossParam_ = other.lossParam_ != null ? other.lossParam_.Clone() : null;
      accuracyParam_ = other.accuracyParam_ != null ? other.accuracyParam_.Clone() : null;
      argmaxParam_ = other.argmaxParam_ != null ? other.argmaxParam_.Clone() : null;
      batchNormParam_ = other.batchNormParam_ != null ? other.batchNormParam_.Clone() : null;
      biasParam_ = other.biasParam_ != null ? other.biasParam_.Clone() : null;
      concatParam_ = other.concatParam_ != null ? other.concatParam_.Clone() : null;
      contrastiveLossParam_ = other.contrastiveLossParam_ != null ? other.contrastiveLossParam_.Clone() : null;
      convolutionParam_ = other.convolutionParam_ != null ? other.convolutionParam_.Clone() : null;
      cropParam_ = other.cropParam_ != null ? other.cropParam_.Clone() : null;
      dataParam_ = other.dataParam_ != null ? other.dataParam_.Clone() : null;
      dropoutParam_ = other.dropoutParam_ != null ? other.dropoutParam_.Clone() : null;
      dummyDataParam_ = other.dummyDataParam_ != null ? other.dummyDataParam_.Clone() : null;
      eltwiseParam_ = other.eltwiseParam_ != null ? other.eltwiseParam_.Clone() : null;
      eluParam_ = other.eluParam_ != null ? other.eluParam_.Clone() : null;
      embedParam_ = other.embedParam_ != null ? other.embedParam_.Clone() : null;
      expParam_ = other.expParam_ != null ? other.expParam_.Clone() : null;
      flattenParam_ = other.flattenParam_ != null ? other.flattenParam_.Clone() : null;
      hdf5DataParam_ = other.hdf5DataParam_ != null ? other.hdf5DataParam_.Clone() : null;
      hdf5OutputParam_ = other.hdf5OutputParam_ != null ? other.hdf5OutputParam_.Clone() : null;
      hingeLossParam_ = other.hingeLossParam_ != null ? other.hingeLossParam_.Clone() : null;
      imageDataParam_ = other.imageDataParam_ != null ? other.imageDataParam_.Clone() : null;
      infogainLossParam_ = other.infogainLossParam_ != null ? other.infogainLossParam_.Clone() : null;
      innerProductParam_ = other.innerProductParam_ != null ? other.innerProductParam_.Clone() : null;
      inputParam_ = other.inputParam_ != null ? other.inputParam_.Clone() : null;
      logParam_ = other.logParam_ != null ? other.logParam_.Clone() : null;
      lrnParam_ = other.lrnParam_ != null ? other.lrnParam_.Clone() : null;
      memoryDataParam_ = other.memoryDataParam_ != null ? other.memoryDataParam_.Clone() : null;
      mvnParam_ = other.mvnParam_ != null ? other.mvnParam_.Clone() : null;
      parameterParam_ = other.parameterParam_ != null ? other.parameterParam_.Clone() : null;
      poolingParam_ = other.poolingParam_ != null ? other.poolingParam_.Clone() : null;
      powerParam_ = other.powerParam_ != null ? other.powerParam_.Clone() : null;
      preluParam_ = other.preluParam_ != null ? other.preluParam_.Clone() : null;
      pythonParam_ = other.pythonParam_ != null ? other.pythonParam_.Clone() : null;
      recurrentParam_ = other.recurrentParam_ != null ? other.recurrentParam_.Clone() : null;
      reductionParam_ = other.reductionParam_ != null ? other.reductionParam_.Clone() : null;
      reluParam_ = other.reluParam_ != null ? other.reluParam_.Clone() : null;
      reshapeParam_ = other.reshapeParam_ != null ? other.reshapeParam_.Clone() : null;
      scaleParam_ = other.scaleParam_ != null ? other.scaleParam_.Clone() : null;
      sigmoidParam_ = other.sigmoidParam_ != null ? other.sigmoidParam_.Clone() : null;
      softmaxParam_ = other.softmaxParam_ != null ? other.softmaxParam_.Clone() : null;
      sppParam_ = other.sppParam_ != null ? other.sppParam_.Clone() : null;
      sliceParam_ = other.sliceParam_ != null ? other.sliceParam_.Clone() : null;
      swishParam_ = other.swishParam_ != null ? other.swishParam_.Clone() : null;
      tanhParam_ = other.tanhParam_ != null ? other.tanhParam_.Clone() : null;
      thresholdParam_ = other.thresholdParam_ != null ? other.thresholdParam_.Clone() : null;
      tileParam_ = other.tileParam_ != null ? other.tileParam_.Clone() : null;
      windowDataParam_ = other.windowDataParam_ != null ? other.windowDataParam_.Clone() : null;
      combinedMarginParam_ = other.combinedMarginParam_ != null ? other.combinedMarginParam_.Clone() : null;
      cosinAddMParam_ = other.cosinAddMParam_ != null ? other.cosinAddMParam_.Clone() : null;
      normalizeParam_ = other.normalizeParam_ != null ? other.normalizeParam_.Clone() : null;
      l2NormalizationParam_ = other.l2NormalizationParam_ != null ? other.l2NormalizationParam_.Clone() : null;
      focalLossParam_ = other.focalLossParam_ != null ? other.focalLossParam_.Clone() : null;
      labelSpecificAddParam_ = other.labelSpecificAddParam_ != null ? other.labelSpecificAddParam_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LayerParameter Clone() {
      return new LayerParameter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// the layer name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// the layer type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_bottom_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> bottom_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// the name of each bottom blob
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Bottom {
      get { return bottom_; }
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_top_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> top_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// the name of each top blob
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Top {
      get { return top_; }
    }

    /// <summary>Field number for the "phase" field.</summary>
    public const int PhaseFieldNumber = 10;
    private global::Caffe.Phase phase_ = 0;
    /// <summary>
    /// The train / test phase for computation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.Phase Phase {
      get { return phase_; }
      set {
        phase_ = value;
      }
    }

    /// <summary>Field number for the "loss_weight" field.</summary>
    public const int LossWeightFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_lossWeight_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> lossWeight_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// The amount of weight to assign each top blob in the objective.
    /// Each layer assigns a default value, usually of either 0 or 1,
    /// to each top blob.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LossWeight {
      get { return lossWeight_; }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Caffe.ParamSpec> _repeated_param_codec
        = pb::FieldCodec.ForMessage(50, global::Caffe.ParamSpec.Parser);
    private readonly pbc::RepeatedField<global::Caffe.ParamSpec> param_ = new pbc::RepeatedField<global::Caffe.ParamSpec>();
    /// <summary>
    /// Specifies training parameters (multipliers on global learning constants,
    /// and the name and other settings used for weight sharing).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.ParamSpec> Param {
      get { return param_; }
    }

    /// <summary>Field number for the "blobs" field.</summary>
    public const int BlobsFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Caffe.BlobProto> _repeated_blobs_codec
        = pb::FieldCodec.ForMessage(58, global::Caffe.BlobProto.Parser);
    private readonly pbc::RepeatedField<global::Caffe.BlobProto> blobs_ = new pbc::RepeatedField<global::Caffe.BlobProto>();
    /// <summary>
    /// The blobs containing the numeric parameters of the layer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.BlobProto> Blobs {
      get { return blobs_; }
    }

    /// <summary>Field number for the "propagate_down" field.</summary>
    public const int PropagateDownFieldNumber = 11;
    private static readonly pb::FieldCodec<bool> _repeated_propagateDown_codec
        = pb::FieldCodec.ForBool(90);
    private readonly pbc::RepeatedField<bool> propagateDown_ = new pbc::RepeatedField<bool>();
    /// <summary>
    /// Specifies whether to backpropagate to each bottom. If unspecified,
    /// Caffe will automatically infer whether each input needs backpropagation
    /// to compute parameter gradients. If set to true for some inputs,
    /// backpropagation to those inputs is forced; if set false for some inputs,
    /// backpropagation to those inputs is skipped.
    ///
    /// The size must be either 0 or equal to the number of bottoms.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<bool> PropagateDown {
      get { return propagateDown_; }
    }

    /// <summary>Field number for the "include" field.</summary>
    public const int IncludeFieldNumber = 8;
    private static readonly pb::FieldCodec<global::Caffe.NetStateRule> _repeated_include_codec
        = pb::FieldCodec.ForMessage(66, global::Caffe.NetStateRule.Parser);
    private readonly pbc::RepeatedField<global::Caffe.NetStateRule> include_ = new pbc::RepeatedField<global::Caffe.NetStateRule>();
    /// <summary>
    /// Rules controlling whether and when a layer is included in the network,
    /// based on the current NetState.  You may specify a non-zero number of rules
    /// to include OR exclude, but not both.  If no include or exclude rules are
    /// specified, the layer is always included.  If the current NetState meets
    /// ANY (i.e., one or more) of the specified rules, the layer is
    /// included/excluded.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.NetStateRule> Include {
      get { return include_; }
    }

    /// <summary>Field number for the "exclude" field.</summary>
    public const int ExcludeFieldNumber = 9;
    private static readonly pb::FieldCodec<global::Caffe.NetStateRule> _repeated_exclude_codec
        = pb::FieldCodec.ForMessage(74, global::Caffe.NetStateRule.Parser);
    private readonly pbc::RepeatedField<global::Caffe.NetStateRule> exclude_ = new pbc::RepeatedField<global::Caffe.NetStateRule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.NetStateRule> Exclude {
      get { return exclude_; }
    }

    /// <summary>Field number for the "transform_param" field.</summary>
    public const int TransformParamFieldNumber = 100;
    private global::Caffe.TransformationParameter transformParam_;
    /// <summary>
    /// Parameters for data pre-processing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.TransformationParameter TransformParam {
      get { return transformParam_; }
      set {
        transformParam_ = value;
      }
    }

    /// <summary>Field number for the "loss_param" field.</summary>
    public const int LossParamFieldNumber = 101;
    private global::Caffe.LossParameter lossParam_;
    /// <summary>
    /// Parameters shared by loss layers.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.LossParameter LossParam {
      get { return lossParam_; }
      set {
        lossParam_ = value;
      }
    }

    /// <summary>Field number for the "accuracy_param" field.</summary>
    public const int AccuracyParamFieldNumber = 102;
    private global::Caffe.AccuracyParameter accuracyParam_;
    /// <summary>
    /// Layer type-specific parameters.
    ///
    /// Note: certain layers may have more than one computational engine
    /// for their implementation. These layers include an Engine type and
    /// engine parameter for selecting the implementation.
    /// The default for the engine is set by the ENGINE switch at compile-time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.AccuracyParameter AccuracyParam {
      get { return accuracyParam_; }
      set {
        accuracyParam_ = value;
      }
    }

    /// <summary>Field number for the "argmax_param" field.</summary>
    public const int ArgmaxParamFieldNumber = 103;
    private global::Caffe.ArgMaxParameter argmaxParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ArgMaxParameter ArgmaxParam {
      get { return argmaxParam_; }
      set {
        argmaxParam_ = value;
      }
    }

    /// <summary>Field number for the "batch_norm_param" field.</summary>
    public const int BatchNormParamFieldNumber = 139;
    private global::Caffe.BatchNormParameter batchNormParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.BatchNormParameter BatchNormParam {
      get { return batchNormParam_; }
      set {
        batchNormParam_ = value;
      }
    }

    /// <summary>Field number for the "bias_param" field.</summary>
    public const int BiasParamFieldNumber = 141;
    private global::Caffe.BiasParameter biasParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.BiasParameter BiasParam {
      get { return biasParam_; }
      set {
        biasParam_ = value;
      }
    }

    /// <summary>Field number for the "concat_param" field.</summary>
    public const int ConcatParamFieldNumber = 104;
    private global::Caffe.ConcatParameter concatParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ConcatParameter ConcatParam {
      get { return concatParam_; }
      set {
        concatParam_ = value;
      }
    }

    /// <summary>Field number for the "contrastive_loss_param" field.</summary>
    public const int ContrastiveLossParamFieldNumber = 105;
    private global::Caffe.ContrastiveLossParameter contrastiveLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ContrastiveLossParameter ContrastiveLossParam {
      get { return contrastiveLossParam_; }
      set {
        contrastiveLossParam_ = value;
      }
    }

    /// <summary>Field number for the "convolution_param" field.</summary>
    public const int ConvolutionParamFieldNumber = 106;
    private global::Caffe.ConvolutionParameter convolutionParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ConvolutionParameter ConvolutionParam {
      get { return convolutionParam_; }
      set {
        convolutionParam_ = value;
      }
    }

    /// <summary>Field number for the "crop_param" field.</summary>
    public const int CropParamFieldNumber = 144;
    private global::Caffe.CropParameter cropParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.CropParameter CropParam {
      get { return cropParam_; }
      set {
        cropParam_ = value;
      }
    }

    /// <summary>Field number for the "data_param" field.</summary>
    public const int DataParamFieldNumber = 107;
    private global::Caffe.DataParameter dataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.DataParameter DataParam {
      get { return dataParam_; }
      set {
        dataParam_ = value;
      }
    }

    /// <summary>Field number for the "dropout_param" field.</summary>
    public const int DropoutParamFieldNumber = 108;
    private global::Caffe.DropoutParameter dropoutParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.DropoutParameter DropoutParam {
      get { return dropoutParam_; }
      set {
        dropoutParam_ = value;
      }
    }

    /// <summary>Field number for the "dummy_data_param" field.</summary>
    public const int DummyDataParamFieldNumber = 109;
    private global::Caffe.DummyDataParameter dummyDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.DummyDataParameter DummyDataParam {
      get { return dummyDataParam_; }
      set {
        dummyDataParam_ = value;
      }
    }

    /// <summary>Field number for the "eltwise_param" field.</summary>
    public const int EltwiseParamFieldNumber = 110;
    private global::Caffe.EltwiseParameter eltwiseParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.EltwiseParameter EltwiseParam {
      get { return eltwiseParam_; }
      set {
        eltwiseParam_ = value;
      }
    }

    /// <summary>Field number for the "elu_param" field.</summary>
    public const int EluParamFieldNumber = 140;
    private global::Caffe.ELUParameter eluParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ELUParameter EluParam {
      get { return eluParam_; }
      set {
        eluParam_ = value;
      }
    }

    /// <summary>Field number for the "embed_param" field.</summary>
    public const int EmbedParamFieldNumber = 137;
    private global::Caffe.EmbedParameter embedParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.EmbedParameter EmbedParam {
      get { return embedParam_; }
      set {
        embedParam_ = value;
      }
    }

    /// <summary>Field number for the "exp_param" field.</summary>
    public const int ExpParamFieldNumber = 111;
    private global::Caffe.ExpParameter expParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ExpParameter ExpParam {
      get { return expParam_; }
      set {
        expParam_ = value;
      }
    }

    /// <summary>Field number for the "flatten_param" field.</summary>
    public const int FlattenParamFieldNumber = 135;
    private global::Caffe.FlattenParameter flattenParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FlattenParameter FlattenParam {
      get { return flattenParam_; }
      set {
        flattenParam_ = value;
      }
    }

    /// <summary>Field number for the "hdf5_data_param" field.</summary>
    public const int Hdf5DataParamFieldNumber = 112;
    private global::Caffe.HDF5DataParameter hdf5DataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.HDF5DataParameter Hdf5DataParam {
      get { return hdf5DataParam_; }
      set {
        hdf5DataParam_ = value;
      }
    }

    /// <summary>Field number for the "hdf5_output_param" field.</summary>
    public const int Hdf5OutputParamFieldNumber = 113;
    private global::Caffe.HDF5OutputParameter hdf5OutputParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.HDF5OutputParameter Hdf5OutputParam {
      get { return hdf5OutputParam_; }
      set {
        hdf5OutputParam_ = value;
      }
    }

    /// <summary>Field number for the "hinge_loss_param" field.</summary>
    public const int HingeLossParamFieldNumber = 114;
    private global::Caffe.HingeLossParameter hingeLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.HingeLossParameter HingeLossParam {
      get { return hingeLossParam_; }
      set {
        hingeLossParam_ = value;
      }
    }

    /// <summary>Field number for the "image_data_param" field.</summary>
    public const int ImageDataParamFieldNumber = 115;
    private global::Caffe.ImageDataParameter imageDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ImageDataParameter ImageDataParam {
      get { return imageDataParam_; }
      set {
        imageDataParam_ = value;
      }
    }

    /// <summary>Field number for the "infogain_loss_param" field.</summary>
    public const int InfogainLossParamFieldNumber = 116;
    private global::Caffe.InfogainLossParameter infogainLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.InfogainLossParameter InfogainLossParam {
      get { return infogainLossParam_; }
      set {
        infogainLossParam_ = value;
      }
    }

    /// <summary>Field number for the "inner_product_param" field.</summary>
    public const int InnerProductParamFieldNumber = 117;
    private global::Caffe.InnerProductParameter innerProductParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.InnerProductParameter InnerProductParam {
      get { return innerProductParam_; }
      set {
        innerProductParam_ = value;
      }
    }

    /// <summary>Field number for the "input_param" field.</summary>
    public const int InputParamFieldNumber = 143;
    private global::Caffe.InputParameter inputParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.InputParameter InputParam {
      get { return inputParam_; }
      set {
        inputParam_ = value;
      }
    }

    /// <summary>Field number for the "log_param" field.</summary>
    public const int LogParamFieldNumber = 134;
    private global::Caffe.LogParameter logParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.LogParameter LogParam {
      get { return logParam_; }
      set {
        logParam_ = value;
      }
    }

    /// <summary>Field number for the "lrn_param" field.</summary>
    public const int LrnParamFieldNumber = 118;
    private global::Caffe.LRNParameter lrnParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.LRNParameter LrnParam {
      get { return lrnParam_; }
      set {
        lrnParam_ = value;
      }
    }

    /// <summary>Field number for the "memory_data_param" field.</summary>
    public const int MemoryDataParamFieldNumber = 119;
    private global::Caffe.MemoryDataParameter memoryDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.MemoryDataParameter MemoryDataParam {
      get { return memoryDataParam_; }
      set {
        memoryDataParam_ = value;
      }
    }

    /// <summary>Field number for the "mvn_param" field.</summary>
    public const int MvnParamFieldNumber = 120;
    private global::Caffe.MVNParameter mvnParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.MVNParameter MvnParam {
      get { return mvnParam_; }
      set {
        mvnParam_ = value;
      }
    }

    /// <summary>Field number for the "parameter_param" field.</summary>
    public const int ParameterParamFieldNumber = 145;
    private global::Caffe.ParameterParameter parameterParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ParameterParameter ParameterParam {
      get { return parameterParam_; }
      set {
        parameterParam_ = value;
      }
    }

    /// <summary>Field number for the "pooling_param" field.</summary>
    public const int PoolingParamFieldNumber = 121;
    private global::Caffe.PoolingParameter poolingParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.PoolingParameter PoolingParam {
      get { return poolingParam_; }
      set {
        poolingParam_ = value;
      }
    }

    /// <summary>Field number for the "power_param" field.</summary>
    public const int PowerParamFieldNumber = 122;
    private global::Caffe.PowerParameter powerParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.PowerParameter PowerParam {
      get { return powerParam_; }
      set {
        powerParam_ = value;
      }
    }

    /// <summary>Field number for the "prelu_param" field.</summary>
    public const int PreluParamFieldNumber = 131;
    private global::Caffe.PReLUParameter preluParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.PReLUParameter PreluParam {
      get { return preluParam_; }
      set {
        preluParam_ = value;
      }
    }

    /// <summary>Field number for the "python_param" field.</summary>
    public const int PythonParamFieldNumber = 130;
    private global::Caffe.PythonParameter pythonParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.PythonParameter PythonParam {
      get { return pythonParam_; }
      set {
        pythonParam_ = value;
      }
    }

    /// <summary>Field number for the "recurrent_param" field.</summary>
    public const int RecurrentParamFieldNumber = 146;
    private global::Caffe.RecurrentParameter recurrentParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.RecurrentParameter RecurrentParam {
      get { return recurrentParam_; }
      set {
        recurrentParam_ = value;
      }
    }

    /// <summary>Field number for the "reduction_param" field.</summary>
    public const int ReductionParamFieldNumber = 136;
    private global::Caffe.ReductionParameter reductionParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ReductionParameter ReductionParam {
      get { return reductionParam_; }
      set {
        reductionParam_ = value;
      }
    }

    /// <summary>Field number for the "relu_param" field.</summary>
    public const int ReluParamFieldNumber = 123;
    private global::Caffe.ReLUParameter reluParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ReLUParameter ReluParam {
      get { return reluParam_; }
      set {
        reluParam_ = value;
      }
    }

    /// <summary>Field number for the "reshape_param" field.</summary>
    public const int ReshapeParamFieldNumber = 133;
    private global::Caffe.ReshapeParameter reshapeParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ReshapeParameter ReshapeParam {
      get { return reshapeParam_; }
      set {
        reshapeParam_ = value;
      }
    }

    /// <summary>Field number for the "scale_param" field.</summary>
    public const int ScaleParamFieldNumber = 142;
    private global::Caffe.ScaleParameter scaleParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ScaleParameter ScaleParam {
      get { return scaleParam_; }
      set {
        scaleParam_ = value;
      }
    }

    /// <summary>Field number for the "sigmoid_param" field.</summary>
    public const int SigmoidParamFieldNumber = 124;
    private global::Caffe.SigmoidParameter sigmoidParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SigmoidParameter SigmoidParam {
      get { return sigmoidParam_; }
      set {
        sigmoidParam_ = value;
      }
    }

    /// <summary>Field number for the "softmax_param" field.</summary>
    public const int SoftmaxParamFieldNumber = 125;
    private global::Caffe.SoftmaxParameter softmaxParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SoftmaxParameter SoftmaxParam {
      get { return softmaxParam_; }
      set {
        softmaxParam_ = value;
      }
    }

    /// <summary>Field number for the "spp_param" field.</summary>
    public const int SppParamFieldNumber = 132;
    private global::Caffe.SPPParameter sppParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SPPParameter SppParam {
      get { return sppParam_; }
      set {
        sppParam_ = value;
      }
    }

    /// <summary>Field number for the "slice_param" field.</summary>
    public const int SliceParamFieldNumber = 126;
    private global::Caffe.SliceParameter sliceParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SliceParameter SliceParam {
      get { return sliceParam_; }
      set {
        sliceParam_ = value;
      }
    }

    /// <summary>Field number for the "swish_param" field.</summary>
    public const int SwishParamFieldNumber = 147;
    private global::Caffe.SwishParameter swishParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SwishParameter SwishParam {
      get { return swishParam_; }
      set {
        swishParam_ = value;
      }
    }

    /// <summary>Field number for the "tanh_param" field.</summary>
    public const int TanhParamFieldNumber = 127;
    private global::Caffe.TanHParameter tanhParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.TanHParameter TanhParam {
      get { return tanhParam_; }
      set {
        tanhParam_ = value;
      }
    }

    /// <summary>Field number for the "threshold_param" field.</summary>
    public const int ThresholdParamFieldNumber = 128;
    private global::Caffe.ThresholdParameter thresholdParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ThresholdParameter ThresholdParam {
      get { return thresholdParam_; }
      set {
        thresholdParam_ = value;
      }
    }

    /// <summary>Field number for the "tile_param" field.</summary>
    public const int TileParamFieldNumber = 138;
    private global::Caffe.TileParameter tileParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.TileParameter TileParam {
      get { return tileParam_; }
      set {
        tileParam_ = value;
      }
    }

    /// <summary>Field number for the "window_data_param" field.</summary>
    public const int WindowDataParamFieldNumber = 129;
    private global::Caffe.WindowDataParameter windowDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.WindowDataParameter WindowDataParam {
      get { return windowDataParam_; }
      set {
        windowDataParam_ = value;
      }
    }

    /// <summary>Field number for the "combined_margin_param" field.</summary>
    public const int CombinedMarginParamFieldNumber = 148;
    private global::Caffe.CombinedMarginParameter combinedMarginParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.CombinedMarginParameter CombinedMarginParam {
      get { return combinedMarginParam_; }
      set {
        combinedMarginParam_ = value;
      }
    }

    /// <summary>Field number for the "cosin_add_m_param" field.</summary>
    public const int CosinAddMParamFieldNumber = 149;
    private global::Caffe.CosinAddmParameter cosinAddMParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.CosinAddmParameter CosinAddMParam {
      get { return cosinAddMParam_; }
      set {
        cosinAddMParam_ = value;
      }
    }

    /// <summary>Field number for the "normalize_param" field.</summary>
    public const int NormalizeParamFieldNumber = 150;
    private global::Caffe.NormalizeParameter normalizeParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.NormalizeParameter NormalizeParam {
      get { return normalizeParam_; }
      set {
        normalizeParam_ = value;
      }
    }

    /// <summary>Field number for the "l2normalization_param" field.</summary>
    public const int L2NormalizationParamFieldNumber = 151;
    private global::Caffe.L2NormalizationParameter l2NormalizationParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.L2NormalizationParameter L2NormalizationParam {
      get { return l2NormalizationParam_; }
      set {
        l2NormalizationParam_ = value;
      }
    }

    /// <summary>Field number for the "focal_loss_param" field.</summary>
    public const int FocalLossParamFieldNumber = 152;
    private global::Caffe.FocalLossParameter focalLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FocalLossParameter FocalLossParam {
      get { return focalLossParam_; }
      set {
        focalLossParam_ = value;
      }
    }

    /// <summary>Field number for the "label_specific_add_param" field.</summary>
    public const int LabelSpecificAddParamFieldNumber = 153;
    private global::Caffe.LabelSpecificAddParameter labelSpecificAddParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.LabelSpecificAddParameter LabelSpecificAddParam {
      get { return labelSpecificAddParam_; }
      set {
        labelSpecificAddParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LayerParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LayerParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if(!bottom_.Equals(other.bottom_)) return false;
      if(!top_.Equals(other.top_)) return false;
      if (Phase != other.Phase) return false;
      if(!lossWeight_.Equals(other.lossWeight_)) return false;
      if(!param_.Equals(other.param_)) return false;
      if(!blobs_.Equals(other.blobs_)) return false;
      if(!propagateDown_.Equals(other.propagateDown_)) return false;
      if(!include_.Equals(other.include_)) return false;
      if(!exclude_.Equals(other.exclude_)) return false;
      if (!object.Equals(TransformParam, other.TransformParam)) return false;
      if (!object.Equals(LossParam, other.LossParam)) return false;
      if (!object.Equals(AccuracyParam, other.AccuracyParam)) return false;
      if (!object.Equals(ArgmaxParam, other.ArgmaxParam)) return false;
      if (!object.Equals(BatchNormParam, other.BatchNormParam)) return false;
      if (!object.Equals(BiasParam, other.BiasParam)) return false;
      if (!object.Equals(ConcatParam, other.ConcatParam)) return false;
      if (!object.Equals(ContrastiveLossParam, other.ContrastiveLossParam)) return false;
      if (!object.Equals(ConvolutionParam, other.ConvolutionParam)) return false;
      if (!object.Equals(CropParam, other.CropParam)) return false;
      if (!object.Equals(DataParam, other.DataParam)) return false;
      if (!object.Equals(DropoutParam, other.DropoutParam)) return false;
      if (!object.Equals(DummyDataParam, other.DummyDataParam)) return false;
      if (!object.Equals(EltwiseParam, other.EltwiseParam)) return false;
      if (!object.Equals(EluParam, other.EluParam)) return false;
      if (!object.Equals(EmbedParam, other.EmbedParam)) return false;
      if (!object.Equals(ExpParam, other.ExpParam)) return false;
      if (!object.Equals(FlattenParam, other.FlattenParam)) return false;
      if (!object.Equals(Hdf5DataParam, other.Hdf5DataParam)) return false;
      if (!object.Equals(Hdf5OutputParam, other.Hdf5OutputParam)) return false;
      if (!object.Equals(HingeLossParam, other.HingeLossParam)) return false;
      if (!object.Equals(ImageDataParam, other.ImageDataParam)) return false;
      if (!object.Equals(InfogainLossParam, other.InfogainLossParam)) return false;
      if (!object.Equals(InnerProductParam, other.InnerProductParam)) return false;
      if (!object.Equals(InputParam, other.InputParam)) return false;
      if (!object.Equals(LogParam, other.LogParam)) return false;
      if (!object.Equals(LrnParam, other.LrnParam)) return false;
      if (!object.Equals(MemoryDataParam, other.MemoryDataParam)) return false;
      if (!object.Equals(MvnParam, other.MvnParam)) return false;
      if (!object.Equals(ParameterParam, other.ParameterParam)) return false;
      if (!object.Equals(PoolingParam, other.PoolingParam)) return false;
      if (!object.Equals(PowerParam, other.PowerParam)) return false;
      if (!object.Equals(PreluParam, other.PreluParam)) return false;
      if (!object.Equals(PythonParam, other.PythonParam)) return false;
      if (!object.Equals(RecurrentParam, other.RecurrentParam)) return false;
      if (!object.Equals(ReductionParam, other.ReductionParam)) return false;
      if (!object.Equals(ReluParam, other.ReluParam)) return false;
      if (!object.Equals(ReshapeParam, other.ReshapeParam)) return false;
      if (!object.Equals(ScaleParam, other.ScaleParam)) return false;
      if (!object.Equals(SigmoidParam, other.SigmoidParam)) return false;
      if (!object.Equals(SoftmaxParam, other.SoftmaxParam)) return false;
      if (!object.Equals(SppParam, other.SppParam)) return false;
      if (!object.Equals(SliceParam, other.SliceParam)) return false;
      if (!object.Equals(SwishParam, other.SwishParam)) return false;
      if (!object.Equals(TanhParam, other.TanhParam)) return false;
      if (!object.Equals(ThresholdParam, other.ThresholdParam)) return false;
      if (!object.Equals(TileParam, other.TileParam)) return false;
      if (!object.Equals(WindowDataParam, other.WindowDataParam)) return false;
      if (!object.Equals(CombinedMarginParam, other.CombinedMarginParam)) return false;
      if (!object.Equals(CosinAddMParam, other.CosinAddMParam)) return false;
      if (!object.Equals(NormalizeParam, other.NormalizeParam)) return false;
      if (!object.Equals(L2NormalizationParam, other.L2NormalizationParam)) return false;
      if (!object.Equals(FocalLossParam, other.FocalLossParam)) return false;
      if (!object.Equals(LabelSpecificAddParam, other.LabelSpecificAddParam)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= bottom_.GetHashCode();
      hash ^= top_.GetHashCode();
      if (Phase != 0) hash ^= Phase.GetHashCode();
      hash ^= lossWeight_.GetHashCode();
      hash ^= param_.GetHashCode();
      hash ^= blobs_.GetHashCode();
      hash ^= propagateDown_.GetHashCode();
      hash ^= include_.GetHashCode();
      hash ^= exclude_.GetHashCode();
      if (transformParam_ != null) hash ^= TransformParam.GetHashCode();
      if (lossParam_ != null) hash ^= LossParam.GetHashCode();
      if (accuracyParam_ != null) hash ^= AccuracyParam.GetHashCode();
      if (argmaxParam_ != null) hash ^= ArgmaxParam.GetHashCode();
      if (batchNormParam_ != null) hash ^= BatchNormParam.GetHashCode();
      if (biasParam_ != null) hash ^= BiasParam.GetHashCode();
      if (concatParam_ != null) hash ^= ConcatParam.GetHashCode();
      if (contrastiveLossParam_ != null) hash ^= ContrastiveLossParam.GetHashCode();
      if (convolutionParam_ != null) hash ^= ConvolutionParam.GetHashCode();
      if (cropParam_ != null) hash ^= CropParam.GetHashCode();
      if (dataParam_ != null) hash ^= DataParam.GetHashCode();
      if (dropoutParam_ != null) hash ^= DropoutParam.GetHashCode();
      if (dummyDataParam_ != null) hash ^= DummyDataParam.GetHashCode();
      if (eltwiseParam_ != null) hash ^= EltwiseParam.GetHashCode();
      if (eluParam_ != null) hash ^= EluParam.GetHashCode();
      if (embedParam_ != null) hash ^= EmbedParam.GetHashCode();
      if (expParam_ != null) hash ^= ExpParam.GetHashCode();
      if (flattenParam_ != null) hash ^= FlattenParam.GetHashCode();
      if (hdf5DataParam_ != null) hash ^= Hdf5DataParam.GetHashCode();
      if (hdf5OutputParam_ != null) hash ^= Hdf5OutputParam.GetHashCode();
      if (hingeLossParam_ != null) hash ^= HingeLossParam.GetHashCode();
      if (imageDataParam_ != null) hash ^= ImageDataParam.GetHashCode();
      if (infogainLossParam_ != null) hash ^= InfogainLossParam.GetHashCode();
      if (innerProductParam_ != null) hash ^= InnerProductParam.GetHashCode();
      if (inputParam_ != null) hash ^= InputParam.GetHashCode();
      if (logParam_ != null) hash ^= LogParam.GetHashCode();
      if (lrnParam_ != null) hash ^= LrnParam.GetHashCode();
      if (memoryDataParam_ != null) hash ^= MemoryDataParam.GetHashCode();
      if (mvnParam_ != null) hash ^= MvnParam.GetHashCode();
      if (parameterParam_ != null) hash ^= ParameterParam.GetHashCode();
      if (poolingParam_ != null) hash ^= PoolingParam.GetHashCode();
      if (powerParam_ != null) hash ^= PowerParam.GetHashCode();
      if (preluParam_ != null) hash ^= PreluParam.GetHashCode();
      if (pythonParam_ != null) hash ^= PythonParam.GetHashCode();
      if (recurrentParam_ != null) hash ^= RecurrentParam.GetHashCode();
      if (reductionParam_ != null) hash ^= ReductionParam.GetHashCode();
      if (reluParam_ != null) hash ^= ReluParam.GetHashCode();
      if (reshapeParam_ != null) hash ^= ReshapeParam.GetHashCode();
      if (scaleParam_ != null) hash ^= ScaleParam.GetHashCode();
      if (sigmoidParam_ != null) hash ^= SigmoidParam.GetHashCode();
      if (softmaxParam_ != null) hash ^= SoftmaxParam.GetHashCode();
      if (sppParam_ != null) hash ^= SppParam.GetHashCode();
      if (sliceParam_ != null) hash ^= SliceParam.GetHashCode();
      if (swishParam_ != null) hash ^= SwishParam.GetHashCode();
      if (tanhParam_ != null) hash ^= TanhParam.GetHashCode();
      if (thresholdParam_ != null) hash ^= ThresholdParam.GetHashCode();
      if (tileParam_ != null) hash ^= TileParam.GetHashCode();
      if (windowDataParam_ != null) hash ^= WindowDataParam.GetHashCode();
      if (combinedMarginParam_ != null) hash ^= CombinedMarginParam.GetHashCode();
      if (cosinAddMParam_ != null) hash ^= CosinAddMParam.GetHashCode();
      if (normalizeParam_ != null) hash ^= NormalizeParam.GetHashCode();
      if (l2NormalizationParam_ != null) hash ^= L2NormalizationParam.GetHashCode();
      if (focalLossParam_ != null) hash ^= FocalLossParam.GetHashCode();
      if (labelSpecificAddParam_ != null) hash ^= LabelSpecificAddParam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      bottom_.WriteTo(output, _repeated_bottom_codec);
      top_.WriteTo(output, _repeated_top_codec);
      lossWeight_.WriteTo(output, _repeated_lossWeight_codec);
      param_.WriteTo(output, _repeated_param_codec);
      blobs_.WriteTo(output, _repeated_blobs_codec);
      include_.WriteTo(output, _repeated_include_codec);
      exclude_.WriteTo(output, _repeated_exclude_codec);
      if (Phase != 0) {
        output.WriteRawTag(80);
        output.WriteEnum((int) Phase);
      }
      propagateDown_.WriteTo(output, _repeated_propagateDown_codec);
      if (transformParam_ != null) {
        output.WriteRawTag(162, 6);
        output.WriteMessage(TransformParam);
      }
      if (lossParam_ != null) {
        output.WriteRawTag(170, 6);
        output.WriteMessage(LossParam);
      }
      if (accuracyParam_ != null) {
        output.WriteRawTag(178, 6);
        output.WriteMessage(AccuracyParam);
      }
      if (argmaxParam_ != null) {
        output.WriteRawTag(186, 6);
        output.WriteMessage(ArgmaxParam);
      }
      if (concatParam_ != null) {
        output.WriteRawTag(194, 6);
        output.WriteMessage(ConcatParam);
      }
      if (contrastiveLossParam_ != null) {
        output.WriteRawTag(202, 6);
        output.WriteMessage(ContrastiveLossParam);
      }
      if (convolutionParam_ != null) {
        output.WriteRawTag(210, 6);
        output.WriteMessage(ConvolutionParam);
      }
      if (dataParam_ != null) {
        output.WriteRawTag(218, 6);
        output.WriteMessage(DataParam);
      }
      if (dropoutParam_ != null) {
        output.WriteRawTag(226, 6);
        output.WriteMessage(DropoutParam);
      }
      if (dummyDataParam_ != null) {
        output.WriteRawTag(234, 6);
        output.WriteMessage(DummyDataParam);
      }
      if (eltwiseParam_ != null) {
        output.WriteRawTag(242, 6);
        output.WriteMessage(EltwiseParam);
      }
      if (expParam_ != null) {
        output.WriteRawTag(250, 6);
        output.WriteMessage(ExpParam);
      }
      if (hdf5DataParam_ != null) {
        output.WriteRawTag(130, 7);
        output.WriteMessage(Hdf5DataParam);
      }
      if (hdf5OutputParam_ != null) {
        output.WriteRawTag(138, 7);
        output.WriteMessage(Hdf5OutputParam);
      }
      if (hingeLossParam_ != null) {
        output.WriteRawTag(146, 7);
        output.WriteMessage(HingeLossParam);
      }
      if (imageDataParam_ != null) {
        output.WriteRawTag(154, 7);
        output.WriteMessage(ImageDataParam);
      }
      if (infogainLossParam_ != null) {
        output.WriteRawTag(162, 7);
        output.WriteMessage(InfogainLossParam);
      }
      if (innerProductParam_ != null) {
        output.WriteRawTag(170, 7);
        output.WriteMessage(InnerProductParam);
      }
      if (lrnParam_ != null) {
        output.WriteRawTag(178, 7);
        output.WriteMessage(LrnParam);
      }
      if (memoryDataParam_ != null) {
        output.WriteRawTag(186, 7);
        output.WriteMessage(MemoryDataParam);
      }
      if (mvnParam_ != null) {
        output.WriteRawTag(194, 7);
        output.WriteMessage(MvnParam);
      }
      if (poolingParam_ != null) {
        output.WriteRawTag(202, 7);
        output.WriteMessage(PoolingParam);
      }
      if (powerParam_ != null) {
        output.WriteRawTag(210, 7);
        output.WriteMessage(PowerParam);
      }
      if (reluParam_ != null) {
        output.WriteRawTag(218, 7);
        output.WriteMessage(ReluParam);
      }
      if (sigmoidParam_ != null) {
        output.WriteRawTag(226, 7);
        output.WriteMessage(SigmoidParam);
      }
      if (softmaxParam_ != null) {
        output.WriteRawTag(234, 7);
        output.WriteMessage(SoftmaxParam);
      }
      if (sliceParam_ != null) {
        output.WriteRawTag(242, 7);
        output.WriteMessage(SliceParam);
      }
      if (tanhParam_ != null) {
        output.WriteRawTag(250, 7);
        output.WriteMessage(TanhParam);
      }
      if (thresholdParam_ != null) {
        output.WriteRawTag(130, 8);
        output.WriteMessage(ThresholdParam);
      }
      if (windowDataParam_ != null) {
        output.WriteRawTag(138, 8);
        output.WriteMessage(WindowDataParam);
      }
      if (pythonParam_ != null) {
        output.WriteRawTag(146, 8);
        output.WriteMessage(PythonParam);
      }
      if (preluParam_ != null) {
        output.WriteRawTag(154, 8);
        output.WriteMessage(PreluParam);
      }
      if (sppParam_ != null) {
        output.WriteRawTag(162, 8);
        output.WriteMessage(SppParam);
      }
      if (reshapeParam_ != null) {
        output.WriteRawTag(170, 8);
        output.WriteMessage(ReshapeParam);
      }
      if (logParam_ != null) {
        output.WriteRawTag(178, 8);
        output.WriteMessage(LogParam);
      }
      if (flattenParam_ != null) {
        output.WriteRawTag(186, 8);
        output.WriteMessage(FlattenParam);
      }
      if (reductionParam_ != null) {
        output.WriteRawTag(194, 8);
        output.WriteMessage(ReductionParam);
      }
      if (embedParam_ != null) {
        output.WriteRawTag(202, 8);
        output.WriteMessage(EmbedParam);
      }
      if (tileParam_ != null) {
        output.WriteRawTag(210, 8);
        output.WriteMessage(TileParam);
      }
      if (batchNormParam_ != null) {
        output.WriteRawTag(218, 8);
        output.WriteMessage(BatchNormParam);
      }
      if (eluParam_ != null) {
        output.WriteRawTag(226, 8);
        output.WriteMessage(EluParam);
      }
      if (biasParam_ != null) {
        output.WriteRawTag(234, 8);
        output.WriteMessage(BiasParam);
      }
      if (scaleParam_ != null) {
        output.WriteRawTag(242, 8);
        output.WriteMessage(ScaleParam);
      }
      if (inputParam_ != null) {
        output.WriteRawTag(250, 8);
        output.WriteMessage(InputParam);
      }
      if (cropParam_ != null) {
        output.WriteRawTag(130, 9);
        output.WriteMessage(CropParam);
      }
      if (parameterParam_ != null) {
        output.WriteRawTag(138, 9);
        output.WriteMessage(ParameterParam);
      }
      if (recurrentParam_ != null) {
        output.WriteRawTag(146, 9);
        output.WriteMessage(RecurrentParam);
      }
      if (swishParam_ != null) {
        output.WriteRawTag(154, 9);
        output.WriteMessage(SwishParam);
      }
      if (combinedMarginParam_ != null) {
        output.WriteRawTag(162, 9);
        output.WriteMessage(CombinedMarginParam);
      }
      if (cosinAddMParam_ != null) {
        output.WriteRawTag(170, 9);
        output.WriteMessage(CosinAddMParam);
      }
      if (normalizeParam_ != null) {
        output.WriteRawTag(178, 9);
        output.WriteMessage(NormalizeParam);
      }
      if (l2NormalizationParam_ != null) {
        output.WriteRawTag(186, 9);
        output.WriteMessage(L2NormalizationParam);
      }
      if (focalLossParam_ != null) {
        output.WriteRawTag(194, 9);
        output.WriteMessage(FocalLossParam);
      }
      if (labelSpecificAddParam_ != null) {
        output.WriteRawTag(202, 9);
        output.WriteMessage(LabelSpecificAddParam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += bottom_.CalculateSize(_repeated_bottom_codec);
      size += top_.CalculateSize(_repeated_top_codec);
      if (Phase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Phase);
      }
      size += lossWeight_.CalculateSize(_repeated_lossWeight_codec);
      size += param_.CalculateSize(_repeated_param_codec);
      size += blobs_.CalculateSize(_repeated_blobs_codec);
      size += propagateDown_.CalculateSize(_repeated_propagateDown_codec);
      size += include_.CalculateSize(_repeated_include_codec);
      size += exclude_.CalculateSize(_repeated_exclude_codec);
      if (transformParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransformParam);
      }
      if (lossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LossParam);
      }
      if (accuracyParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccuracyParam);
      }
      if (argmaxParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ArgmaxParam);
      }
      if (batchNormParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BatchNormParam);
      }
      if (biasParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(BiasParam);
      }
      if (concatParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConcatParam);
      }
      if (contrastiveLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContrastiveLossParam);
      }
      if (convolutionParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConvolutionParam);
      }
      if (cropParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CropParam);
      }
      if (dataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DataParam);
      }
      if (dropoutParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DropoutParam);
      }
      if (dummyDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DummyDataParam);
      }
      if (eltwiseParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EltwiseParam);
      }
      if (eluParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EluParam);
      }
      if (embedParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EmbedParam);
      }
      if (expParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpParam);
      }
      if (flattenParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FlattenParam);
      }
      if (hdf5DataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hdf5DataParam);
      }
      if (hdf5OutputParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hdf5OutputParam);
      }
      if (hingeLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HingeLossParam);
      }
      if (imageDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ImageDataParam);
      }
      if (infogainLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InfogainLossParam);
      }
      if (innerProductParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InnerProductParam);
      }
      if (inputParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InputParam);
      }
      if (logParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LogParam);
      }
      if (lrnParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LrnParam);
      }
      if (memoryDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MemoryDataParam);
      }
      if (mvnParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MvnParam);
      }
      if (parameterParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ParameterParam);
      }
      if (poolingParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PoolingParam);
      }
      if (powerParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerParam);
      }
      if (preluParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PreluParam);
      }
      if (pythonParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PythonParam);
      }
      if (recurrentParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(RecurrentParam);
      }
      if (reductionParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReductionParam);
      }
      if (reluParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReluParam);
      }
      if (reshapeParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReshapeParam);
      }
      if (scaleParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ScaleParam);
      }
      if (sigmoidParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SigmoidParam);
      }
      if (softmaxParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SoftmaxParam);
      }
      if (sppParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SppParam);
      }
      if (sliceParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SliceParam);
      }
      if (swishParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SwishParam);
      }
      if (tanhParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TanhParam);
      }
      if (thresholdParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ThresholdParam);
      }
      if (tileParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TileParam);
      }
      if (windowDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WindowDataParam);
      }
      if (combinedMarginParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CombinedMarginParam);
      }
      if (cosinAddMParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(CosinAddMParam);
      }
      if (normalizeParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(NormalizeParam);
      }
      if (l2NormalizationParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(L2NormalizationParam);
      }
      if (focalLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(FocalLossParam);
      }
      if (labelSpecificAddParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LabelSpecificAddParam);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LayerParameter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      bottom_.Add(other.bottom_);
      top_.Add(other.top_);
      if (other.Phase != 0) {
        Phase = other.Phase;
      }
      lossWeight_.Add(other.lossWeight_);
      param_.Add(other.param_);
      blobs_.Add(other.blobs_);
      propagateDown_.Add(other.propagateDown_);
      include_.Add(other.include_);
      exclude_.Add(other.exclude_);
      if (other.transformParam_ != null) {
        if (transformParam_ == null) {
          transformParam_ = new global::Caffe.TransformationParameter();
        }
        TransformParam.MergeFrom(other.TransformParam);
      }
      if (other.lossParam_ != null) {
        if (lossParam_ == null) {
          lossParam_ = new global::Caffe.LossParameter();
        }
        LossParam.MergeFrom(other.LossParam);
      }
      if (other.accuracyParam_ != null) {
        if (accuracyParam_ == null) {
          accuracyParam_ = new global::Caffe.AccuracyParameter();
        }
        AccuracyParam.MergeFrom(other.AccuracyParam);
      }
      if (other.argmaxParam_ != null) {
        if (argmaxParam_ == null) {
          argmaxParam_ = new global::Caffe.ArgMaxParameter();
        }
        ArgmaxParam.MergeFrom(other.ArgmaxParam);
      }
      if (other.batchNormParam_ != null) {
        if (batchNormParam_ == null) {
          batchNormParam_ = new global::Caffe.BatchNormParameter();
        }
        BatchNormParam.MergeFrom(other.BatchNormParam);
      }
      if (other.biasParam_ != null) {
        if (biasParam_ == null) {
          biasParam_ = new global::Caffe.BiasParameter();
        }
        BiasParam.MergeFrom(other.BiasParam);
      }
      if (other.concatParam_ != null) {
        if (concatParam_ == null) {
          concatParam_ = new global::Caffe.ConcatParameter();
        }
        ConcatParam.MergeFrom(other.ConcatParam);
      }
      if (other.contrastiveLossParam_ != null) {
        if (contrastiveLossParam_ == null) {
          contrastiveLossParam_ = new global::Caffe.ContrastiveLossParameter();
        }
        ContrastiveLossParam.MergeFrom(other.ContrastiveLossParam);
      }
      if (other.convolutionParam_ != null) {
        if (convolutionParam_ == null) {
          convolutionParam_ = new global::Caffe.ConvolutionParameter();
        }
        ConvolutionParam.MergeFrom(other.ConvolutionParam);
      }
      if (other.cropParam_ != null) {
        if (cropParam_ == null) {
          cropParam_ = new global::Caffe.CropParameter();
        }
        CropParam.MergeFrom(other.CropParam);
      }
      if (other.dataParam_ != null) {
        if (dataParam_ == null) {
          dataParam_ = new global::Caffe.DataParameter();
        }
        DataParam.MergeFrom(other.DataParam);
      }
      if (other.dropoutParam_ != null) {
        if (dropoutParam_ == null) {
          dropoutParam_ = new global::Caffe.DropoutParameter();
        }
        DropoutParam.MergeFrom(other.DropoutParam);
      }
      if (other.dummyDataParam_ != null) {
        if (dummyDataParam_ == null) {
          dummyDataParam_ = new global::Caffe.DummyDataParameter();
        }
        DummyDataParam.MergeFrom(other.DummyDataParam);
      }
      if (other.eltwiseParam_ != null) {
        if (eltwiseParam_ == null) {
          eltwiseParam_ = new global::Caffe.EltwiseParameter();
        }
        EltwiseParam.MergeFrom(other.EltwiseParam);
      }
      if (other.eluParam_ != null) {
        if (eluParam_ == null) {
          eluParam_ = new global::Caffe.ELUParameter();
        }
        EluParam.MergeFrom(other.EluParam);
      }
      if (other.embedParam_ != null) {
        if (embedParam_ == null) {
          embedParam_ = new global::Caffe.EmbedParameter();
        }
        EmbedParam.MergeFrom(other.EmbedParam);
      }
      if (other.expParam_ != null) {
        if (expParam_ == null) {
          expParam_ = new global::Caffe.ExpParameter();
        }
        ExpParam.MergeFrom(other.ExpParam);
      }
      if (other.flattenParam_ != null) {
        if (flattenParam_ == null) {
          flattenParam_ = new global::Caffe.FlattenParameter();
        }
        FlattenParam.MergeFrom(other.FlattenParam);
      }
      if (other.hdf5DataParam_ != null) {
        if (hdf5DataParam_ == null) {
          hdf5DataParam_ = new global::Caffe.HDF5DataParameter();
        }
        Hdf5DataParam.MergeFrom(other.Hdf5DataParam);
      }
      if (other.hdf5OutputParam_ != null) {
        if (hdf5OutputParam_ == null) {
          hdf5OutputParam_ = new global::Caffe.HDF5OutputParameter();
        }
        Hdf5OutputParam.MergeFrom(other.Hdf5OutputParam);
      }
      if (other.hingeLossParam_ != null) {
        if (hingeLossParam_ == null) {
          hingeLossParam_ = new global::Caffe.HingeLossParameter();
        }
        HingeLossParam.MergeFrom(other.HingeLossParam);
      }
      if (other.imageDataParam_ != null) {
        if (imageDataParam_ == null) {
          imageDataParam_ = new global::Caffe.ImageDataParameter();
        }
        ImageDataParam.MergeFrom(other.ImageDataParam);
      }
      if (other.infogainLossParam_ != null) {
        if (infogainLossParam_ == null) {
          infogainLossParam_ = new global::Caffe.InfogainLossParameter();
        }
        InfogainLossParam.MergeFrom(other.InfogainLossParam);
      }
      if (other.innerProductParam_ != null) {
        if (innerProductParam_ == null) {
          innerProductParam_ = new global::Caffe.InnerProductParameter();
        }
        InnerProductParam.MergeFrom(other.InnerProductParam);
      }
      if (other.inputParam_ != null) {
        if (inputParam_ == null) {
          inputParam_ = new global::Caffe.InputParameter();
        }
        InputParam.MergeFrom(other.InputParam);
      }
      if (other.logParam_ != null) {
        if (logParam_ == null) {
          logParam_ = new global::Caffe.LogParameter();
        }
        LogParam.MergeFrom(other.LogParam);
      }
      if (other.lrnParam_ != null) {
        if (lrnParam_ == null) {
          lrnParam_ = new global::Caffe.LRNParameter();
        }
        LrnParam.MergeFrom(other.LrnParam);
      }
      if (other.memoryDataParam_ != null) {
        if (memoryDataParam_ == null) {
          memoryDataParam_ = new global::Caffe.MemoryDataParameter();
        }
        MemoryDataParam.MergeFrom(other.MemoryDataParam);
      }
      if (other.mvnParam_ != null) {
        if (mvnParam_ == null) {
          mvnParam_ = new global::Caffe.MVNParameter();
        }
        MvnParam.MergeFrom(other.MvnParam);
      }
      if (other.parameterParam_ != null) {
        if (parameterParam_ == null) {
          parameterParam_ = new global::Caffe.ParameterParameter();
        }
        ParameterParam.MergeFrom(other.ParameterParam);
      }
      if (other.poolingParam_ != null) {
        if (poolingParam_ == null) {
          poolingParam_ = new global::Caffe.PoolingParameter();
        }
        PoolingParam.MergeFrom(other.PoolingParam);
      }
      if (other.powerParam_ != null) {
        if (powerParam_ == null) {
          powerParam_ = new global::Caffe.PowerParameter();
        }
        PowerParam.MergeFrom(other.PowerParam);
      }
      if (other.preluParam_ != null) {
        if (preluParam_ == null) {
          preluParam_ = new global::Caffe.PReLUParameter();
        }
        PreluParam.MergeFrom(other.PreluParam);
      }
      if (other.pythonParam_ != null) {
        if (pythonParam_ == null) {
          pythonParam_ = new global::Caffe.PythonParameter();
        }
        PythonParam.MergeFrom(other.PythonParam);
      }
      if (other.recurrentParam_ != null) {
        if (recurrentParam_ == null) {
          recurrentParam_ = new global::Caffe.RecurrentParameter();
        }
        RecurrentParam.MergeFrom(other.RecurrentParam);
      }
      if (other.reductionParam_ != null) {
        if (reductionParam_ == null) {
          reductionParam_ = new global::Caffe.ReductionParameter();
        }
        ReductionParam.MergeFrom(other.ReductionParam);
      }
      if (other.reluParam_ != null) {
        if (reluParam_ == null) {
          reluParam_ = new global::Caffe.ReLUParameter();
        }
        ReluParam.MergeFrom(other.ReluParam);
      }
      if (other.reshapeParam_ != null) {
        if (reshapeParam_ == null) {
          reshapeParam_ = new global::Caffe.ReshapeParameter();
        }
        ReshapeParam.MergeFrom(other.ReshapeParam);
      }
      if (other.scaleParam_ != null) {
        if (scaleParam_ == null) {
          scaleParam_ = new global::Caffe.ScaleParameter();
        }
        ScaleParam.MergeFrom(other.ScaleParam);
      }
      if (other.sigmoidParam_ != null) {
        if (sigmoidParam_ == null) {
          sigmoidParam_ = new global::Caffe.SigmoidParameter();
        }
        SigmoidParam.MergeFrom(other.SigmoidParam);
      }
      if (other.softmaxParam_ != null) {
        if (softmaxParam_ == null) {
          softmaxParam_ = new global::Caffe.SoftmaxParameter();
        }
        SoftmaxParam.MergeFrom(other.SoftmaxParam);
      }
      if (other.sppParam_ != null) {
        if (sppParam_ == null) {
          sppParam_ = new global::Caffe.SPPParameter();
        }
        SppParam.MergeFrom(other.SppParam);
      }
      if (other.sliceParam_ != null) {
        if (sliceParam_ == null) {
          sliceParam_ = new global::Caffe.SliceParameter();
        }
        SliceParam.MergeFrom(other.SliceParam);
      }
      if (other.swishParam_ != null) {
        if (swishParam_ == null) {
          swishParam_ = new global::Caffe.SwishParameter();
        }
        SwishParam.MergeFrom(other.SwishParam);
      }
      if (other.tanhParam_ != null) {
        if (tanhParam_ == null) {
          tanhParam_ = new global::Caffe.TanHParameter();
        }
        TanhParam.MergeFrom(other.TanhParam);
      }
      if (other.thresholdParam_ != null) {
        if (thresholdParam_ == null) {
          thresholdParam_ = new global::Caffe.ThresholdParameter();
        }
        ThresholdParam.MergeFrom(other.ThresholdParam);
      }
      if (other.tileParam_ != null) {
        if (tileParam_ == null) {
          tileParam_ = new global::Caffe.TileParameter();
        }
        TileParam.MergeFrom(other.TileParam);
      }
      if (other.windowDataParam_ != null) {
        if (windowDataParam_ == null) {
          windowDataParam_ = new global::Caffe.WindowDataParameter();
        }
        WindowDataParam.MergeFrom(other.WindowDataParam);
      }
      if (other.combinedMarginParam_ != null) {
        if (combinedMarginParam_ == null) {
          combinedMarginParam_ = new global::Caffe.CombinedMarginParameter();
        }
        CombinedMarginParam.MergeFrom(other.CombinedMarginParam);
      }
      if (other.cosinAddMParam_ != null) {
        if (cosinAddMParam_ == null) {
          cosinAddMParam_ = new global::Caffe.CosinAddmParameter();
        }
        CosinAddMParam.MergeFrom(other.CosinAddMParam);
      }
      if (other.normalizeParam_ != null) {
        if (normalizeParam_ == null) {
          normalizeParam_ = new global::Caffe.NormalizeParameter();
        }
        NormalizeParam.MergeFrom(other.NormalizeParam);
      }
      if (other.l2NormalizationParam_ != null) {
        if (l2NormalizationParam_ == null) {
          l2NormalizationParam_ = new global::Caffe.L2NormalizationParameter();
        }
        L2NormalizationParam.MergeFrom(other.L2NormalizationParam);
      }
      if (other.focalLossParam_ != null) {
        if (focalLossParam_ == null) {
          focalLossParam_ = new global::Caffe.FocalLossParameter();
        }
        FocalLossParam.MergeFrom(other.FocalLossParam);
      }
      if (other.labelSpecificAddParam_ != null) {
        if (labelSpecificAddParam_ == null) {
          labelSpecificAddParam_ = new global::Caffe.LabelSpecificAddParameter();
        }
        LabelSpecificAddParam.MergeFrom(other.LabelSpecificAddParam);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 26: {
            bottom_.AddEntriesFrom(input, _repeated_bottom_codec);
            break;
          }
          case 34: {
            top_.AddEntriesFrom(input, _repeated_top_codec);
            break;
          }
          case 42:
          case 45: {
            lossWeight_.AddEntriesFrom(input, _repeated_lossWeight_codec);
            break;
          }
          case 50: {
            param_.AddEntriesFrom(input, _repeated_param_codec);
            break;
          }
          case 58: {
            blobs_.AddEntriesFrom(input, _repeated_blobs_codec);
            break;
          }
          case 66: {
            include_.AddEntriesFrom(input, _repeated_include_codec);
            break;
          }
          case 74: {
            exclude_.AddEntriesFrom(input, _repeated_exclude_codec);
            break;
          }
          case 80: {
            phase_ = (global::Caffe.Phase) input.ReadEnum();
            break;
          }
          case 90:
          case 88: {
            propagateDown_.AddEntriesFrom(input, _repeated_propagateDown_codec);
            break;
          }
          case 802: {
            if (transformParam_ == null) {
              transformParam_ = new global::Caffe.TransformationParameter();
            }
            input.ReadMessage(transformParam_);
            break;
          }
          case 810: {
            if (lossParam_ == null) {
              lossParam_ = new global::Caffe.LossParameter();
            }
            input.ReadMessage(lossParam_);
            break;
          }
          case 818: {
            if (accuracyParam_ == null) {
              accuracyParam_ = new global::Caffe.AccuracyParameter();
            }
            input.ReadMessage(accuracyParam_);
            break;
          }
          case 826: {
            if (argmaxParam_ == null) {
              argmaxParam_ = new global::Caffe.ArgMaxParameter();
            }
            input.ReadMessage(argmaxParam_);
            break;
          }
          case 834: {
            if (concatParam_ == null) {
              concatParam_ = new global::Caffe.ConcatParameter();
            }
            input.ReadMessage(concatParam_);
            break;
          }
          case 842: {
            if (contrastiveLossParam_ == null) {
              contrastiveLossParam_ = new global::Caffe.ContrastiveLossParameter();
            }
            input.ReadMessage(contrastiveLossParam_);
            break;
          }
          case 850: {
            if (convolutionParam_ == null) {
              convolutionParam_ = new global::Caffe.ConvolutionParameter();
            }
            input.ReadMessage(convolutionParam_);
            break;
          }
          case 858: {
            if (dataParam_ == null) {
              dataParam_ = new global::Caffe.DataParameter();
            }
            input.ReadMessage(dataParam_);
            break;
          }
          case 866: {
            if (dropoutParam_ == null) {
              dropoutParam_ = new global::Caffe.DropoutParameter();
            }
            input.ReadMessage(dropoutParam_);
            break;
          }
          case 874: {
            if (dummyDataParam_ == null) {
              dummyDataParam_ = new global::Caffe.DummyDataParameter();
            }
            input.ReadMessage(dummyDataParam_);
            break;
          }
          case 882: {
            if (eltwiseParam_ == null) {
              eltwiseParam_ = new global::Caffe.EltwiseParameter();
            }
            input.ReadMessage(eltwiseParam_);
            break;
          }
          case 890: {
            if (expParam_ == null) {
              expParam_ = new global::Caffe.ExpParameter();
            }
            input.ReadMessage(expParam_);
            break;
          }
          case 898: {
            if (hdf5DataParam_ == null) {
              hdf5DataParam_ = new global::Caffe.HDF5DataParameter();
            }
            input.ReadMessage(hdf5DataParam_);
            break;
          }
          case 906: {
            if (hdf5OutputParam_ == null) {
              hdf5OutputParam_ = new global::Caffe.HDF5OutputParameter();
            }
            input.ReadMessage(hdf5OutputParam_);
            break;
          }
          case 914: {
            if (hingeLossParam_ == null) {
              hingeLossParam_ = new global::Caffe.HingeLossParameter();
            }
            input.ReadMessage(hingeLossParam_);
            break;
          }
          case 922: {
            if (imageDataParam_ == null) {
              imageDataParam_ = new global::Caffe.ImageDataParameter();
            }
            input.ReadMessage(imageDataParam_);
            break;
          }
          case 930: {
            if (infogainLossParam_ == null) {
              infogainLossParam_ = new global::Caffe.InfogainLossParameter();
            }
            input.ReadMessage(infogainLossParam_);
            break;
          }
          case 938: {
            if (innerProductParam_ == null) {
              innerProductParam_ = new global::Caffe.InnerProductParameter();
            }
            input.ReadMessage(innerProductParam_);
            break;
          }
          case 946: {
            if (lrnParam_ == null) {
              lrnParam_ = new global::Caffe.LRNParameter();
            }
            input.ReadMessage(lrnParam_);
            break;
          }
          case 954: {
            if (memoryDataParam_ == null) {
              memoryDataParam_ = new global::Caffe.MemoryDataParameter();
            }
            input.ReadMessage(memoryDataParam_);
            break;
          }
          case 962: {
            if (mvnParam_ == null) {
              mvnParam_ = new global::Caffe.MVNParameter();
            }
            input.ReadMessage(mvnParam_);
            break;
          }
          case 970: {
            if (poolingParam_ == null) {
              poolingParam_ = new global::Caffe.PoolingParameter();
            }
            input.ReadMessage(poolingParam_);
            break;
          }
          case 978: {
            if (powerParam_ == null) {
              powerParam_ = new global::Caffe.PowerParameter();
            }
            input.ReadMessage(powerParam_);
            break;
          }
          case 986: {
            if (reluParam_ == null) {
              reluParam_ = new global::Caffe.ReLUParameter();
            }
            input.ReadMessage(reluParam_);
            break;
          }
          case 994: {
            if (sigmoidParam_ == null) {
              sigmoidParam_ = new global::Caffe.SigmoidParameter();
            }
            input.ReadMessage(sigmoidParam_);
            break;
          }
          case 1002: {
            if (softmaxParam_ == null) {
              softmaxParam_ = new global::Caffe.SoftmaxParameter();
            }
            input.ReadMessage(softmaxParam_);
            break;
          }
          case 1010: {
            if (sliceParam_ == null) {
              sliceParam_ = new global::Caffe.SliceParameter();
            }
            input.ReadMessage(sliceParam_);
            break;
          }
          case 1018: {
            if (tanhParam_ == null) {
              tanhParam_ = new global::Caffe.TanHParameter();
            }
            input.ReadMessage(tanhParam_);
            break;
          }
          case 1026: {
            if (thresholdParam_ == null) {
              thresholdParam_ = new global::Caffe.ThresholdParameter();
            }
            input.ReadMessage(thresholdParam_);
            break;
          }
          case 1034: {
            if (windowDataParam_ == null) {
              windowDataParam_ = new global::Caffe.WindowDataParameter();
            }
            input.ReadMessage(windowDataParam_);
            break;
          }
          case 1042: {
            if (pythonParam_ == null) {
              pythonParam_ = new global::Caffe.PythonParameter();
            }
            input.ReadMessage(pythonParam_);
            break;
          }
          case 1050: {
            if (preluParam_ == null) {
              preluParam_ = new global::Caffe.PReLUParameter();
            }
            input.ReadMessage(preluParam_);
            break;
          }
          case 1058: {
            if (sppParam_ == null) {
              sppParam_ = new global::Caffe.SPPParameter();
            }
            input.ReadMessage(sppParam_);
            break;
          }
          case 1066: {
            if (reshapeParam_ == null) {
              reshapeParam_ = new global::Caffe.ReshapeParameter();
            }
            input.ReadMessage(reshapeParam_);
            break;
          }
          case 1074: {
            if (logParam_ == null) {
              logParam_ = new global::Caffe.LogParameter();
            }
            input.ReadMessage(logParam_);
            break;
          }
          case 1082: {
            if (flattenParam_ == null) {
              flattenParam_ = new global::Caffe.FlattenParameter();
            }
            input.ReadMessage(flattenParam_);
            break;
          }
          case 1090: {
            if (reductionParam_ == null) {
              reductionParam_ = new global::Caffe.ReductionParameter();
            }
            input.ReadMessage(reductionParam_);
            break;
          }
          case 1098: {
            if (embedParam_ == null) {
              embedParam_ = new global::Caffe.EmbedParameter();
            }
            input.ReadMessage(embedParam_);
            break;
          }
          case 1106: {
            if (tileParam_ == null) {
              tileParam_ = new global::Caffe.TileParameter();
            }
            input.ReadMessage(tileParam_);
            break;
          }
          case 1114: {
            if (batchNormParam_ == null) {
              batchNormParam_ = new global::Caffe.BatchNormParameter();
            }
            input.ReadMessage(batchNormParam_);
            break;
          }
          case 1122: {
            if (eluParam_ == null) {
              eluParam_ = new global::Caffe.ELUParameter();
            }
            input.ReadMessage(eluParam_);
            break;
          }
          case 1130: {
            if (biasParam_ == null) {
              biasParam_ = new global::Caffe.BiasParameter();
            }
            input.ReadMessage(biasParam_);
            break;
          }
          case 1138: {
            if (scaleParam_ == null) {
              scaleParam_ = new global::Caffe.ScaleParameter();
            }
            input.ReadMessage(scaleParam_);
            break;
          }
          case 1146: {
            if (inputParam_ == null) {
              inputParam_ = new global::Caffe.InputParameter();
            }
            input.ReadMessage(inputParam_);
            break;
          }
          case 1154: {
            if (cropParam_ == null) {
              cropParam_ = new global::Caffe.CropParameter();
            }
            input.ReadMessage(cropParam_);
            break;
          }
          case 1162: {
            if (parameterParam_ == null) {
              parameterParam_ = new global::Caffe.ParameterParameter();
            }
            input.ReadMessage(parameterParam_);
            break;
          }
          case 1170: {
            if (recurrentParam_ == null) {
              recurrentParam_ = new global::Caffe.RecurrentParameter();
            }
            input.ReadMessage(recurrentParam_);
            break;
          }
          case 1178: {
            if (swishParam_ == null) {
              swishParam_ = new global::Caffe.SwishParameter();
            }
            input.ReadMessage(swishParam_);
            break;
          }
          case 1186: {
            if (combinedMarginParam_ == null) {
              combinedMarginParam_ = new global::Caffe.CombinedMarginParameter();
            }
            input.ReadMessage(combinedMarginParam_);
            break;
          }
          case 1194: {
            if (cosinAddMParam_ == null) {
              cosinAddMParam_ = new global::Caffe.CosinAddmParameter();
            }
            input.ReadMessage(cosinAddMParam_);
            break;
          }
          case 1202: {
            if (normalizeParam_ == null) {
              normalizeParam_ = new global::Caffe.NormalizeParameter();
            }
            input.ReadMessage(normalizeParam_);
            break;
          }
          case 1210: {
            if (l2NormalizationParam_ == null) {
              l2NormalizationParam_ = new global::Caffe.L2NormalizationParameter();
            }
            input.ReadMessage(l2NormalizationParam_);
            break;
          }
          case 1218: {
            if (focalLossParam_ == null) {
              focalLossParam_ = new global::Caffe.FocalLossParameter();
            }
            input.ReadMessage(focalLossParam_);
            break;
          }
          case 1226: {
            if (labelSpecificAddParam_ == null) {
              labelSpecificAddParam_ = new global::Caffe.LabelSpecificAddParameter();
            }
            input.ReadMessage(labelSpecificAddParam_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used to apply transformation
  /// to the data layer's data
  /// </summary>
  public sealed partial class TransformationParameter : pb::IMessage<TransformationParameter> {
    private static readonly pb::MessageParser<TransformationParameter> _parser = new pb::MessageParser<TransformationParameter>(() => new TransformationParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TransformationParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationParameter(TransformationParameter other) : this() {
      scale_ = other.scale_;
      mirror_ = other.mirror_;
      cropSize_ = other.cropSize_;
      meanFile_ = other.meanFile_;
      meanValue_ = other.meanValue_.Clone();
      forceColor_ = other.forceColor_;
      forceGray_ = other.forceGray_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TransformationParameter Clone() {
      return new TransformationParameter(this);
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 1;
    private float scale_;
    /// <summary>
    /// For data pre-processing, we can do simple scaling and subtracting the
    /// data mean, if provided. Note that the mean subtraction is always carried
    /// out before scaling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "mirror" field.</summary>
    public const int MirrorFieldNumber = 2;
    private bool mirror_;
    /// <summary>
    /// Specify if we want to randomly mirror data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mirror {
      get { return mirror_; }
      set {
        mirror_ = value;
      }
    }

    /// <summary>Field number for the "crop_size" field.</summary>
    public const int CropSizeFieldNumber = 3;
    private uint cropSize_;
    /// <summary>
    /// Specify if we would like to randomly crop an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropSize {
      get { return cropSize_; }
      set {
        cropSize_ = value;
      }
    }

    /// <summary>Field number for the "mean_file" field.</summary>
    public const int MeanFileFieldNumber = 4;
    private string meanFile_ = "";
    /// <summary>
    /// mean_file and mean_value cannot be specified at the same time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeanFile {
      get { return meanFile_; }
      set {
        meanFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "mean_value" field.</summary>
    public const int MeanValueFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_meanValue_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> meanValue_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// if specified can be repeated once (would subtract it from all the channels)
    /// or can be repeated the same number of times as channels
    /// (would subtract them from the corresponding channel)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> MeanValue {
      get { return meanValue_; }
    }

    /// <summary>Field number for the "force_color" field.</summary>
    public const int ForceColorFieldNumber = 6;
    private bool forceColor_;
    /// <summary>
    /// Force the decoded image to have 3 color channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceColor {
      get { return forceColor_; }
      set {
        forceColor_ = value;
      }
    }

    /// <summary>Field number for the "force_gray" field.</summary>
    public const int ForceGrayFieldNumber = 7;
    private bool forceGray_;
    /// <summary>
    /// Force the decoded image to have 1 color channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceGray {
      get { return forceGray_; }
      set {
        forceGray_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TransformationParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TransformationParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (Mirror != other.Mirror) return false;
      if (CropSize != other.CropSize) return false;
      if (MeanFile != other.MeanFile) return false;
      if(!meanValue_.Equals(other.meanValue_)) return false;
      if (ForceColor != other.ForceColor) return false;
      if (ForceGray != other.ForceGray) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (Mirror != false) hash ^= Mirror.GetHashCode();
      if (CropSize != 0) hash ^= CropSize.GetHashCode();
      if (MeanFile.Length != 0) hash ^= MeanFile.GetHashCode();
      hash ^= meanValue_.GetHashCode();
      if (ForceColor != false) hash ^= ForceColor.GetHashCode();
      if (ForceGray != false) hash ^= ForceGray.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Scale != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Scale);
      }
      if (Mirror != false) {
        output.WriteRawTag(16);
        output.WriteBool(Mirror);
      }
      if (CropSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(CropSize);
      }
      if (MeanFile.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(MeanFile);
      }
      meanValue_.WriteTo(output, _repeated_meanValue_codec);
      if (ForceColor != false) {
        output.WriteRawTag(48);
        output.WriteBool(ForceColor);
      }
      if (ForceGray != false) {
        output.WriteRawTag(56);
        output.WriteBool(ForceGray);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Mirror != false) {
        size += 1 + 1;
      }
      if (CropSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropSize);
      }
      if (MeanFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeanFile);
      }
      size += meanValue_.CalculateSize(_repeated_meanValue_codec);
      if (ForceColor != false) {
        size += 1 + 1;
      }
      if (ForceGray != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TransformationParameter other) {
      if (other == null) {
        return;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Mirror != false) {
        Mirror = other.Mirror;
      }
      if (other.CropSize != 0) {
        CropSize = other.CropSize;
      }
      if (other.MeanFile.Length != 0) {
        MeanFile = other.MeanFile;
      }
      meanValue_.Add(other.meanValue_);
      if (other.ForceColor != false) {
        ForceColor = other.ForceColor;
      }
      if (other.ForceGray != false) {
        ForceGray = other.ForceGray;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Scale = input.ReadFloat();
            break;
          }
          case 16: {
            Mirror = input.ReadBool();
            break;
          }
          case 24: {
            CropSize = input.ReadUInt32();
            break;
          }
          case 34: {
            MeanFile = input.ReadString();
            break;
          }
          case 42:
          case 45: {
            meanValue_.AddEntriesFrom(input, _repeated_meanValue_codec);
            break;
          }
          case 48: {
            ForceColor = input.ReadBool();
            break;
          }
          case 56: {
            ForceGray = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters shared by loss layers
  /// </summary>
  public sealed partial class LossParameter : pb::IMessage<LossParameter> {
    private static readonly pb::MessageParser<LossParameter> _parser = new pb::MessageParser<LossParameter>(() => new LossParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LossParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LossParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LossParameter(LossParameter other) : this() {
      ignoreLabel_ = other.ignoreLabel_;
      normalization_ = other.normalization_;
      normalize_ = other.normalize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LossParameter Clone() {
      return new LossParameter(this);
    }

    /// <summary>Field number for the "ignore_label" field.</summary>
    public const int IgnoreLabelFieldNumber = 1;
    private int ignoreLabel_;
    /// <summary>
    /// If specified, ignore instances with the given label.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IgnoreLabel {
      get { return ignoreLabel_; }
      set {
        ignoreLabel_ = value;
      }
    }

    /// <summary>Field number for the "normalization" field.</summary>
    public const int NormalizationFieldNumber = 3;
    private global::Caffe.LossParameter.Types.NormalizationMode normalization_ = 0;
    /// <summary>
    /// For historical reasons, the default normalization for
    /// SigmoidCrossEntropyLoss is BATCH_SIZE and *not* VALID.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.LossParameter.Types.NormalizationMode Normalization {
      get { return normalization_; }
      set {
        normalization_ = value;
      }
    }

    /// <summary>Field number for the "normalize" field.</summary>
    public const int NormalizeFieldNumber = 2;
    private bool normalize_;
    /// <summary>
    /// Deprecated.  Ignored if normalization is specified.  If normalization
    /// is not specified, then setting this to false will be equivalent to
    /// normalization = BATCH_SIZE to be consistent with previous behavior.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Normalize {
      get { return normalize_; }
      set {
        normalize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LossParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LossParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IgnoreLabel != other.IgnoreLabel) return false;
      if (Normalization != other.Normalization) return false;
      if (Normalize != other.Normalize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IgnoreLabel != 0) hash ^= IgnoreLabel.GetHashCode();
      if (Normalization != 0) hash ^= Normalization.GetHashCode();
      if (Normalize != false) hash ^= Normalize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IgnoreLabel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IgnoreLabel);
      }
      if (Normalize != false) {
        output.WriteRawTag(16);
        output.WriteBool(Normalize);
      }
      if (Normalization != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Normalization);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IgnoreLabel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IgnoreLabel);
      }
      if (Normalization != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Normalization);
      }
      if (Normalize != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LossParameter other) {
      if (other == null) {
        return;
      }
      if (other.IgnoreLabel != 0) {
        IgnoreLabel = other.IgnoreLabel;
      }
      if (other.Normalization != 0) {
        Normalization = other.Normalization;
      }
      if (other.Normalize != false) {
        Normalize = other.Normalize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IgnoreLabel = input.ReadInt32();
            break;
          }
          case 16: {
            Normalize = input.ReadBool();
            break;
          }
          case 24: {
            normalization_ = (global::Caffe.LossParameter.Types.NormalizationMode) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LossParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// How to normalize the loss for loss layers that aggregate across batches,
      /// spatial dimensions, or other dimensions.  Currently only implemented in
      /// SoftmaxWithLoss and SigmoidCrossEntropyLoss layers.
      /// </summary>
      public enum NormalizationMode {
        /// <summary>
        /// Divide by the number of examples in the batch times spatial dimensions.
        /// Outputs that receive the ignore label will NOT be ignored in computing
        /// the normalization factor.
        /// </summary>
        [pbr::OriginalName("FULL")] Full = 0,
        /// <summary>
        /// Divide by the total number of output locations that do not take the
        /// ignore_label.  If ignore_label is not set, this behaves like FULL.
        /// </summary>
        [pbr::OriginalName("VALID")] Valid = 1,
        /// <summary>
        /// Divide by the batch size.
        /// </summary>
        [pbr::OriginalName("BATCH_SIZE")] BatchSize = 2,
        /// <summary>
        /// Do not normalize the loss.
        /// </summary>
        [pbr::OriginalName("NONE")] None = 3,
      }

    }
    #endregion

  }

  public sealed partial class AccuracyParameter : pb::IMessage<AccuracyParameter> {
    private static readonly pb::MessageParser<AccuracyParameter> _parser = new pb::MessageParser<AccuracyParameter>(() => new AccuracyParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccuracyParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccuracyParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccuracyParameter(AccuracyParameter other) : this() {
      topK_ = other.topK_;
      axis_ = other.axis_;
      ignoreLabel_ = other.ignoreLabel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccuracyParameter Clone() {
      return new AccuracyParameter(this);
    }

    /// <summary>Field number for the "top_k" field.</summary>
    public const int TopKFieldNumber = 1;
    private uint topK_;
    /// <summary>
    /// When computing accuracy, count as correct by comparing the true label to
    /// the top k scoring classes.  By default, only compare to the top scoring
    /// class (i.e. argmax).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TopK {
      get { return topK_; }
      set {
        topK_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 2;
    private int axis_;
    /// <summary>
    /// The "label" axis of the prediction blob, whose argmax corresponds to the
    /// predicted label -- may be negative to index from the end (e.g., -1 for the
    /// last axis).  For example, if axis == 1 and the predictions are
    /// (N x C x H x W), the label blob is expected to contain N*H*W ground truth
    /// labels with integer values in {0, 1, ..., C-1}.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "ignore_label" field.</summary>
    public const int IgnoreLabelFieldNumber = 3;
    private int ignoreLabel_;
    /// <summary>
    /// If specified, ignore instances with the given label.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IgnoreLabel {
      get { return ignoreLabel_; }
      set {
        ignoreLabel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccuracyParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccuracyParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TopK != other.TopK) return false;
      if (Axis != other.Axis) return false;
      if (IgnoreLabel != other.IgnoreLabel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TopK != 0) hash ^= TopK.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (IgnoreLabel != 0) hash ^= IgnoreLabel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TopK != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(TopK);
      }
      if (Axis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Axis);
      }
      if (IgnoreLabel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(IgnoreLabel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TopK != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TopK);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (IgnoreLabel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IgnoreLabel);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccuracyParameter other) {
      if (other == null) {
        return;
      }
      if (other.TopK != 0) {
        TopK = other.TopK;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.IgnoreLabel != 0) {
        IgnoreLabel = other.IgnoreLabel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TopK = input.ReadUInt32();
            break;
          }
          case 16: {
            Axis = input.ReadInt32();
            break;
          }
          case 24: {
            IgnoreLabel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ArgMaxParameter : pb::IMessage<ArgMaxParameter> {
    private static readonly pb::MessageParser<ArgMaxParameter> _parser = new pb::MessageParser<ArgMaxParameter>(() => new ArgMaxParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ArgMaxParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArgMaxParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArgMaxParameter(ArgMaxParameter other) : this() {
      outMaxVal_ = other.outMaxVal_;
      topK_ = other.topK_;
      axis_ = other.axis_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ArgMaxParameter Clone() {
      return new ArgMaxParameter(this);
    }

    /// <summary>Field number for the "out_max_val" field.</summary>
    public const int OutMaxValFieldNumber = 1;
    private bool outMaxVal_;
    /// <summary>
    /// If true produce pairs (argmax, maxval)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool OutMaxVal {
      get { return outMaxVal_; }
      set {
        outMaxVal_ = value;
      }
    }

    /// <summary>Field number for the "top_k" field.</summary>
    public const int TopKFieldNumber = 2;
    private uint topK_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TopK {
      get { return topK_; }
      set {
        topK_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 3;
    private int axis_;
    /// <summary>
    /// The axis along which to maximise -- may be negative to index from the
    /// end (e.g., -1 for the last axis).
    /// By default ArgMaxLayer maximizes over the flattened trailing dimensions
    /// for each index of the first / num dimension.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ArgMaxParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ArgMaxParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OutMaxVal != other.OutMaxVal) return false;
      if (TopK != other.TopK) return false;
      if (Axis != other.Axis) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OutMaxVal != false) hash ^= OutMaxVal.GetHashCode();
      if (TopK != 0) hash ^= TopK.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OutMaxVal != false) {
        output.WriteRawTag(8);
        output.WriteBool(OutMaxVal);
      }
      if (TopK != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TopK);
      }
      if (Axis != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Axis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OutMaxVal != false) {
        size += 1 + 1;
      }
      if (TopK != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TopK);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ArgMaxParameter other) {
      if (other == null) {
        return;
      }
      if (other.OutMaxVal != false) {
        OutMaxVal = other.OutMaxVal;
      }
      if (other.TopK != 0) {
        TopK = other.TopK;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OutMaxVal = input.ReadBool();
            break;
          }
          case 16: {
            TopK = input.ReadUInt32();
            break;
          }
          case 24: {
            Axis = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConcatParameter : pb::IMessage<ConcatParameter> {
    private static readonly pb::MessageParser<ConcatParameter> _parser = new pb::MessageParser<ConcatParameter>(() => new ConcatParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConcatParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcatParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcatParameter(ConcatParameter other) : this() {
      axis_ = other.axis_;
      concatDim_ = other.concatDim_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConcatParameter Clone() {
      return new ConcatParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 2;
    private int axis_;
    /// <summary>
    /// The axis along which to concatenate -- may be negative to index from the
    /// end (e.g., -1 for the last axis).  Other axes must have the
    /// same dimension for all the bottom blobs.
    /// By default, ConcatLayer concatenates blobs along the "channels" axis (1).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "concat_dim" field.</summary>
    public const int ConcatDimFieldNumber = 1;
    private uint concatDim_;
    /// <summary>
    /// DEPRECATED: alias for "axis" -- does not support negative indexing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConcatDim {
      get { return concatDim_; }
      set {
        concatDim_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConcatParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConcatParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if (ConcatDim != other.ConcatDim) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (ConcatDim != 0) hash ^= ConcatDim.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ConcatDim != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(ConcatDim);
      }
      if (Axis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Axis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (ConcatDim != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ConcatDim);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConcatParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.ConcatDim != 0) {
        ConcatDim = other.ConcatDim;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ConcatDim = input.ReadUInt32();
            break;
          }
          case 16: {
            Axis = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BatchNormParameter : pb::IMessage<BatchNormParameter> {
    private static readonly pb::MessageParser<BatchNormParameter> _parser = new pb::MessageParser<BatchNormParameter>(() => new BatchNormParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BatchNormParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchNormParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchNormParameter(BatchNormParameter other) : this() {
      useGlobalStats_ = other.useGlobalStats_;
      movingAverageFraction_ = other.movingAverageFraction_;
      eps_ = other.eps_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BatchNormParameter Clone() {
      return new BatchNormParameter(this);
    }

    /// <summary>Field number for the "use_global_stats" field.</summary>
    public const int UseGlobalStatsFieldNumber = 1;
    private bool useGlobalStats_;
    /// <summary>
    /// If false, normalization is performed over the current mini-batch
    /// and global statistics are accumulated (but not yet used) by a moving
    /// average.
    /// If true, those accumulated mean and variance values are used for the
    /// normalization.
    /// By default, it is set to false when the network is in the training
    /// phase and true when the network is in the testing phase.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool UseGlobalStats {
      get { return useGlobalStats_; }
      set {
        useGlobalStats_ = value;
      }
    }

    /// <summary>Field number for the "moving_average_fraction" field.</summary>
    public const int MovingAverageFractionFieldNumber = 2;
    private float movingAverageFraction_;
    /// <summary>
    /// What fraction of the moving average remains each iteration?
    /// Smaller values make the moving average decay faster, giving more
    /// weight to the recent values.
    /// Each iteration updates the moving average @f$S_{t-1}@f$ with the
    /// current mean @f$ Y_t @f$ by
    /// @f$ S_t = (1-\beta)Y_t + \beta \cdot S_{t-1} @f$, where @f$ \beta @f$
    /// is the moving_average_fraction parameter.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MovingAverageFraction {
      get { return movingAverageFraction_; }
      set {
        movingAverageFraction_ = value;
      }
    }

    /// <summary>Field number for the "eps" field.</summary>
    public const int EpsFieldNumber = 3;
    private float eps_;
    /// <summary>
    /// Small value to add to the variance estimate so that we don't divide by
    /// zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Eps {
      get { return eps_; }
      set {
        eps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BatchNormParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BatchNormParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UseGlobalStats != other.UseGlobalStats) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(MovingAverageFraction, other.MovingAverageFraction)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Eps, other.Eps)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UseGlobalStats != false) hash ^= UseGlobalStats.GetHashCode();
      if (MovingAverageFraction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(MovingAverageFraction);
      if (Eps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Eps);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UseGlobalStats != false) {
        output.WriteRawTag(8);
        output.WriteBool(UseGlobalStats);
      }
      if (MovingAverageFraction != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(MovingAverageFraction);
      }
      if (Eps != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Eps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UseGlobalStats != false) {
        size += 1 + 1;
      }
      if (MovingAverageFraction != 0F) {
        size += 1 + 4;
      }
      if (Eps != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BatchNormParameter other) {
      if (other == null) {
        return;
      }
      if (other.UseGlobalStats != false) {
        UseGlobalStats = other.UseGlobalStats;
      }
      if (other.MovingAverageFraction != 0F) {
        MovingAverageFraction = other.MovingAverageFraction;
      }
      if (other.Eps != 0F) {
        Eps = other.Eps;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            UseGlobalStats = input.ReadBool();
            break;
          }
          case 21: {
            MovingAverageFraction = input.ReadFloat();
            break;
          }
          case 29: {
            Eps = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BiasParameter : pb::IMessage<BiasParameter> {
    private static readonly pb::MessageParser<BiasParameter> _parser = new pb::MessageParser<BiasParameter>(() => new BiasParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BiasParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiasParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiasParameter(BiasParameter other) : this() {
      axis_ = other.axis_;
      numAxes_ = other.numAxes_;
      filler_ = other.filler_ != null ? other.filler_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BiasParameter Clone() {
      return new BiasParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 1;
    private int axis_;
    /// <summary>
    /// The first axis of bottom[0] (the first input Blob) along which to apply
    /// bottom[1] (the second input Blob).  May be negative to index from the end
    /// (e.g., -1 for the last axis).
    ///
    /// For example, if bottom[0] is 4D with shape 100x3x40x60, the output
    /// top[0] will have the same shape, and bottom[1] may have any of the
    /// following shapes (for the given value of axis):
    ///    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
    ///    (axis == 1 == -3)          3;     3x40;     3x40x60
    ///    (axis == 2 == -2)                   40;       40x60
    ///    (axis == 3 == -1)                                60
    /// Furthermore, bottom[1] may have the empty shape (regardless of the value of
    /// "axis") -- a scalar bias.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "num_axes" field.</summary>
    public const int NumAxesFieldNumber = 2;
    private int numAxes_;
    /// <summary>
    /// (num_axes is ignored unless just one bottom is given and the bias is
    /// a learned parameter of the layer.  Otherwise, num_axes is determined by the
    /// number of axes by the second bottom.)
    /// The number of axes of the input (bottom[0]) covered by the bias
    /// parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
    /// Set num_axes := 0, to add a zero-axis Blob: a scalar.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumAxes {
      get { return numAxes_; }
      set {
        numAxes_ = value;
      }
    }

    /// <summary>Field number for the "filler" field.</summary>
    public const int FillerFieldNumber = 3;
    private global::Caffe.FillerParameter filler_;
    /// <summary>
    /// (filler is ignored unless just one bottom is given and the bias is
    /// a learned parameter of the layer.)
    /// The initialization for the learned bias parameter.
    /// Default is the zero (0) initialization, resulting in the BiasLayer
    /// initially performing the identity operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter Filler {
      get { return filler_; }
      set {
        filler_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BiasParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BiasParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if (NumAxes != other.NumAxes) return false;
      if (!object.Equals(Filler, other.Filler)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (NumAxes != 0) hash ^= NumAxes.GetHashCode();
      if (filler_ != null) hash ^= Filler.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Axis != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Axis);
      }
      if (NumAxes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumAxes);
      }
      if (filler_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Filler);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (NumAxes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumAxes);
      }
      if (filler_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filler);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BiasParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.NumAxes != 0) {
        NumAxes = other.NumAxes;
      }
      if (other.filler_ != null) {
        if (filler_ == null) {
          filler_ = new global::Caffe.FillerParameter();
        }
        Filler.MergeFrom(other.Filler);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Axis = input.ReadInt32();
            break;
          }
          case 16: {
            NumAxes = input.ReadInt32();
            break;
          }
          case 26: {
            if (filler_ == null) {
              filler_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(filler_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContrastiveLossParameter : pb::IMessage<ContrastiveLossParameter> {
    private static readonly pb::MessageParser<ContrastiveLossParameter> _parser = new pb::MessageParser<ContrastiveLossParameter>(() => new ContrastiveLossParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContrastiveLossParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContrastiveLossParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContrastiveLossParameter(ContrastiveLossParameter other) : this() {
      margin_ = other.margin_;
      legacyVersion_ = other.legacyVersion_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContrastiveLossParameter Clone() {
      return new ContrastiveLossParameter(this);
    }

    /// <summary>Field number for the "margin" field.</summary>
    public const int MarginFieldNumber = 1;
    private float margin_;
    /// <summary>
    /// margin for dissimilar pair
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Margin {
      get { return margin_; }
      set {
        margin_ = value;
      }
    }

    /// <summary>Field number for the "legacy_version" field.</summary>
    public const int LegacyVersionFieldNumber = 2;
    private bool legacyVersion_;
    /// <summary>
    /// The first implementation of this cost did not exactly match the cost of
    /// Hadsell et al 2006 -- using (margin - d^2) instead of (margin - d)^2.
    /// legacy_version = false (the default) uses (margin - d)^2 as proposed in the
    /// Hadsell paper. New models should probably use this version.
    /// legacy_version = true uses (margin - d^2). This is kept to support /
    /// reproduce existing models and results
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool LegacyVersion {
      get { return legacyVersion_; }
      set {
        legacyVersion_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContrastiveLossParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContrastiveLossParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Margin, other.Margin)) return false;
      if (LegacyVersion != other.LegacyVersion) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Margin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Margin);
      if (LegacyVersion != false) hash ^= LegacyVersion.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Margin != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Margin);
      }
      if (LegacyVersion != false) {
        output.WriteRawTag(16);
        output.WriteBool(LegacyVersion);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Margin != 0F) {
        size += 1 + 4;
      }
      if (LegacyVersion != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContrastiveLossParameter other) {
      if (other == null) {
        return;
      }
      if (other.Margin != 0F) {
        Margin = other.Margin;
      }
      if (other.LegacyVersion != false) {
        LegacyVersion = other.LegacyVersion;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Margin = input.ReadFloat();
            break;
          }
          case 16: {
            LegacyVersion = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ConvolutionParameter : pb::IMessage<ConvolutionParameter> {
    private static readonly pb::MessageParser<ConvolutionParameter> _parser = new pb::MessageParser<ConvolutionParameter>(() => new ConvolutionParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConvolutionParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionParameter(ConvolutionParameter other) : this() {
      numOutput_ = other.numOutput_;
      biasTerm_ = other.biasTerm_;
      pad_ = other.pad_.Clone();
      kernelSize_ = other.kernelSize_.Clone();
      stride_ = other.stride_.Clone();
      dilation_ = other.dilation_.Clone();
      padH_ = other.padH_;
      padW_ = other.padW_;
      kernelH_ = other.kernelH_;
      kernelW_ = other.kernelW_;
      strideH_ = other.strideH_;
      strideW_ = other.strideW_;
      group_ = other.group_;
      weightFiller_ = other.weightFiller_ != null ? other.weightFiller_.Clone() : null;
      biasFiller_ = other.biasFiller_ != null ? other.biasFiller_.Clone() : null;
      engine_ = other.engine_;
      axis_ = other.axis_;
      forceNdIm2Col_ = other.forceNdIm2Col_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConvolutionParameter Clone() {
      return new ConvolutionParameter(this);
    }

    /// <summary>Field number for the "num_output" field.</summary>
    public const int NumOutputFieldNumber = 1;
    private uint numOutput_;
    /// <summary>
    /// The number of outputs for the layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOutput {
      get { return numOutput_; }
      set {
        numOutput_ = value;
      }
    }

    /// <summary>Field number for the "bias_term" field.</summary>
    public const int BiasTermFieldNumber = 2;
    private bool biasTerm_;
    /// <summary>
    /// whether to have bias terms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BiasTerm {
      get { return biasTerm_; }
      set {
        biasTerm_ = value;
      }
    }

    /// <summary>Field number for the "pad" field.</summary>
    public const int PadFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_pad_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> pad_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Pad, kernel size, and stride are all given as a single value for equal
    /// dimensions in all spatial dimensions, or once per spatial dimension.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Pad {
      get { return pad_; }
    }

    /// <summary>Field number for the "kernel_size" field.</summary>
    public const int KernelSizeFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_kernelSize_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> kernelSize_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// The kernel size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> KernelSize {
      get { return kernelSize_; }
    }

    /// <summary>Field number for the "stride" field.</summary>
    public const int StrideFieldNumber = 6;
    private static readonly pb::FieldCodec<uint> _repeated_stride_codec
        = pb::FieldCodec.ForUInt32(50);
    private readonly pbc::RepeatedField<uint> stride_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// The stride; defaults to 1
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Stride {
      get { return stride_; }
    }

    /// <summary>Field number for the "dilation" field.</summary>
    public const int DilationFieldNumber = 18;
    private static readonly pb::FieldCodec<uint> _repeated_dilation_codec
        = pb::FieldCodec.ForUInt32(146);
    private readonly pbc::RepeatedField<uint> dilation_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// Factor used to dilate the kernel, (implicitly) zero-filling the resulting
    /// holes. (Kernel dilation is sometimes referred to by its use in the
    /// algorithme à trous from Holschneider et al. 1987.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Dilation {
      get { return dilation_; }
    }

    /// <summary>Field number for the "pad_h" field.</summary>
    public const int PadHFieldNumber = 9;
    private uint padH_;
    /// <summary>
    /// For 2D convolution only, the *_h and *_w versions may also be used to
    /// specify both spatial dimensions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PadH {
      get { return padH_; }
      set {
        padH_ = value;
      }
    }

    /// <summary>Field number for the "pad_w" field.</summary>
    public const int PadWFieldNumber = 10;
    private uint padW_;
    /// <summary>
    /// The padding width (2D only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PadW {
      get { return padW_; }
      set {
        padW_ = value;
      }
    }

    /// <summary>Field number for the "kernel_h" field.</summary>
    public const int KernelHFieldNumber = 11;
    private uint kernelH_;
    /// <summary>
    /// The kernel height (2D only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KernelH {
      get { return kernelH_; }
      set {
        kernelH_ = value;
      }
    }

    /// <summary>Field number for the "kernel_w" field.</summary>
    public const int KernelWFieldNumber = 12;
    private uint kernelW_;
    /// <summary>
    /// The kernel width (2D only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KernelW {
      get { return kernelW_; }
      set {
        kernelW_ = value;
      }
    }

    /// <summary>Field number for the "stride_h" field.</summary>
    public const int StrideHFieldNumber = 13;
    private uint strideH_;
    /// <summary>
    /// The stride height (2D only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StrideH {
      get { return strideH_; }
      set {
        strideH_ = value;
      }
    }

    /// <summary>Field number for the "stride_w" field.</summary>
    public const int StrideWFieldNumber = 14;
    private uint strideW_;
    /// <summary>
    /// The stride width (2D only)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StrideW {
      get { return strideW_; }
      set {
        strideW_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 5;
    private uint group_;
    /// <summary>
    /// The group size for group conv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "weight_filler" field.</summary>
    public const int WeightFillerFieldNumber = 7;
    private global::Caffe.FillerParameter weightFiller_;
    /// <summary>
    /// The filler for the weight
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter WeightFiller {
      get { return weightFiller_; }
      set {
        weightFiller_ = value;
      }
    }

    /// <summary>Field number for the "bias_filler" field.</summary>
    public const int BiasFillerFieldNumber = 8;
    private global::Caffe.FillerParameter biasFiller_;
    /// <summary>
    /// The filler for the bias
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter BiasFiller {
      get { return biasFiller_; }
      set {
        biasFiller_ = value;
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 15;
    private global::Caffe.ConvolutionParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ConvolutionParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 16;
    private int axis_;
    /// <summary>
    /// The axis to interpret as "channels" when performing convolution.
    /// Preceding dimensions are treated as independent inputs;
    /// succeeding dimensions are treated as "spatial".
    /// With (N, C, H, W) inputs, and axis == 1 (the default), we perform
    /// N independent 2D convolutions, sliding C-channel (or (C/g)-channels, for
    /// groups g>1) filters across the spatial axes (H, W) of the input.
    /// With (N, C, D, H, W) inputs, and axis == 1, we perform
    /// N independent 3D convolutions, sliding (C/g)-channels
    /// filters across the spatial axes (D, H, W) of the input.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "force_nd_im2col" field.</summary>
    public const int ForceNdIm2ColFieldNumber = 17;
    private bool forceNdIm2Col_;
    /// <summary>
    /// Whether to force use of the general ND convolution, even if a specific
    /// implementation for blobs of the appropriate number of spatial dimensions
    /// is available. (Currently, there is only a 2D-specific convolution
    /// implementation; for input blobs with num_axes != 2, this option is
    /// ignored and the ND implementation will be used.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceNdIm2Col {
      get { return forceNdIm2Col_; }
      set {
        forceNdIm2Col_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConvolutionParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConvolutionParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumOutput != other.NumOutput) return false;
      if (BiasTerm != other.BiasTerm) return false;
      if(!pad_.Equals(other.pad_)) return false;
      if(!kernelSize_.Equals(other.kernelSize_)) return false;
      if(!stride_.Equals(other.stride_)) return false;
      if(!dilation_.Equals(other.dilation_)) return false;
      if (PadH != other.PadH) return false;
      if (PadW != other.PadW) return false;
      if (KernelH != other.KernelH) return false;
      if (KernelW != other.KernelW) return false;
      if (StrideH != other.StrideH) return false;
      if (StrideW != other.StrideW) return false;
      if (Group != other.Group) return false;
      if (!object.Equals(WeightFiller, other.WeightFiller)) return false;
      if (!object.Equals(BiasFiller, other.BiasFiller)) return false;
      if (Engine != other.Engine) return false;
      if (Axis != other.Axis) return false;
      if (ForceNdIm2Col != other.ForceNdIm2Col) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumOutput != 0) hash ^= NumOutput.GetHashCode();
      if (BiasTerm != false) hash ^= BiasTerm.GetHashCode();
      hash ^= pad_.GetHashCode();
      hash ^= kernelSize_.GetHashCode();
      hash ^= stride_.GetHashCode();
      hash ^= dilation_.GetHashCode();
      if (PadH != 0) hash ^= PadH.GetHashCode();
      if (PadW != 0) hash ^= PadW.GetHashCode();
      if (KernelH != 0) hash ^= KernelH.GetHashCode();
      if (KernelW != 0) hash ^= KernelW.GetHashCode();
      if (StrideH != 0) hash ^= StrideH.GetHashCode();
      if (StrideW != 0) hash ^= StrideW.GetHashCode();
      if (Group != 0) hash ^= Group.GetHashCode();
      if (weightFiller_ != null) hash ^= WeightFiller.GetHashCode();
      if (biasFiller_ != null) hash ^= BiasFiller.GetHashCode();
      if (Engine != 0) hash ^= Engine.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (ForceNdIm2Col != false) hash ^= ForceNdIm2Col.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumOutput != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumOutput);
      }
      if (BiasTerm != false) {
        output.WriteRawTag(16);
        output.WriteBool(BiasTerm);
      }
      pad_.WriteTo(output, _repeated_pad_codec);
      kernelSize_.WriteTo(output, _repeated_kernelSize_codec);
      if (Group != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(Group);
      }
      stride_.WriteTo(output, _repeated_stride_codec);
      if (weightFiller_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(WeightFiller);
      }
      if (biasFiller_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(BiasFiller);
      }
      if (PadH != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(PadH);
      }
      if (PadW != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(PadW);
      }
      if (KernelH != 0) {
        output.WriteRawTag(88);
        output.WriteUInt32(KernelH);
      }
      if (KernelW != 0) {
        output.WriteRawTag(96);
        output.WriteUInt32(KernelW);
      }
      if (StrideH != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(StrideH);
      }
      if (StrideW != 0) {
        output.WriteRawTag(112);
        output.WriteUInt32(StrideW);
      }
      if (Engine != 0) {
        output.WriteRawTag(120);
        output.WriteEnum((int) Engine);
      }
      if (Axis != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(Axis);
      }
      if (ForceNdIm2Col != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(ForceNdIm2Col);
      }
      dilation_.WriteTo(output, _repeated_dilation_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOutput);
      }
      if (BiasTerm != false) {
        size += 1 + 1;
      }
      size += pad_.CalculateSize(_repeated_pad_codec);
      size += kernelSize_.CalculateSize(_repeated_kernelSize_codec);
      size += stride_.CalculateSize(_repeated_stride_codec);
      size += dilation_.CalculateSize(_repeated_dilation_codec);
      if (PadH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PadH);
      }
      if (PadW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PadW);
      }
      if (KernelH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KernelH);
      }
      if (KernelW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KernelW);
      }
      if (StrideH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StrideH);
      }
      if (StrideW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StrideW);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Group);
      }
      if (weightFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightFiller);
      }
      if (biasFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiasFiller);
      }
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      if (Axis != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (ForceNdIm2Col != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConvolutionParameter other) {
      if (other == null) {
        return;
      }
      if (other.NumOutput != 0) {
        NumOutput = other.NumOutput;
      }
      if (other.BiasTerm != false) {
        BiasTerm = other.BiasTerm;
      }
      pad_.Add(other.pad_);
      kernelSize_.Add(other.kernelSize_);
      stride_.Add(other.stride_);
      dilation_.Add(other.dilation_);
      if (other.PadH != 0) {
        PadH = other.PadH;
      }
      if (other.PadW != 0) {
        PadW = other.PadW;
      }
      if (other.KernelH != 0) {
        KernelH = other.KernelH;
      }
      if (other.KernelW != 0) {
        KernelW = other.KernelW;
      }
      if (other.StrideH != 0) {
        StrideH = other.StrideH;
      }
      if (other.StrideW != 0) {
        StrideW = other.StrideW;
      }
      if (other.Group != 0) {
        Group = other.Group;
      }
      if (other.weightFiller_ != null) {
        if (weightFiller_ == null) {
          weightFiller_ = new global::Caffe.FillerParameter();
        }
        WeightFiller.MergeFrom(other.WeightFiller);
      }
      if (other.biasFiller_ != null) {
        if (biasFiller_ == null) {
          biasFiller_ = new global::Caffe.FillerParameter();
        }
        BiasFiller.MergeFrom(other.BiasFiller);
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.ForceNdIm2Col != false) {
        ForceNdIm2Col = other.ForceNdIm2Col;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumOutput = input.ReadUInt32();
            break;
          }
          case 16: {
            BiasTerm = input.ReadBool();
            break;
          }
          case 26:
          case 24: {
            pad_.AddEntriesFrom(input, _repeated_pad_codec);
            break;
          }
          case 34:
          case 32: {
            kernelSize_.AddEntriesFrom(input, _repeated_kernelSize_codec);
            break;
          }
          case 40: {
            Group = input.ReadUInt32();
            break;
          }
          case 50:
          case 48: {
            stride_.AddEntriesFrom(input, _repeated_stride_codec);
            break;
          }
          case 58: {
            if (weightFiller_ == null) {
              weightFiller_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(weightFiller_);
            break;
          }
          case 66: {
            if (biasFiller_ == null) {
              biasFiller_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(biasFiller_);
            break;
          }
          case 72: {
            PadH = input.ReadUInt32();
            break;
          }
          case 80: {
            PadW = input.ReadUInt32();
            break;
          }
          case 88: {
            KernelH = input.ReadUInt32();
            break;
          }
          case 96: {
            KernelW = input.ReadUInt32();
            break;
          }
          case 104: {
            StrideH = input.ReadUInt32();
            break;
          }
          case 112: {
            StrideW = input.ReadUInt32();
            break;
          }
          case 120: {
            engine_ = (global::Caffe.ConvolutionParameter.Types.Engine) input.ReadEnum();
            break;
          }
          case 128: {
            Axis = input.ReadInt32();
            break;
          }
          case 136: {
            ForceNdIm2Col = input.ReadBool();
            break;
          }
          case 146:
          case 144: {
            dilation_.AddEntriesFrom(input, _repeated_dilation_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ConvolutionParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  public sealed partial class CropParameter : pb::IMessage<CropParameter> {
    private static readonly pb::MessageParser<CropParameter> _parser = new pb::MessageParser<CropParameter>(() => new CropParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CropParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CropParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CropParameter(CropParameter other) : this() {
      axis_ = other.axis_;
      offset_ = other.offset_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CropParameter Clone() {
      return new CropParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 1;
    private int axis_;
    /// <summary>
    /// To crop, elements of the first bottom are selected to fit the dimensions
    /// of the second, reference bottom. The crop is configured by
    /// - the crop `axis` to pick the dimensions for cropping
    /// - the crop `offset` to set the shift for all/each dimension
    /// to align the cropped bottom with the reference bottom.
    /// All dimensions up to but excluding `axis` are preserved, while
    /// the dimensions including and trailing `axis` are cropped.
    /// If only one `offset` is set, then all dimensions are offset by this amount.
    /// Otherwise, the number of offsets must equal the number of cropped axes to
    /// shift the crop in each dimension accordingly.
    /// Note: standard dimensions are N,C,H,W so the default is a spatial crop,
    /// and `axis` may be negative to index from the end (e.g., -1 for the last
    /// axis).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_offset_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> offset_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Offset {
      get { return offset_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CropParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CropParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if(!offset_.Equals(other.offset_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      hash ^= offset_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Axis != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Axis);
      }
      offset_.WriteTo(output, _repeated_offset_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      size += offset_.CalculateSize(_repeated_offset_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CropParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      offset_.Add(other.offset_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Axis = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            offset_.AddEntriesFrom(input, _repeated_offset_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class DataParameter : pb::IMessage<DataParameter> {
    private static readonly pb::MessageParser<DataParameter> _parser = new pb::MessageParser<DataParameter>(() => new DataParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataParameter(DataParameter other) : this() {
      source_ = other.source_;
      batchSize_ = other.batchSize_;
      randSkip_ = other.randSkip_;
      backend_ = other.backend_;
      scale_ = other.scale_;
      meanFile_ = other.meanFile_;
      cropSize_ = other.cropSize_;
      mirror_ = other.mirror_;
      forceEncodedColor_ = other.forceEncodedColor_;
      prefetch_ = other.prefetch_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataParameter Clone() {
      return new DataParameter(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    /// <summary>
    /// Specify the data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 4;
    private uint batchSize_;
    /// <summary>
    /// Specify the batch size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "rand_skip" field.</summary>
    public const int RandSkipFieldNumber = 7;
    private uint randSkip_;
    /// <summary>
    /// The rand_skip variable is for the data layer to skip a few data points
    /// to avoid all asynchronous sgd clients to start at the same point. The skip
    /// point would be set as rand_skip * rand(0,1). Note that rand_skip should not
    /// be larger than the number of keys in the database.
    /// DEPRECATED. Each solver accesses a different subset of the database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RandSkip {
      get { return randSkip_; }
      set {
        randSkip_ = value;
      }
    }

    /// <summary>Field number for the "backend" field.</summary>
    public const int BackendFieldNumber = 8;
    private global::Caffe.DataParameter.Types.DB backend_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.DataParameter.Types.DB Backend {
      get { return backend_; }
      set {
        backend_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    /// <summary>
    /// DEPRECATED. See TransformationParameter. For data pre-processing, we can do
    /// simple scaling and subtracting the data mean, if provided. Note that the
    /// mean subtraction is always carried out before scaling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "mean_file" field.</summary>
    public const int MeanFileFieldNumber = 3;
    private string meanFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeanFile {
      get { return meanFile_; }
      set {
        meanFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crop_size" field.</summary>
    public const int CropSizeFieldNumber = 5;
    private uint cropSize_;
    /// <summary>
    /// DEPRECATED. See TransformationParameter. Specify if we would like to randomly
    /// crop an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropSize {
      get { return cropSize_; }
      set {
        cropSize_ = value;
      }
    }

    /// <summary>Field number for the "mirror" field.</summary>
    public const int MirrorFieldNumber = 6;
    private bool mirror_;
    /// <summary>
    /// DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
    /// data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mirror {
      get { return mirror_; }
      set {
        mirror_ = value;
      }
    }

    /// <summary>Field number for the "force_encoded_color" field.</summary>
    public const int ForceEncodedColorFieldNumber = 9;
    private bool forceEncodedColor_;
    /// <summary>
    /// Force the encoded image to have 3 color channels
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ForceEncodedColor {
      get { return forceEncodedColor_; }
      set {
        forceEncodedColor_ = value;
      }
    }

    /// <summary>Field number for the "prefetch" field.</summary>
    public const int PrefetchFieldNumber = 10;
    private uint prefetch_;
    /// <summary>
    /// Prefetch queue (Increase if data feeding bandwidth varies, within the
    /// limit of device memory for GPU training)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Prefetch {
      get { return prefetch_; }
      set {
        prefetch_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (BatchSize != other.BatchSize) return false;
      if (RandSkip != other.RandSkip) return false;
      if (Backend != other.Backend) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (MeanFile != other.MeanFile) return false;
      if (CropSize != other.CropSize) return false;
      if (Mirror != other.Mirror) return false;
      if (ForceEncodedColor != other.ForceEncodedColor) return false;
      if (Prefetch != other.Prefetch) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (RandSkip != 0) hash ^= RandSkip.GetHashCode();
      if (Backend != 0) hash ^= Backend.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (MeanFile.Length != 0) hash ^= MeanFile.GetHashCode();
      if (CropSize != 0) hash ^= CropSize.GetHashCode();
      if (Mirror != false) hash ^= Mirror.GetHashCode();
      if (ForceEncodedColor != false) hash ^= ForceEncodedColor.GetHashCode();
      if (Prefetch != 0) hash ^= Prefetch.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (MeanFile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MeanFile);
      }
      if (BatchSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BatchSize);
      }
      if (CropSize != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CropSize);
      }
      if (Mirror != false) {
        output.WriteRawTag(48);
        output.WriteBool(Mirror);
      }
      if (RandSkip != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RandSkip);
      }
      if (Backend != 0) {
        output.WriteRawTag(64);
        output.WriteEnum((int) Backend);
      }
      if (ForceEncodedColor != false) {
        output.WriteRawTag(72);
        output.WriteBool(ForceEncodedColor);
      }
      if (Prefetch != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Prefetch);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      if (RandSkip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandSkip);
      }
      if (Backend != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Backend);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (MeanFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeanFile);
      }
      if (CropSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropSize);
      }
      if (Mirror != false) {
        size += 1 + 1;
      }
      if (ForceEncodedColor != false) {
        size += 1 + 1;
      }
      if (Prefetch != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Prefetch);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DataParameter other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.RandSkip != 0) {
        RandSkip = other.RandSkip;
      }
      if (other.Backend != 0) {
        Backend = other.Backend;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.MeanFile.Length != 0) {
        MeanFile = other.MeanFile;
      }
      if (other.CropSize != 0) {
        CropSize = other.CropSize;
      }
      if (other.Mirror != false) {
        Mirror = other.Mirror;
      }
      if (other.ForceEncodedColor != false) {
        ForceEncodedColor = other.ForceEncodedColor;
      }
      if (other.Prefetch != 0) {
        Prefetch = other.Prefetch;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 26: {
            MeanFile = input.ReadString();
            break;
          }
          case 32: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 40: {
            CropSize = input.ReadUInt32();
            break;
          }
          case 48: {
            Mirror = input.ReadBool();
            break;
          }
          case 56: {
            RandSkip = input.ReadUInt32();
            break;
          }
          case 64: {
            backend_ = (global::Caffe.DataParameter.Types.DB) input.ReadEnum();
            break;
          }
          case 72: {
            ForceEncodedColor = input.ReadBool();
            break;
          }
          case 80: {
            Prefetch = input.ReadUInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the DataParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum DB {
        [pbr::OriginalName("LEVELDB")] Leveldb = 0,
        [pbr::OriginalName("LMDB")] Lmdb = 1,
      }

    }
    #endregion

  }

  public sealed partial class DropoutParameter : pb::IMessage<DropoutParameter> {
    private static readonly pb::MessageParser<DropoutParameter> _parser = new pb::MessageParser<DropoutParameter>(() => new DropoutParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DropoutParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropoutParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropoutParameter(DropoutParameter other) : this() {
      dropoutRatio_ = other.dropoutRatio_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DropoutParameter Clone() {
      return new DropoutParameter(this);
    }

    /// <summary>Field number for the "dropout_ratio" field.</summary>
    public const int DropoutRatioFieldNumber = 1;
    private float dropoutRatio_;
    /// <summary>
    /// dropout ratio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DropoutRatio {
      get { return dropoutRatio_; }
      set {
        dropoutRatio_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DropoutParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DropoutParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DropoutRatio, other.DropoutRatio)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DropoutRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DropoutRatio);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DropoutRatio != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(DropoutRatio);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DropoutRatio != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DropoutParameter other) {
      if (other == null) {
        return;
      }
      if (other.DropoutRatio != 0F) {
        DropoutRatio = other.DropoutRatio;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            DropoutRatio = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// DummyDataLayer fills any number of arbitrarily shaped blobs with random
  /// (or constant) data generated by "Fillers" (see "message FillerParameter").
  /// </summary>
  public sealed partial class DummyDataParameter : pb::IMessage<DummyDataParameter> {
    private static readonly pb::MessageParser<DummyDataParameter> _parser = new pb::MessageParser<DummyDataParameter>(() => new DummyDataParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DummyDataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DummyDataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DummyDataParameter(DummyDataParameter other) : this() {
      dataFiller_ = other.dataFiller_.Clone();
      shape_ = other.shape_.Clone();
      num_ = other.num_.Clone();
      channels_ = other.channels_.Clone();
      height_ = other.height_.Clone();
      width_ = other.width_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DummyDataParameter Clone() {
      return new DummyDataParameter(this);
    }

    /// <summary>Field number for the "data_filler" field.</summary>
    public const int DataFillerFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Caffe.FillerParameter> _repeated_dataFiller_codec
        = pb::FieldCodec.ForMessage(10, global::Caffe.FillerParameter.Parser);
    private readonly pbc::RepeatedField<global::Caffe.FillerParameter> dataFiller_ = new pbc::RepeatedField<global::Caffe.FillerParameter>();
    /// <summary>
    /// This layer produces N >= 1 top blobs.  DummyDataParameter must specify 1 or N
    /// shape fields, and 0, 1 or N data_fillers.
    ///
    /// If 0 data_fillers are specified, ConstantFiller with a value of 0 is used.
    /// If 1 data_filler is specified, it is applied to all top blobs.  If N are
    /// specified, the ith is applied to the ith top blob.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.FillerParameter> DataFiller {
      get { return dataFiller_; }
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Caffe.BlobShape> _repeated_shape_codec
        = pb::FieldCodec.ForMessage(50, global::Caffe.BlobShape.Parser);
    private readonly pbc::RepeatedField<global::Caffe.BlobShape> shape_ = new pbc::RepeatedField<global::Caffe.BlobShape>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.BlobShape> Shape {
      get { return shape_; }
    }

    /// <summary>Field number for the "num" field.</summary>
    public const int NumFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_num_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> num_ = new pbc::RepeatedField<uint>();
    /// <summary>
    /// 4D dimensions -- deprecated.  Use "shape" instead.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Num {
      get { return num_; }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 3;
    private static readonly pb::FieldCodec<uint> _repeated_channels_codec
        = pb::FieldCodec.ForUInt32(26);
    private readonly pbc::RepeatedField<uint> channels_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Channels {
      get { return channels_; }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 4;
    private static readonly pb::FieldCodec<uint> _repeated_height_codec
        = pb::FieldCodec.ForUInt32(34);
    private readonly pbc::RepeatedField<uint> height_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Height {
      get { return height_; }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 5;
    private static readonly pb::FieldCodec<uint> _repeated_width_codec
        = pb::FieldCodec.ForUInt32(42);
    private readonly pbc::RepeatedField<uint> width_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> Width {
      get { return width_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DummyDataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DummyDataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!dataFiller_.Equals(other.dataFiller_)) return false;
      if(!shape_.Equals(other.shape_)) return false;
      if(!num_.Equals(other.num_)) return false;
      if(!channels_.Equals(other.channels_)) return false;
      if(!height_.Equals(other.height_)) return false;
      if(!width_.Equals(other.width_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= dataFiller_.GetHashCode();
      hash ^= shape_.GetHashCode();
      hash ^= num_.GetHashCode();
      hash ^= channels_.GetHashCode();
      hash ^= height_.GetHashCode();
      hash ^= width_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      dataFiller_.WriteTo(output, _repeated_dataFiller_codec);
      num_.WriteTo(output, _repeated_num_codec);
      channels_.WriteTo(output, _repeated_channels_codec);
      height_.WriteTo(output, _repeated_height_codec);
      width_.WriteTo(output, _repeated_width_codec);
      shape_.WriteTo(output, _repeated_shape_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += dataFiller_.CalculateSize(_repeated_dataFiller_codec);
      size += shape_.CalculateSize(_repeated_shape_codec);
      size += num_.CalculateSize(_repeated_num_codec);
      size += channels_.CalculateSize(_repeated_channels_codec);
      size += height_.CalculateSize(_repeated_height_codec);
      size += width_.CalculateSize(_repeated_width_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DummyDataParameter other) {
      if (other == null) {
        return;
      }
      dataFiller_.Add(other.dataFiller_);
      shape_.Add(other.shape_);
      num_.Add(other.num_);
      channels_.Add(other.channels_);
      height_.Add(other.height_);
      width_.Add(other.width_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            dataFiller_.AddEntriesFrom(input, _repeated_dataFiller_codec);
            break;
          }
          case 18:
          case 16: {
            num_.AddEntriesFrom(input, _repeated_num_codec);
            break;
          }
          case 26:
          case 24: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
          case 34:
          case 32: {
            height_.AddEntriesFrom(input, _repeated_height_codec);
            break;
          }
          case 42:
          case 40: {
            width_.AddEntriesFrom(input, _repeated_width_codec);
            break;
          }
          case 50: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class EltwiseParameter : pb::IMessage<EltwiseParameter> {
    private static readonly pb::MessageParser<EltwiseParameter> _parser = new pb::MessageParser<EltwiseParameter>(() => new EltwiseParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EltwiseParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EltwiseParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EltwiseParameter(EltwiseParameter other) : this() {
      operation_ = other.operation_;
      coeff_ = other.coeff_.Clone();
      stableProdGrad_ = other.stableProdGrad_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EltwiseParameter Clone() {
      return new EltwiseParameter(this);
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 1;
    private global::Caffe.EltwiseParameter.Types.EltwiseOp operation_ = 0;
    /// <summary>
    /// element-wise operation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.EltwiseParameter.Types.EltwiseOp Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "coeff" field.</summary>
    public const int CoeffFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_coeff_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> coeff_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// blob-wise coefficient for SUM operation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> Coeff {
      get { return coeff_; }
    }

    /// <summary>Field number for the "stable_prod_grad" field.</summary>
    public const int StableProdGradFieldNumber = 3;
    private bool stableProdGrad_;
    /// <summary>
    /// Whether to use an asymptotically slower (for >2 inputs) but stabler method
    /// of computing the gradient for the PROD operation. (No effect for SUM op.)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool StableProdGrad {
      get { return stableProdGrad_; }
      set {
        stableProdGrad_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EltwiseParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EltwiseParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operation != other.Operation) return false;
      if(!coeff_.Equals(other.coeff_)) return false;
      if (StableProdGrad != other.StableProdGrad) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operation != 0) hash ^= Operation.GetHashCode();
      hash ^= coeff_.GetHashCode();
      if (StableProdGrad != false) hash ^= StableProdGrad.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operation != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operation);
      }
      coeff_.WriteTo(output, _repeated_coeff_codec);
      if (StableProdGrad != false) {
        output.WriteRawTag(24);
        output.WriteBool(StableProdGrad);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operation);
      }
      size += coeff_.CalculateSize(_repeated_coeff_codec);
      if (StableProdGrad != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EltwiseParameter other) {
      if (other == null) {
        return;
      }
      if (other.Operation != 0) {
        Operation = other.Operation;
      }
      coeff_.Add(other.coeff_);
      if (other.StableProdGrad != false) {
        StableProdGrad = other.StableProdGrad;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            operation_ = (global::Caffe.EltwiseParameter.Types.EltwiseOp) input.ReadEnum();
            break;
          }
          case 18:
          case 21: {
            coeff_.AddEntriesFrom(input, _repeated_coeff_codec);
            break;
          }
          case 24: {
            StableProdGrad = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the EltwiseParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum EltwiseOp {
        [pbr::OriginalName("PROD")] Prod = 0,
        [pbr::OriginalName("SUM")] Sum = 1,
        [pbr::OriginalName("MAX")] Max = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Message that stores parameters used by ELULayer
  /// </summary>
  public sealed partial class ELUParameter : pb::IMessage<ELUParameter> {
    private static readonly pb::MessageParser<ELUParameter> _parser = new pb::MessageParser<ELUParameter>(() => new ELUParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ELUParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ELUParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ELUParameter(ELUParameter other) : this() {
      alpha_ = other.alpha_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ELUParameter Clone() {
      return new ELUParameter(this);
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 1;
    private float alpha_;
    /// <summary>
    /// Described in:
    /// Clevert, D.-A., Unterthiner, T., &amp; Hochreiter, S. (2015). Fast and Accurate
    /// Deep Network Learning by Exponential Linear Units (ELUs). arXiv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ELUParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ELUParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Alpha != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Alpha);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ELUParameter other) {
      if (other == null) {
        return;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Alpha = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by EmbedLayer
  /// </summary>
  public sealed partial class EmbedParameter : pb::IMessage<EmbedParameter> {
    private static readonly pb::MessageParser<EmbedParameter> _parser = new pb::MessageParser<EmbedParameter>(() => new EmbedParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EmbedParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbedParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbedParameter(EmbedParameter other) : this() {
      numOutput_ = other.numOutput_;
      inputDim_ = other.inputDim_;
      biasTerm_ = other.biasTerm_;
      weightFiller_ = other.weightFiller_ != null ? other.weightFiller_.Clone() : null;
      biasFiller_ = other.biasFiller_ != null ? other.biasFiller_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EmbedParameter Clone() {
      return new EmbedParameter(this);
    }

    /// <summary>Field number for the "num_output" field.</summary>
    public const int NumOutputFieldNumber = 1;
    private uint numOutput_;
    /// <summary>
    /// The number of outputs for the layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOutput {
      get { return numOutput_; }
      set {
        numOutput_ = value;
      }
    }

    /// <summary>Field number for the "input_dim" field.</summary>
    public const int InputDimFieldNumber = 2;
    private uint inputDim_;
    /// <summary>
    /// The input is given as integers to be interpreted as one-hot
    /// vector indices with dimension num_input.  Hence num_input should be
    /// 1 greater than the maximum possible input value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint InputDim {
      get { return inputDim_; }
      set {
        inputDim_ = value;
      }
    }

    /// <summary>Field number for the "bias_term" field.</summary>
    public const int BiasTermFieldNumber = 3;
    private bool biasTerm_;
    /// <summary>
    /// Whether to use a bias term
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BiasTerm {
      get { return biasTerm_; }
      set {
        biasTerm_ = value;
      }
    }

    /// <summary>Field number for the "weight_filler" field.</summary>
    public const int WeightFillerFieldNumber = 4;
    private global::Caffe.FillerParameter weightFiller_;
    /// <summary>
    /// The filler for the weight
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter WeightFiller {
      get { return weightFiller_; }
      set {
        weightFiller_ = value;
      }
    }

    /// <summary>Field number for the "bias_filler" field.</summary>
    public const int BiasFillerFieldNumber = 5;
    private global::Caffe.FillerParameter biasFiller_;
    /// <summary>
    /// The filler for the bias
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter BiasFiller {
      get { return biasFiller_; }
      set {
        biasFiller_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EmbedParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EmbedParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumOutput != other.NumOutput) return false;
      if (InputDim != other.InputDim) return false;
      if (BiasTerm != other.BiasTerm) return false;
      if (!object.Equals(WeightFiller, other.WeightFiller)) return false;
      if (!object.Equals(BiasFiller, other.BiasFiller)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumOutput != 0) hash ^= NumOutput.GetHashCode();
      if (InputDim != 0) hash ^= InputDim.GetHashCode();
      if (BiasTerm != false) hash ^= BiasTerm.GetHashCode();
      if (weightFiller_ != null) hash ^= WeightFiller.GetHashCode();
      if (biasFiller_ != null) hash ^= BiasFiller.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumOutput != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumOutput);
      }
      if (InputDim != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(InputDim);
      }
      if (BiasTerm != false) {
        output.WriteRawTag(24);
        output.WriteBool(BiasTerm);
      }
      if (weightFiller_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(WeightFiller);
      }
      if (biasFiller_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BiasFiller);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOutput);
      }
      if (InputDim != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(InputDim);
      }
      if (BiasTerm != false) {
        size += 1 + 1;
      }
      if (weightFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightFiller);
      }
      if (biasFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiasFiller);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EmbedParameter other) {
      if (other == null) {
        return;
      }
      if (other.NumOutput != 0) {
        NumOutput = other.NumOutput;
      }
      if (other.InputDim != 0) {
        InputDim = other.InputDim;
      }
      if (other.BiasTerm != false) {
        BiasTerm = other.BiasTerm;
      }
      if (other.weightFiller_ != null) {
        if (weightFiller_ == null) {
          weightFiller_ = new global::Caffe.FillerParameter();
        }
        WeightFiller.MergeFrom(other.WeightFiller);
      }
      if (other.biasFiller_ != null) {
        if (biasFiller_ == null) {
          biasFiller_ = new global::Caffe.FillerParameter();
        }
        BiasFiller.MergeFrom(other.BiasFiller);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumOutput = input.ReadUInt32();
            break;
          }
          case 16: {
            InputDim = input.ReadUInt32();
            break;
          }
          case 24: {
            BiasTerm = input.ReadBool();
            break;
          }
          case 34: {
            if (weightFiller_ == null) {
              weightFiller_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(weightFiller_);
            break;
          }
          case 42: {
            if (biasFiller_ == null) {
              biasFiller_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(biasFiller_);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by ExpLayer
  /// </summary>
  public sealed partial class ExpParameter : pb::IMessage<ExpParameter> {
    private static readonly pb::MessageParser<ExpParameter> _parser = new pb::MessageParser<ExpParameter>(() => new ExpParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExpParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpParameter(ExpParameter other) : this() {
      base_ = other.base_;
      scale_ = other.scale_;
      shift_ = other.shift_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExpParameter Clone() {
      return new ExpParameter(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private float base_;
    /// <summary>
    /// ExpLayer computes outputs y = base ^ (shift + scale * x), for base > 0.
    /// Or if base is set to the default (-1), base is set to e,
    /// so y = exp(shift + scale * x).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "shift" field.</summary>
    public const int ShiftFieldNumber = 3;
    private float shift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shift {
      get { return shift_; }
      set {
        shift_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExpParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExpParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Base, other.Base)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Shift, other.Shift)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Base != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Base);
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (Shift != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Shift);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Base != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Base);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (Shift != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Shift);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Base != 0F) {
        size += 1 + 4;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Shift != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExpParameter other) {
      if (other == null) {
        return;
      }
      if (other.Base != 0F) {
        Base = other.Base;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Shift != 0F) {
        Shift = other.Shift;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Base = input.ReadFloat();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 29: {
            Shift = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  //// Message that stores parameters used by FlattenLayer
  /// </summary>
  public sealed partial class FlattenParameter : pb::IMessage<FlattenParameter> {
    private static readonly pb::MessageParser<FlattenParameter> _parser = new pb::MessageParser<FlattenParameter>(() => new FlattenParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FlattenParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlattenParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlattenParameter(FlattenParameter other) : this() {
      axis_ = other.axis_;
      endAxis_ = other.endAxis_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FlattenParameter Clone() {
      return new FlattenParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 1;
    private int axis_;
    /// <summary>
    /// The first axis to flatten: all preceding axes are retained in the output.
    /// May be negative to index from the end (e.g., -1 for the last axis).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "end_axis" field.</summary>
    public const int EndAxisFieldNumber = 2;
    private int endAxis_;
    /// <summary>
    /// The last axis to flatten: all following axes are retained in the output.
    /// May be negative to index from the end (e.g., the default -1 for the last
    /// axis).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndAxis {
      get { return endAxis_; }
      set {
        endAxis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FlattenParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FlattenParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if (EndAxis != other.EndAxis) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (EndAxis != 0) hash ^= EndAxis.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Axis != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Axis);
      }
      if (EndAxis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EndAxis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (EndAxis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndAxis);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FlattenParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.EndAxis != 0) {
        EndAxis = other.EndAxis;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Axis = input.ReadInt32();
            break;
          }
          case 16: {
            EndAxis = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by HDF5DataLayer
  /// </summary>
  public sealed partial class HDF5DataParameter : pb::IMessage<HDF5DataParameter> {
    private static readonly pb::MessageParser<HDF5DataParameter> _parser = new pb::MessageParser<HDF5DataParameter>(() => new HDF5DataParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HDF5DataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[30]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDF5DataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDF5DataParameter(HDF5DataParameter other) : this() {
      source_ = other.source_;
      batchSize_ = other.batchSize_;
      shuffle_ = other.shuffle_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDF5DataParameter Clone() {
      return new HDF5DataParameter(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    /// <summary>
    /// Specify the data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 2;
    private uint batchSize_;
    /// <summary>
    /// Specify the batch size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "shuffle" field.</summary>
    public const int ShuffleFieldNumber = 3;
    private bool shuffle_;
    /// <summary>
    /// Specify whether to shuffle the data.
    /// If shuffle == true, the ordering of the HDF5 files is shuffled,
    /// and the ordering of data within any given HDF5 file is shuffled,
    /// but data between different files are not interleaved; all of a file's
    /// data are output (in a random order) before moving onto another file.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shuffle {
      get { return shuffle_; }
      set {
        shuffle_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HDF5DataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HDF5DataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (BatchSize != other.BatchSize) return false;
      if (Shuffle != other.Shuffle) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (Shuffle != false) hash ^= Shuffle.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (BatchSize != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(BatchSize);
      }
      if (Shuffle != false) {
        output.WriteRawTag(24);
        output.WriteBool(Shuffle);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      if (Shuffle != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HDF5DataParameter other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.Shuffle != false) {
        Shuffle = other.Shuffle;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
          case 16: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 24: {
            Shuffle = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HDF5OutputParameter : pb::IMessage<HDF5OutputParameter> {
    private static readonly pb::MessageParser<HDF5OutputParameter> _parser = new pb::MessageParser<HDF5OutputParameter>(() => new HDF5OutputParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HDF5OutputParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[31]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDF5OutputParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDF5OutputParameter(HDF5OutputParameter other) : this() {
      fileName_ = other.fileName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HDF5OutputParameter Clone() {
      return new HDF5OutputParameter(this);
    }

    /// <summary>Field number for the "file_name" field.</summary>
    public const int FileNameFieldNumber = 1;
    private string fileName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FileName {
      get { return fileName_; }
      set {
        fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HDF5OutputParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HDF5OutputParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (FileName != other.FileName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (FileName.Length != 0) hash ^= FileName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (FileName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(FileName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (FileName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HDF5OutputParameter other) {
      if (other == null) {
        return;
      }
      if (other.FileName.Length != 0) {
        FileName = other.FileName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            FileName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class HingeLossParameter : pb::IMessage<HingeLossParameter> {
    private static readonly pb::MessageParser<HingeLossParameter> _parser = new pb::MessageParser<HingeLossParameter>(() => new HingeLossParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<HingeLossParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[32]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HingeLossParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HingeLossParameter(HingeLossParameter other) : this() {
      norm_ = other.norm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public HingeLossParameter Clone() {
      return new HingeLossParameter(this);
    }

    /// <summary>Field number for the "norm" field.</summary>
    public const int NormFieldNumber = 1;
    private global::Caffe.HingeLossParameter.Types.Norm norm_ = 0;
    /// <summary>
    /// Specify the Norm to use L1 or L2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.HingeLossParameter.Types.Norm Norm {
      get { return norm_; }
      set {
        norm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as HingeLossParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(HingeLossParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Norm != other.Norm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Norm != 0) hash ^= Norm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Norm != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Norm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Norm != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Norm);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(HingeLossParameter other) {
      if (other == null) {
        return;
      }
      if (other.Norm != 0) {
        Norm = other.Norm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            norm_ = (global::Caffe.HingeLossParameter.Types.Norm) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the HingeLossParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Norm {
        [pbr::OriginalName("INVALID")] Invalid = 0,
        [pbr::OriginalName("L1")] L1 = 1,
        [pbr::OriginalName("L2")] L2 = 2,
      }

    }
    #endregion

  }

  public sealed partial class ImageDataParameter : pb::IMessage<ImageDataParameter> {
    private static readonly pb::MessageParser<ImageDataParameter> _parser = new pb::MessageParser<ImageDataParameter>(() => new ImageDataParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ImageDataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[33]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageDataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageDataParameter(ImageDataParameter other) : this() {
      source_ = other.source_;
      batchSize_ = other.batchSize_;
      randSkip_ = other.randSkip_;
      shuffle_ = other.shuffle_;
      newHeight_ = other.newHeight_;
      newWidth_ = other.newWidth_;
      isColor_ = other.isColor_;
      scale_ = other.scale_;
      meanFile_ = other.meanFile_;
      cropSize_ = other.cropSize_;
      mirror_ = other.mirror_;
      rootFolder_ = other.rootFolder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ImageDataParameter Clone() {
      return new ImageDataParameter(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    /// <summary>
    /// Specify the data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 4;
    private uint batchSize_;
    /// <summary>
    /// Specify the batch size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "rand_skip" field.</summary>
    public const int RandSkipFieldNumber = 7;
    private uint randSkip_;
    /// <summary>
    /// The rand_skip variable is for the data layer to skip a few data points
    /// to avoid all asynchronous sgd clients to start at the same point. The skip
    /// point would be set as rand_skip * rand(0,1). Note that rand_skip should not
    /// be larger than the number of keys in the database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RandSkip {
      get { return randSkip_; }
      set {
        randSkip_ = value;
      }
    }

    /// <summary>Field number for the "shuffle" field.</summary>
    public const int ShuffleFieldNumber = 8;
    private bool shuffle_;
    /// <summary>
    /// Whether or not ImageLayer should shuffle the list of files at every epoch.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Shuffle {
      get { return shuffle_; }
      set {
        shuffle_ = value;
      }
    }

    /// <summary>Field number for the "new_height" field.</summary>
    public const int NewHeightFieldNumber = 9;
    private uint newHeight_;
    /// <summary>
    /// It will also resize images if new_height or new_width are not zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewHeight {
      get { return newHeight_; }
      set {
        newHeight_ = value;
      }
    }

    /// <summary>Field number for the "new_width" field.</summary>
    public const int NewWidthFieldNumber = 10;
    private uint newWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NewWidth {
      get { return newWidth_; }
      set {
        newWidth_ = value;
      }
    }

    /// <summary>Field number for the "is_color" field.</summary>
    public const int IsColorFieldNumber = 11;
    private bool isColor_;
    /// <summary>
    /// Specify if the images are color or gray
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsColor {
      get { return isColor_; }
      set {
        isColor_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    /// <summary>
    /// DEPRECATED. See TransformationParameter. For data pre-processing, we can do
    /// simple scaling and subtracting the data mean, if provided. Note that the
    /// mean subtraction is always carried out before scaling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "mean_file" field.</summary>
    public const int MeanFileFieldNumber = 3;
    private string meanFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeanFile {
      get { return meanFile_; }
      set {
        meanFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "crop_size" field.</summary>
    public const int CropSizeFieldNumber = 5;
    private uint cropSize_;
    /// <summary>
    /// DEPRECATED. See TransformationParameter. Specify if we would like to randomly
    /// crop an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropSize {
      get { return cropSize_; }
      set {
        cropSize_ = value;
      }
    }

    /// <summary>Field number for the "mirror" field.</summary>
    public const int MirrorFieldNumber = 6;
    private bool mirror_;
    /// <summary>
    /// DEPRECATED. See TransformationParameter. Specify if we want to randomly mirror
    /// data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mirror {
      get { return mirror_; }
      set {
        mirror_ = value;
      }
    }

    /// <summary>Field number for the "root_folder" field.</summary>
    public const int RootFolderFieldNumber = 12;
    private string rootFolder_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RootFolder {
      get { return rootFolder_; }
      set {
        rootFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ImageDataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ImageDataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (BatchSize != other.BatchSize) return false;
      if (RandSkip != other.RandSkip) return false;
      if (Shuffle != other.Shuffle) return false;
      if (NewHeight != other.NewHeight) return false;
      if (NewWidth != other.NewWidth) return false;
      if (IsColor != other.IsColor) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (MeanFile != other.MeanFile) return false;
      if (CropSize != other.CropSize) return false;
      if (Mirror != other.Mirror) return false;
      if (RootFolder != other.RootFolder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (RandSkip != 0) hash ^= RandSkip.GetHashCode();
      if (Shuffle != false) hash ^= Shuffle.GetHashCode();
      if (NewHeight != 0) hash ^= NewHeight.GetHashCode();
      if (NewWidth != 0) hash ^= NewWidth.GetHashCode();
      if (IsColor != false) hash ^= IsColor.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (MeanFile.Length != 0) hash ^= MeanFile.GetHashCode();
      if (CropSize != 0) hash ^= CropSize.GetHashCode();
      if (Mirror != false) hash ^= Mirror.GetHashCode();
      if (RootFolder.Length != 0) hash ^= RootFolder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (MeanFile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MeanFile);
      }
      if (BatchSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BatchSize);
      }
      if (CropSize != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CropSize);
      }
      if (Mirror != false) {
        output.WriteRawTag(48);
        output.WriteBool(Mirror);
      }
      if (RandSkip != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(RandSkip);
      }
      if (Shuffle != false) {
        output.WriteRawTag(64);
        output.WriteBool(Shuffle);
      }
      if (NewHeight != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(NewHeight);
      }
      if (NewWidth != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(NewWidth);
      }
      if (IsColor != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsColor);
      }
      if (RootFolder.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(RootFolder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      if (RandSkip != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(RandSkip);
      }
      if (Shuffle != false) {
        size += 1 + 1;
      }
      if (NewHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewHeight);
      }
      if (NewWidth != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NewWidth);
      }
      if (IsColor != false) {
        size += 1 + 1;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (MeanFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeanFile);
      }
      if (CropSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropSize);
      }
      if (Mirror != false) {
        size += 1 + 1;
      }
      if (RootFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RootFolder);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ImageDataParameter other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.RandSkip != 0) {
        RandSkip = other.RandSkip;
      }
      if (other.Shuffle != false) {
        Shuffle = other.Shuffle;
      }
      if (other.NewHeight != 0) {
        NewHeight = other.NewHeight;
      }
      if (other.NewWidth != 0) {
        NewWidth = other.NewWidth;
      }
      if (other.IsColor != false) {
        IsColor = other.IsColor;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.MeanFile.Length != 0) {
        MeanFile = other.MeanFile;
      }
      if (other.CropSize != 0) {
        CropSize = other.CropSize;
      }
      if (other.Mirror != false) {
        Mirror = other.Mirror;
      }
      if (other.RootFolder.Length != 0) {
        RootFolder = other.RootFolder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 26: {
            MeanFile = input.ReadString();
            break;
          }
          case 32: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 40: {
            CropSize = input.ReadUInt32();
            break;
          }
          case 48: {
            Mirror = input.ReadBool();
            break;
          }
          case 56: {
            RandSkip = input.ReadUInt32();
            break;
          }
          case 64: {
            Shuffle = input.ReadBool();
            break;
          }
          case 72: {
            NewHeight = input.ReadUInt32();
            break;
          }
          case 80: {
            NewWidth = input.ReadUInt32();
            break;
          }
          case 88: {
            IsColor = input.ReadBool();
            break;
          }
          case 98: {
            RootFolder = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InfogainLossParameter : pb::IMessage<InfogainLossParameter> {
    private static readonly pb::MessageParser<InfogainLossParameter> _parser = new pb::MessageParser<InfogainLossParameter>(() => new InfogainLossParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InfogainLossParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[34]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfogainLossParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfogainLossParameter(InfogainLossParameter other) : this() {
      source_ = other.source_;
      axis_ = other.axis_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InfogainLossParameter Clone() {
      return new InfogainLossParameter(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    /// <summary>
    /// Specify the infogain matrix source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 2;
    private int axis_;
    /// <summary>
    /// axis of prob
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InfogainLossParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InfogainLossParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (Axis != other.Axis) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (Axis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Axis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InfogainLossParameter other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
          case 16: {
            Axis = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InnerProductParameter : pb::IMessage<InnerProductParameter> {
    private static readonly pb::MessageParser<InnerProductParameter> _parser = new pb::MessageParser<InnerProductParameter>(() => new InnerProductParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InnerProductParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[35]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerProductParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerProductParameter(InnerProductParameter other) : this() {
      numOutput_ = other.numOutput_;
      biasTerm_ = other.biasTerm_;
      weightFiller_ = other.weightFiller_ != null ? other.weightFiller_.Clone() : null;
      biasFiller_ = other.biasFiller_ != null ? other.biasFiller_.Clone() : null;
      axis_ = other.axis_;
      transpose_ = other.transpose_;
      normalize_ = other.normalize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InnerProductParameter Clone() {
      return new InnerProductParameter(this);
    }

    /// <summary>Field number for the "num_output" field.</summary>
    public const int NumOutputFieldNumber = 1;
    private uint numOutput_;
    /// <summary>
    /// The number of outputs for the layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOutput {
      get { return numOutput_; }
      set {
        numOutput_ = value;
      }
    }

    /// <summary>Field number for the "bias_term" field.</summary>
    public const int BiasTermFieldNumber = 2;
    private bool biasTerm_;
    /// <summary>
    /// whether to have bias terms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BiasTerm {
      get { return biasTerm_; }
      set {
        biasTerm_ = value;
      }
    }

    /// <summary>Field number for the "weight_filler" field.</summary>
    public const int WeightFillerFieldNumber = 3;
    private global::Caffe.FillerParameter weightFiller_;
    /// <summary>
    /// The filler for the weight
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter WeightFiller {
      get { return weightFiller_; }
      set {
        weightFiller_ = value;
      }
    }

    /// <summary>Field number for the "bias_filler" field.</summary>
    public const int BiasFillerFieldNumber = 4;
    private global::Caffe.FillerParameter biasFiller_;
    /// <summary>
    /// The filler for the bias
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter BiasFiller {
      get { return biasFiller_; }
      set {
        biasFiller_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 5;
    private int axis_;
    /// <summary>
    /// The first axis to be lumped into a single inner product computation;
    /// all preceding axes are retained in the output.
    /// May be negative to index from the end (e.g., -1 for the last axis).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "transpose" field.</summary>
    public const int TransposeFieldNumber = 6;
    private bool transpose_;
    /// <summary>
    /// Specify whether to transpose the weight matrix or not.
    /// If transpose == true, any operations will be performed on the transpose
    /// of the weight matrix. The weight matrix itself is not going to be transposed
    /// but rather the transfer flag of operations will be toggled accordingly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Transpose {
      get { return transpose_; }
      set {
        transpose_ = value;
      }
    }

    /// <summary>Field number for the "normalize" field.</summary>
    public const int NormalizeFieldNumber = 7;
    private bool normalize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Normalize {
      get { return normalize_; }
      set {
        normalize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InnerProductParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InnerProductParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumOutput != other.NumOutput) return false;
      if (BiasTerm != other.BiasTerm) return false;
      if (!object.Equals(WeightFiller, other.WeightFiller)) return false;
      if (!object.Equals(BiasFiller, other.BiasFiller)) return false;
      if (Axis != other.Axis) return false;
      if (Transpose != other.Transpose) return false;
      if (Normalize != other.Normalize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumOutput != 0) hash ^= NumOutput.GetHashCode();
      if (BiasTerm != false) hash ^= BiasTerm.GetHashCode();
      if (weightFiller_ != null) hash ^= WeightFiller.GetHashCode();
      if (biasFiller_ != null) hash ^= BiasFiller.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (Transpose != false) hash ^= Transpose.GetHashCode();
      if (Normalize != false) hash ^= Normalize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumOutput != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumOutput);
      }
      if (BiasTerm != false) {
        output.WriteRawTag(16);
        output.WriteBool(BiasTerm);
      }
      if (weightFiller_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(WeightFiller);
      }
      if (biasFiller_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(BiasFiller);
      }
      if (Axis != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Axis);
      }
      if (Transpose != false) {
        output.WriteRawTag(48);
        output.WriteBool(Transpose);
      }
      if (Normalize != false) {
        output.WriteRawTag(56);
        output.WriteBool(Normalize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOutput);
      }
      if (BiasTerm != false) {
        size += 1 + 1;
      }
      if (weightFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightFiller);
      }
      if (biasFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiasFiller);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (Transpose != false) {
        size += 1 + 1;
      }
      if (Normalize != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InnerProductParameter other) {
      if (other == null) {
        return;
      }
      if (other.NumOutput != 0) {
        NumOutput = other.NumOutput;
      }
      if (other.BiasTerm != false) {
        BiasTerm = other.BiasTerm;
      }
      if (other.weightFiller_ != null) {
        if (weightFiller_ == null) {
          weightFiller_ = new global::Caffe.FillerParameter();
        }
        WeightFiller.MergeFrom(other.WeightFiller);
      }
      if (other.biasFiller_ != null) {
        if (biasFiller_ == null) {
          biasFiller_ = new global::Caffe.FillerParameter();
        }
        BiasFiller.MergeFrom(other.BiasFiller);
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.Transpose != false) {
        Transpose = other.Transpose;
      }
      if (other.Normalize != false) {
        Normalize = other.Normalize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumOutput = input.ReadUInt32();
            break;
          }
          case 16: {
            BiasTerm = input.ReadBool();
            break;
          }
          case 26: {
            if (weightFiller_ == null) {
              weightFiller_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(weightFiller_);
            break;
          }
          case 34: {
            if (biasFiller_ == null) {
              biasFiller_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(biasFiller_);
            break;
          }
          case 40: {
            Axis = input.ReadInt32();
            break;
          }
          case 48: {
            Transpose = input.ReadBool();
            break;
          }
          case 56: {
            Normalize = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InputParameter : pb::IMessage<InputParameter> {
    private static readonly pb::MessageParser<InputParameter> _parser = new pb::MessageParser<InputParameter>(() => new InputParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InputParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[36]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputParameter(InputParameter other) : this() {
      shape_ = other.shape_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InputParameter Clone() {
      return new InputParameter(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Caffe.BlobShape> _repeated_shape_codec
        = pb::FieldCodec.ForMessage(10, global::Caffe.BlobShape.Parser);
    private readonly pbc::RepeatedField<global::Caffe.BlobShape> shape_ = new pbc::RepeatedField<global::Caffe.BlobShape>();
    /// <summary>
    /// This layer produces N >= 1 top blob(s) to be assigned manually.
    /// Define N shapes to set a shape for each top.
    /// Define 1 shape to set the same shape for every top.
    /// Define no shape to defer to reshaping manually.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.BlobShape> Shape {
      get { return shape_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InputParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InputParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!shape_.Equals(other.shape_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= shape_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      shape_.WriteTo(output, _repeated_shape_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += shape_.CalculateSize(_repeated_shape_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InputParameter other) {
      if (other == null) {
        return;
      }
      shape_.Add(other.shape_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            shape_.AddEntriesFrom(input, _repeated_shape_codec);
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by LogLayer
  /// </summary>
  public sealed partial class LogParameter : pb::IMessage<LogParameter> {
    private static readonly pb::MessageParser<LogParameter> _parser = new pb::MessageParser<LogParameter>(() => new LogParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[37]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogParameter(LogParameter other) : this() {
      base_ = other.base_;
      scale_ = other.scale_;
      shift_ = other.shift_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogParameter Clone() {
      return new LogParameter(this);
    }

    /// <summary>Field number for the "base" field.</summary>
    public const int BaseFieldNumber = 1;
    private float base_;
    /// <summary>
    /// LogLayer computes outputs y = log_base(shift + scale * x), for base > 0.
    /// Or if base is set to the default (-1), base is set to e,
    /// so y = ln(shift + scale * x) = log_e(shift + scale * x)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Base {
      get { return base_; }
      set {
        base_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "shift" field.</summary>
    public const int ShiftFieldNumber = 3;
    private float shift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shift {
      get { return shift_; }
      set {
        shift_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Base, other.Base)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Shift, other.Shift)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Base != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Base);
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (Shift != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Shift);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Base != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Base);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (Shift != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Shift);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Base != 0F) {
        size += 1 + 4;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Shift != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogParameter other) {
      if (other == null) {
        return;
      }
      if (other.Base != 0F) {
        Base = other.Base;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Shift != 0F) {
        Shift = other.Shift;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Base = input.ReadFloat();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 29: {
            Shift = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by LRNLayer
  /// </summary>
  public sealed partial class LRNParameter : pb::IMessage<LRNParameter> {
    private static readonly pb::MessageParser<LRNParameter> _parser = new pb::MessageParser<LRNParameter>(() => new LRNParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LRNParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[38]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRNParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRNParameter(LRNParameter other) : this() {
      localSize_ = other.localSize_;
      alpha_ = other.alpha_;
      beta_ = other.beta_;
      normRegion_ = other.normRegion_;
      k_ = other.k_;
      engine_ = other.engine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LRNParameter Clone() {
      return new LRNParameter(this);
    }

    /// <summary>Field number for the "local_size" field.</summary>
    public const int LocalSizeFieldNumber = 1;
    private uint localSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LocalSize {
      get { return localSize_; }
      set {
        localSize_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 2;
    private float alpha_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 3;
    private float beta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "norm_region" field.</summary>
    public const int NormRegionFieldNumber = 4;
    private global::Caffe.LRNParameter.Types.NormRegion normRegion_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.LRNParameter.Types.NormRegion NormRegion {
      get { return normRegion_; }
      set {
        normRegion_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 5;
    private float k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 6;
    private global::Caffe.LRNParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.LRNParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LRNParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LRNParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LocalSize != other.LocalSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      if (NormRegion != other.NormRegion) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(K, other.K)) return false;
      if (Engine != other.Engine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (LocalSize != 0) hash ^= LocalSize.GetHashCode();
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (NormRegion != 0) hash ^= NormRegion.GetHashCode();
      if (K != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(K);
      if (Engine != 0) hash ^= Engine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (LocalSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(LocalSize);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Alpha);
      }
      if (Beta != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Beta);
      }
      if (NormRegion != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) NormRegion);
      }
      if (K != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(K);
      }
      if (Engine != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Engine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (LocalSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LocalSize);
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (Beta != 0F) {
        size += 1 + 4;
      }
      if (NormRegion != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) NormRegion);
      }
      if (K != 0F) {
        size += 1 + 4;
      }
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LRNParameter other) {
      if (other == null) {
        return;
      }
      if (other.LocalSize != 0) {
        LocalSize = other.LocalSize;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      if (other.NormRegion != 0) {
        NormRegion = other.NormRegion;
      }
      if (other.K != 0F) {
        K = other.K;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LocalSize = input.ReadUInt32();
            break;
          }
          case 21: {
            Alpha = input.ReadFloat();
            break;
          }
          case 29: {
            Beta = input.ReadFloat();
            break;
          }
          case 32: {
            normRegion_ = (global::Caffe.LRNParameter.Types.NormRegion) input.ReadEnum();
            break;
          }
          case 45: {
            K = input.ReadFloat();
            break;
          }
          case 48: {
            engine_ = (global::Caffe.LRNParameter.Types.Engine) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the LRNParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum NormRegion {
        [pbr::OriginalName("ACROSS_CHANNELS")] AcrossChannels = 0,
        [pbr::OriginalName("WITHIN_CHANNEL")] WithinChannel = 1,
      }

      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  public sealed partial class MemoryDataParameter : pb::IMessage<MemoryDataParameter> {
    private static readonly pb::MessageParser<MemoryDataParameter> _parser = new pb::MessageParser<MemoryDataParameter>(() => new MemoryDataParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MemoryDataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[39]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryDataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryDataParameter(MemoryDataParameter other) : this() {
      batchSize_ = other.batchSize_;
      channels_ = other.channels_;
      height_ = other.height_;
      width_ = other.width_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MemoryDataParameter Clone() {
      return new MemoryDataParameter(this);
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 1;
    private uint batchSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 2;
    private uint channels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Channels {
      get { return channels_; }
      set {
        channels_ = value;
      }
    }

    /// <summary>Field number for the "height" field.</summary>
    public const int HeightFieldNumber = 3;
    private uint height_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 4;
    private uint width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MemoryDataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MemoryDataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BatchSize != other.BatchSize) return false;
      if (Channels != other.Channels) return false;
      if (Height != other.Height) return false;
      if (Width != other.Width) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (Channels != 0) hash ^= Channels.GetHashCode();
      if (Height != 0) hash ^= Height.GetHashCode();
      if (Width != 0) hash ^= Width.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BatchSize != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(BatchSize);
      }
      if (Channels != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Channels);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Height);
      }
      if (Width != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Width);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      if (Channels != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Channels);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Height);
      }
      if (Width != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Width);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MemoryDataParameter other) {
      if (other == null) {
        return;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.Channels != 0) {
        Channels = other.Channels;
      }
      if (other.Height != 0) {
        Height = other.Height;
      }
      if (other.Width != 0) {
        Width = other.Width;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 16: {
            Channels = input.ReadUInt32();
            break;
          }
          case 24: {
            Height = input.ReadUInt32();
            break;
          }
          case 32: {
            Width = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class MVNParameter : pb::IMessage<MVNParameter> {
    private static readonly pb::MessageParser<MVNParameter> _parser = new pb::MessageParser<MVNParameter>(() => new MVNParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MVNParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[40]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MVNParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MVNParameter(MVNParameter other) : this() {
      normalizeVariance_ = other.normalizeVariance_;
      acrossChannels_ = other.acrossChannels_;
      eps_ = other.eps_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MVNParameter Clone() {
      return new MVNParameter(this);
    }

    /// <summary>Field number for the "normalize_variance" field.</summary>
    public const int NormalizeVarianceFieldNumber = 1;
    private bool normalizeVariance_;
    /// <summary>
    /// This parameter can be set to false to normalize mean only
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool NormalizeVariance {
      get { return normalizeVariance_; }
      set {
        normalizeVariance_ = value;
      }
    }

    /// <summary>Field number for the "across_channels" field.</summary>
    public const int AcrossChannelsFieldNumber = 2;
    private bool acrossChannels_;
    /// <summary>
    /// This parameter can be set to true to perform DNN-like MVN
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool AcrossChannels {
      get { return acrossChannels_; }
      set {
        acrossChannels_ = value;
      }
    }

    /// <summary>Field number for the "eps" field.</summary>
    public const int EpsFieldNumber = 3;
    private float eps_;
    /// <summary>
    /// Epsilon for not dividing by zero while normalizing variance
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Eps {
      get { return eps_; }
      set {
        eps_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MVNParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MVNParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NormalizeVariance != other.NormalizeVariance) return false;
      if (AcrossChannels != other.AcrossChannels) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Eps, other.Eps)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NormalizeVariance != false) hash ^= NormalizeVariance.GetHashCode();
      if (AcrossChannels != false) hash ^= AcrossChannels.GetHashCode();
      if (Eps != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Eps);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NormalizeVariance != false) {
        output.WriteRawTag(8);
        output.WriteBool(NormalizeVariance);
      }
      if (AcrossChannels != false) {
        output.WriteRawTag(16);
        output.WriteBool(AcrossChannels);
      }
      if (Eps != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Eps);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NormalizeVariance != false) {
        size += 1 + 1;
      }
      if (AcrossChannels != false) {
        size += 1 + 1;
      }
      if (Eps != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MVNParameter other) {
      if (other == null) {
        return;
      }
      if (other.NormalizeVariance != false) {
        NormalizeVariance = other.NormalizeVariance;
      }
      if (other.AcrossChannels != false) {
        AcrossChannels = other.AcrossChannels;
      }
      if (other.Eps != 0F) {
        Eps = other.Eps;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NormalizeVariance = input.ReadBool();
            break;
          }
          case 16: {
            AcrossChannels = input.ReadBool();
            break;
          }
          case 29: {
            Eps = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ParameterParameter : pb::IMessage<ParameterParameter> {
    private static readonly pb::MessageParser<ParameterParameter> _parser = new pb::MessageParser<ParameterParameter>(() => new ParameterParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ParameterParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[41]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterParameter(ParameterParameter other) : this() {
      shape_ = other.shape_ != null ? other.shape_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ParameterParameter Clone() {
      return new ParameterParameter(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::Caffe.BlobShape shape_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.BlobShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ParameterParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ParameterParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Shape, other.Shape)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shape_ != null) hash ^= Shape.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shape_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Shape);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ParameterParameter other) {
      if (other == null) {
        return;
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          shape_ = new global::Caffe.BlobShape();
        }
        Shape.MergeFrom(other.Shape);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (shape_ == null) {
              shape_ = new global::Caffe.BlobShape();
            }
            input.ReadMessage(shape_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PoolingParameter : pb::IMessage<PoolingParameter> {
    private static readonly pb::MessageParser<PoolingParameter> _parser = new pb::MessageParser<PoolingParameter>(() => new PoolingParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PoolingParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[42]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolingParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolingParameter(PoolingParameter other) : this() {
      pool_ = other.pool_;
      pad_ = other.pad_;
      padH_ = other.padH_;
      padW_ = other.padW_;
      kernelSize_ = other.kernelSize_;
      kernelH_ = other.kernelH_;
      kernelW_ = other.kernelW_;
      stride_ = other.stride_;
      strideH_ = other.strideH_;
      strideW_ = other.strideW_;
      engine_ = other.engine_;
      globalPooling_ = other.globalPooling_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PoolingParameter Clone() {
      return new PoolingParameter(this);
    }

    /// <summary>Field number for the "pool" field.</summary>
    public const int PoolFieldNumber = 1;
    private global::Caffe.PoolingParameter.Types.PoolMethod pool_ = 0;
    /// <summary>
    /// The pooling method
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.PoolingParameter.Types.PoolMethod Pool {
      get { return pool_; }
      set {
        pool_ = value;
      }
    }

    /// <summary>Field number for the "pad" field.</summary>
    public const int PadFieldNumber = 4;
    private uint pad_;
    /// <summary>
    /// Pad, kernel size, and stride are all given as a single value for equal
    /// dimensions in height and width or as Y, X pairs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pad {
      get { return pad_; }
      set {
        pad_ = value;
      }
    }

    /// <summary>Field number for the "pad_h" field.</summary>
    public const int PadHFieldNumber = 9;
    private uint padH_;
    /// <summary>
    /// The padding height
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PadH {
      get { return padH_; }
      set {
        padH_ = value;
      }
    }

    /// <summary>Field number for the "pad_w" field.</summary>
    public const int PadWFieldNumber = 10;
    private uint padW_;
    /// <summary>
    /// The padding width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PadW {
      get { return padW_; }
      set {
        padW_ = value;
      }
    }

    /// <summary>Field number for the "kernel_size" field.</summary>
    public const int KernelSizeFieldNumber = 2;
    private uint kernelSize_;
    /// <summary>
    /// The kernel size (square)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KernelSize {
      get { return kernelSize_; }
      set {
        kernelSize_ = value;
      }
    }

    /// <summary>Field number for the "kernel_h" field.</summary>
    public const int KernelHFieldNumber = 5;
    private uint kernelH_;
    /// <summary>
    /// The kernel height
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KernelH {
      get { return kernelH_; }
      set {
        kernelH_ = value;
      }
    }

    /// <summary>Field number for the "kernel_w" field.</summary>
    public const int KernelWFieldNumber = 6;
    private uint kernelW_;
    /// <summary>
    /// The kernel width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint KernelW {
      get { return kernelW_; }
      set {
        kernelW_ = value;
      }
    }

    /// <summary>Field number for the "stride" field.</summary>
    public const int StrideFieldNumber = 3;
    private uint stride_;
    /// <summary>
    /// The stride (equal in Y, X)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stride {
      get { return stride_; }
      set {
        stride_ = value;
      }
    }

    /// <summary>Field number for the "stride_h" field.</summary>
    public const int StrideHFieldNumber = 7;
    private uint strideH_;
    /// <summary>
    /// The stride height
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StrideH {
      get { return strideH_; }
      set {
        strideH_ = value;
      }
    }

    /// <summary>Field number for the "stride_w" field.</summary>
    public const int StrideWFieldNumber = 8;
    private uint strideW_;
    /// <summary>
    /// The stride width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint StrideW {
      get { return strideW_; }
      set {
        strideW_ = value;
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 11;
    private global::Caffe.PoolingParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.PoolingParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    /// <summary>Field number for the "global_pooling" field.</summary>
    public const int GlobalPoolingFieldNumber = 12;
    private bool globalPooling_;
    /// <summary>
    /// If global_pooling then it will pool over the size of the bottom by doing
    /// kernel_h = bottom->height and kernel_w = bottom->width
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool GlobalPooling {
      get { return globalPooling_; }
      set {
        globalPooling_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PoolingParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PoolingParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pool != other.Pool) return false;
      if (Pad != other.Pad) return false;
      if (PadH != other.PadH) return false;
      if (PadW != other.PadW) return false;
      if (KernelSize != other.KernelSize) return false;
      if (KernelH != other.KernelH) return false;
      if (KernelW != other.KernelW) return false;
      if (Stride != other.Stride) return false;
      if (StrideH != other.StrideH) return false;
      if (StrideW != other.StrideW) return false;
      if (Engine != other.Engine) return false;
      if (GlobalPooling != other.GlobalPooling) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pool != 0) hash ^= Pool.GetHashCode();
      if (Pad != 0) hash ^= Pad.GetHashCode();
      if (PadH != 0) hash ^= PadH.GetHashCode();
      if (PadW != 0) hash ^= PadW.GetHashCode();
      if (KernelSize != 0) hash ^= KernelSize.GetHashCode();
      if (KernelH != 0) hash ^= KernelH.GetHashCode();
      if (KernelW != 0) hash ^= KernelW.GetHashCode();
      if (Stride != 0) hash ^= Stride.GetHashCode();
      if (StrideH != 0) hash ^= StrideH.GetHashCode();
      if (StrideW != 0) hash ^= StrideW.GetHashCode();
      if (Engine != 0) hash ^= Engine.GetHashCode();
      if (GlobalPooling != false) hash ^= GlobalPooling.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Pool != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Pool);
      }
      if (KernelSize != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(KernelSize);
      }
      if (Stride != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(Stride);
      }
      if (Pad != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(Pad);
      }
      if (KernelH != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(KernelH);
      }
      if (KernelW != 0) {
        output.WriteRawTag(48);
        output.WriteUInt32(KernelW);
      }
      if (StrideH != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(StrideH);
      }
      if (StrideW != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(StrideW);
      }
      if (PadH != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(PadH);
      }
      if (PadW != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(PadW);
      }
      if (Engine != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Engine);
      }
      if (GlobalPooling != false) {
        output.WriteRawTag(96);
        output.WriteBool(GlobalPooling);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pool != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pool);
      }
      if (Pad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pad);
      }
      if (PadH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PadH);
      }
      if (PadW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PadW);
      }
      if (KernelSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KernelSize);
      }
      if (KernelH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KernelH);
      }
      if (KernelW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KernelW);
      }
      if (Stride != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stride);
      }
      if (StrideH != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StrideH);
      }
      if (StrideW != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StrideW);
      }
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      if (GlobalPooling != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PoolingParameter other) {
      if (other == null) {
        return;
      }
      if (other.Pool != 0) {
        Pool = other.Pool;
      }
      if (other.Pad != 0) {
        Pad = other.Pad;
      }
      if (other.PadH != 0) {
        PadH = other.PadH;
      }
      if (other.PadW != 0) {
        PadW = other.PadW;
      }
      if (other.KernelSize != 0) {
        KernelSize = other.KernelSize;
      }
      if (other.KernelH != 0) {
        KernelH = other.KernelH;
      }
      if (other.KernelW != 0) {
        KernelW = other.KernelW;
      }
      if (other.Stride != 0) {
        Stride = other.Stride;
      }
      if (other.StrideH != 0) {
        StrideH = other.StrideH;
      }
      if (other.StrideW != 0) {
        StrideW = other.StrideW;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
      if (other.GlobalPooling != false) {
        GlobalPooling = other.GlobalPooling;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            pool_ = (global::Caffe.PoolingParameter.Types.PoolMethod) input.ReadEnum();
            break;
          }
          case 16: {
            KernelSize = input.ReadUInt32();
            break;
          }
          case 24: {
            Stride = input.ReadUInt32();
            break;
          }
          case 32: {
            Pad = input.ReadUInt32();
            break;
          }
          case 40: {
            KernelH = input.ReadUInt32();
            break;
          }
          case 48: {
            KernelW = input.ReadUInt32();
            break;
          }
          case 56: {
            StrideH = input.ReadUInt32();
            break;
          }
          case 64: {
            StrideW = input.ReadUInt32();
            break;
          }
          case 72: {
            PadH = input.ReadUInt32();
            break;
          }
          case 80: {
            PadW = input.ReadUInt32();
            break;
          }
          case 88: {
            engine_ = (global::Caffe.PoolingParameter.Types.Engine) input.ReadEnum();
            break;
          }
          case 96: {
            GlobalPooling = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PoolingParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PoolMethod {
        [pbr::OriginalName("MAX")] Max = 0,
        [pbr::OriginalName("AVE")] Ave = 1,
        [pbr::OriginalName("STOCHASTIC")] Stochastic = 2,
      }

      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  public sealed partial class PowerParameter : pb::IMessage<PowerParameter> {
    private static readonly pb::MessageParser<PowerParameter> _parser = new pb::MessageParser<PowerParameter>(() => new PowerParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PowerParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[43]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerParameter(PowerParameter other) : this() {
      power_ = other.power_;
      scale_ = other.scale_;
      shift_ = other.shift_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PowerParameter Clone() {
      return new PowerParameter(this);
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 1;
    private float power_;
    /// <summary>
    /// PowerLayer computes outputs y = (shift + scale * x) ^ power.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "shift" field.</summary>
    public const int ShiftFieldNumber = 3;
    private float shift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Shift {
      get { return shift_; }
      set {
        shift_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PowerParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PowerParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Power, other.Power)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Shift, other.Shift)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Power != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Power);
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (Shift != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Shift);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Power != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Power);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (Shift != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Shift);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Power != 0F) {
        size += 1 + 4;
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (Shift != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PowerParameter other) {
      if (other == null) {
        return;
      }
      if (other.Power != 0F) {
        Power = other.Power;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Shift != 0F) {
        Shift = other.Shift;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Power = input.ReadFloat();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 29: {
            Shift = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PythonParameter : pb::IMessage<PythonParameter> {
    private static readonly pb::MessageParser<PythonParameter> _parser = new pb::MessageParser<PythonParameter>(() => new PythonParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PythonParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[44]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PythonParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PythonParameter(PythonParameter other) : this() {
      module_ = other.module_;
      layer_ = other.layer_;
      paramStr_ = other.paramStr_;
      shareInParallel_ = other.shareInParallel_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PythonParameter Clone() {
      return new PythonParameter(this);
    }

    /// <summary>Field number for the "module" field.</summary>
    public const int ModuleFieldNumber = 1;
    private string module_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Module {
      get { return module_; }
      set {
        module_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 2;
    private string layer_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Layer {
      get { return layer_; }
      set {
        layer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "param_str" field.</summary>
    public const int ParamStrFieldNumber = 3;
    private string paramStr_ = "";
    /// <summary>
    /// This value is set to the attribute `param_str` of the `PythonLayer` object
    /// in Python before calling the `setup()` method. This could be a number,
    /// string, dictionary in Python dict format, JSON, etc. You may parse this
    /// string in `setup` method and use it in `forward` and `backward`.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParamStr {
      get { return paramStr_; }
      set {
        paramStr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "share_in_parallel" field.</summary>
    public const int ShareInParallelFieldNumber = 4;
    private bool shareInParallel_;
    /// <summary>
    /// DEPRECATED
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShareInParallel {
      get { return shareInParallel_; }
      set {
        shareInParallel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PythonParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PythonParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Module != other.Module) return false;
      if (Layer != other.Layer) return false;
      if (ParamStr != other.ParamStr) return false;
      if (ShareInParallel != other.ShareInParallel) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Module.Length != 0) hash ^= Module.GetHashCode();
      if (Layer.Length != 0) hash ^= Layer.GetHashCode();
      if (ParamStr.Length != 0) hash ^= ParamStr.GetHashCode();
      if (ShareInParallel != false) hash ^= ShareInParallel.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Module.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Module);
      }
      if (Layer.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Layer);
      }
      if (ParamStr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParamStr);
      }
      if (ShareInParallel != false) {
        output.WriteRawTag(32);
        output.WriteBool(ShareInParallel);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Module.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Module);
      }
      if (Layer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Layer);
      }
      if (ParamStr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParamStr);
      }
      if (ShareInParallel != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PythonParameter other) {
      if (other == null) {
        return;
      }
      if (other.Module.Length != 0) {
        Module = other.Module;
      }
      if (other.Layer.Length != 0) {
        Layer = other.Layer;
      }
      if (other.ParamStr.Length != 0) {
        ParamStr = other.ParamStr;
      }
      if (other.ShareInParallel != false) {
        ShareInParallel = other.ShareInParallel;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Module = input.ReadString();
            break;
          }
          case 18: {
            Layer = input.ReadString();
            break;
          }
          case 26: {
            ParamStr = input.ReadString();
            break;
          }
          case 32: {
            ShareInParallel = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by RecurrentLayer
  /// </summary>
  public sealed partial class RecurrentParameter : pb::IMessage<RecurrentParameter> {
    private static readonly pb::MessageParser<RecurrentParameter> _parser = new pb::MessageParser<RecurrentParameter>(() => new RecurrentParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RecurrentParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[45]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecurrentParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecurrentParameter(RecurrentParameter other) : this() {
      numOutput_ = other.numOutput_;
      weightFiller_ = other.weightFiller_ != null ? other.weightFiller_.Clone() : null;
      biasFiller_ = other.biasFiller_ != null ? other.biasFiller_.Clone() : null;
      debugInfo_ = other.debugInfo_;
      exposeHidden_ = other.exposeHidden_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RecurrentParameter Clone() {
      return new RecurrentParameter(this);
    }

    /// <summary>Field number for the "num_output" field.</summary>
    public const int NumOutputFieldNumber = 1;
    private uint numOutput_;
    /// <summary>
    /// The dimension of the output (and usually hidden state) representation --
    /// must be explicitly set to non-zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOutput {
      get { return numOutput_; }
      set {
        numOutput_ = value;
      }
    }

    /// <summary>Field number for the "weight_filler" field.</summary>
    public const int WeightFillerFieldNumber = 2;
    private global::Caffe.FillerParameter weightFiller_;
    /// <summary>
    /// The filler for the weight
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter WeightFiller {
      get { return weightFiller_; }
      set {
        weightFiller_ = value;
      }
    }

    /// <summary>Field number for the "bias_filler" field.</summary>
    public const int BiasFillerFieldNumber = 3;
    private global::Caffe.FillerParameter biasFiller_;
    /// <summary>
    /// The filler for the bias
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter BiasFiller {
      get { return biasFiller_; }
      set {
        biasFiller_ = value;
      }
    }

    /// <summary>Field number for the "debug_info" field.</summary>
    public const int DebugInfoFieldNumber = 4;
    private bool debugInfo_;
    /// <summary>
    /// Whether to enable displaying debug_info in the unrolled recurrent net.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DebugInfo {
      get { return debugInfo_; }
      set {
        debugInfo_ = value;
      }
    }

    /// <summary>Field number for the "expose_hidden" field.</summary>
    public const int ExposeHiddenFieldNumber = 5;
    private bool exposeHidden_;
    /// <summary>
    /// Whether to add as additional inputs (bottoms) the initial hidden state
    /// blobs, and add as additional outputs (tops) the final timestep hidden state
    /// blobs.  The number of additional bottom/top blobs required depends on the
    /// recurrent architecture -- e.g., 1 for RNNs, 2 for LSTMs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ExposeHidden {
      get { return exposeHidden_; }
      set {
        exposeHidden_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RecurrentParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RecurrentParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NumOutput != other.NumOutput) return false;
      if (!object.Equals(WeightFiller, other.WeightFiller)) return false;
      if (!object.Equals(BiasFiller, other.BiasFiller)) return false;
      if (DebugInfo != other.DebugInfo) return false;
      if (ExposeHidden != other.ExposeHidden) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NumOutput != 0) hash ^= NumOutput.GetHashCode();
      if (weightFiller_ != null) hash ^= WeightFiller.GetHashCode();
      if (biasFiller_ != null) hash ^= BiasFiller.GetHashCode();
      if (DebugInfo != false) hash ^= DebugInfo.GetHashCode();
      if (ExposeHidden != false) hash ^= ExposeHidden.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NumOutput != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(NumOutput);
      }
      if (weightFiller_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(WeightFiller);
      }
      if (biasFiller_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BiasFiller);
      }
      if (DebugInfo != false) {
        output.WriteRawTag(32);
        output.WriteBool(DebugInfo);
      }
      if (ExposeHidden != false) {
        output.WriteRawTag(40);
        output.WriteBool(ExposeHidden);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NumOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOutput);
      }
      if (weightFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightFiller);
      }
      if (biasFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiasFiller);
      }
      if (DebugInfo != false) {
        size += 1 + 1;
      }
      if (ExposeHidden != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RecurrentParameter other) {
      if (other == null) {
        return;
      }
      if (other.NumOutput != 0) {
        NumOutput = other.NumOutput;
      }
      if (other.weightFiller_ != null) {
        if (weightFiller_ == null) {
          weightFiller_ = new global::Caffe.FillerParameter();
        }
        WeightFiller.MergeFrom(other.WeightFiller);
      }
      if (other.biasFiller_ != null) {
        if (biasFiller_ == null) {
          biasFiller_ = new global::Caffe.FillerParameter();
        }
        BiasFiller.MergeFrom(other.BiasFiller);
      }
      if (other.DebugInfo != false) {
        DebugInfo = other.DebugInfo;
      }
      if (other.ExposeHidden != false) {
        ExposeHidden = other.ExposeHidden;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            NumOutput = input.ReadUInt32();
            break;
          }
          case 18: {
            if (weightFiller_ == null) {
              weightFiller_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(weightFiller_);
            break;
          }
          case 26: {
            if (biasFiller_ == null) {
              biasFiller_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(biasFiller_);
            break;
          }
          case 32: {
            DebugInfo = input.ReadBool();
            break;
          }
          case 40: {
            ExposeHidden = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by ReductionLayer
  /// </summary>
  public sealed partial class ReductionParameter : pb::IMessage<ReductionParameter> {
    private static readonly pb::MessageParser<ReductionParameter> _parser = new pb::MessageParser<ReductionParameter>(() => new ReductionParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReductionParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[46]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReductionParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReductionParameter(ReductionParameter other) : this() {
      operation_ = other.operation_;
      axis_ = other.axis_;
      coeff_ = other.coeff_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReductionParameter Clone() {
      return new ReductionParameter(this);
    }

    /// <summary>Field number for the "operation" field.</summary>
    public const int OperationFieldNumber = 1;
    private global::Caffe.ReductionParameter.Types.ReductionOp operation_ = 0;
    /// <summary>
    /// reduction operation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ReductionParameter.Types.ReductionOp Operation {
      get { return operation_; }
      set {
        operation_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 2;
    private int axis_;
    /// <summary>
    /// The first axis to reduce to a scalar -- may be negative to index from the
    /// end (e.g., -1 for the last axis).
    /// (Currently, only reduction along ALL "tail" axes is supported; reduction
    /// of axis M through N, where N &lt; num_axes - 1, is unsupported.)
    /// Suppose we have an n-axis bottom Blob with shape:
    ///     (d0, d1, d2, ..., d(m-1), dm, d(m+1), ..., d(n-1)).
    /// If axis == m, the output Blob will have shape
    ///     (d0, d1, d2, ..., d(m-1)),
    /// and the ReductionOp operation is performed (d0 * d1 * d2 * ... * d(m-1))
    /// times, each including (dm * d(m+1) * ... * d(n-1)) individual data.
    /// If axis == 0 (the default), the output Blob always has the empty shape
    /// (count 1), performing reduction across the entire input --
    /// often useful for creating new loss functions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "coeff" field.</summary>
    public const int CoeffFieldNumber = 3;
    private float coeff_;
    /// <summary>
    /// coefficient for output
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Coeff {
      get { return coeff_; }
      set {
        coeff_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReductionParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReductionParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Operation != other.Operation) return false;
      if (Axis != other.Axis) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Coeff, other.Coeff)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Operation != 0) hash ^= Operation.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (Coeff != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Coeff);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Operation != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Operation);
      }
      if (Axis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Axis);
      }
      if (Coeff != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Coeff);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Operation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Operation);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (Coeff != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReductionParameter other) {
      if (other == null) {
        return;
      }
      if (other.Operation != 0) {
        Operation = other.Operation;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.Coeff != 0F) {
        Coeff = other.Coeff;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            operation_ = (global::Caffe.ReductionParameter.Types.ReductionOp) input.ReadEnum();
            break;
          }
          case 16: {
            Axis = input.ReadInt32();
            break;
          }
          case 29: {
            Coeff = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReductionParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum ReductionOp {
        [pbr::OriginalName("INVALID")] Invalid = 0,
        [pbr::OriginalName("SUM")] Sum = 1,
        [pbr::OriginalName("ASUM")] Asum = 2,
        [pbr::OriginalName("SUMSQ")] Sumsq = 3,
        [pbr::OriginalName("MEAN")] Mean = 4,
      }

    }
    #endregion

  }

  /// <summary>
  /// Message that stores parameters used by ReLULayer
  /// </summary>
  public sealed partial class ReLUParameter : pb::IMessage<ReLUParameter> {
    private static readonly pb::MessageParser<ReLUParameter> _parser = new pb::MessageParser<ReLUParameter>(() => new ReLUParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReLUParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[47]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReLUParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReLUParameter(ReLUParameter other) : this() {
      negativeSlope_ = other.negativeSlope_;
      engine_ = other.engine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReLUParameter Clone() {
      return new ReLUParameter(this);
    }

    /// <summary>Field number for the "negative_slope" field.</summary>
    public const int NegativeSlopeFieldNumber = 1;
    private float negativeSlope_;
    /// <summary>
    /// Allow non-zero slope for negative inputs to speed up optimization
    /// Described in:
    /// Maas, A. L., Hannun, A. Y., &amp; Ng, A. Y. (2013). Rectifier nonlinearities
    /// improve neural network acoustic models. In ICML Workshop on Deep Learning
    /// for Audio, Speech, and Language Processing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NegativeSlope {
      get { return negativeSlope_; }
      set {
        negativeSlope_ = value;
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 2;
    private global::Caffe.ReLUParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ReLUParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReLUParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReLUParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(NegativeSlope, other.NegativeSlope)) return false;
      if (Engine != other.Engine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NegativeSlope != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(NegativeSlope);
      if (Engine != 0) hash ^= Engine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NegativeSlope != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(NegativeSlope);
      }
      if (Engine != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Engine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NegativeSlope != 0F) {
        size += 1 + 4;
      }
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReLUParameter other) {
      if (other == null) {
        return;
      }
      if (other.NegativeSlope != 0F) {
        NegativeSlope = other.NegativeSlope;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            NegativeSlope = input.ReadFloat();
            break;
          }
          case 16: {
            engine_ = (global::Caffe.ReLUParameter.Types.Engine) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the ReLUParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  public sealed partial class ReshapeParameter : pb::IMessage<ReshapeParameter> {
    private static readonly pb::MessageParser<ReshapeParameter> _parser = new pb::MessageParser<ReshapeParameter>(() => new ReshapeParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReshapeParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[48]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReshapeParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReshapeParameter(ReshapeParameter other) : this() {
      shape_ = other.shape_ != null ? other.shape_.Clone() : null;
      axis_ = other.axis_;
      numAxes_ = other.numAxes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReshapeParameter Clone() {
      return new ReshapeParameter(this);
    }

    /// <summary>Field number for the "shape" field.</summary>
    public const int ShapeFieldNumber = 1;
    private global::Caffe.BlobShape shape_;
    /// <summary>
    /// Specify the output dimensions. If some of the dimensions are set to 0,
    /// the corresponding dimension from the bottom layer is used (unchanged).
    /// Exactly one dimension may be set to -1, in which case its value is
    /// inferred from the count of the bottom blob and the remaining dimensions.
    /// For example, suppose we want to reshape a 2D blob "input" with shape 2 x 8:
    ///
    ///   layer {
    ///     type: "Reshape" bottom: "input" top: "output"
    ///     reshape_param { ... }
    ///   }
    ///
    /// If "input" is 2D with shape 2 x 8, then the following reshape_param
    /// specifications are all equivalent, producing a 3D blob "output" with shape
    /// 2 x 2 x 4:
    ///
    ///   reshape_param { shape { dim:  2  dim: 2  dim:  4 } }
    ///   reshape_param { shape { dim:  0  dim: 2  dim:  4 } }
    ///   reshape_param { shape { dim:  0  dim: 2  dim: -1 } }
    ///   reshape_param { shape { dim:  0  dim:-1  dim:  4 } }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.BlobShape Shape {
      get { return shape_; }
      set {
        shape_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 2;
    private int axis_;
    /// <summary>
    /// axis and num_axes control the portion of the bottom blob's shape that are
    /// replaced by (included in) the reshape. By default (axis == 0 and
    /// num_axes == -1), the entire bottom blob shape is included in the reshape,
    /// and hence the shape field must specify the entire output shape.
    ///
    /// axis may be non-zero to retain some portion of the beginning of the input
    /// shape (and may be negative to index from the end; e.g., -1 to begin the
    /// reshape after the last axis, including nothing in the reshape,
    /// -2 to include only the last axis, etc.).
    ///
    /// For example, suppose "input" is a 2D blob with shape 2 x 8.
    /// Then the following ReshapeLayer specifications are all equivalent,
    /// producing a blob "output" with shape 2 x 2 x 4:
    ///
    ///   reshape_param { shape { dim: 2  dim: 2  dim: 4 } }
    ///   reshape_param { shape { dim: 2  dim: 4 } axis:  1 }
    ///   reshape_param { shape { dim: 2  dim: 4 } axis: -3 }
    ///
    /// num_axes specifies the extent of the reshape.
    /// If num_axes >= 0 (and axis >= 0), the reshape will be performed only on
    /// input axes in the range [axis, axis+num_axes].
    /// num_axes may also be -1, the default, to include all remaining axes
    /// (starting from axis).
    ///
    /// For example, suppose "input" is a 2D blob with shape 2 x 8.
    /// Then the following ReshapeLayer specifications are equivalent,
    /// producing a blob "output" with shape 1 x 2 x 8.
    ///
    ///   reshape_param { shape { dim:  1  dim: 2  dim:  8 } }
    ///   reshape_param { shape { dim:  1  dim: 2  }  num_axes: 1 }
    ///   reshape_param { shape { dim:  1  }  num_axes: 0 }
    ///
    /// On the other hand, these would produce output blob shape 2 x 1 x 8:
    ///
    ///   reshape_param { shape { dim: 2  dim: 1  dim: 8  }  }
    ///   reshape_param { shape { dim: 1 }  axis: 1  num_axes: 0 }
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "num_axes" field.</summary>
    public const int NumAxesFieldNumber = 3;
    private int numAxes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumAxes {
      get { return numAxes_; }
      set {
        numAxes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReshapeParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReshapeParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Shape, other.Shape)) return false;
      if (Axis != other.Axis) return false;
      if (NumAxes != other.NumAxes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (shape_ != null) hash ^= Shape.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (NumAxes != 0) hash ^= NumAxes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (shape_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Shape);
      }
      if (Axis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Axis);
      }
      if (NumAxes != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(NumAxes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (shape_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Shape);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (NumAxes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumAxes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReshapeParameter other) {
      if (other == null) {
        return;
      }
      if (other.shape_ != null) {
        if (shape_ == null) {
          shape_ = new global::Caffe.BlobShape();
        }
        Shape.MergeFrom(other.Shape);
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.NumAxes != 0) {
        NumAxes = other.NumAxes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (shape_ == null) {
              shape_ = new global::Caffe.BlobShape();
            }
            input.ReadMessage(shape_);
            break;
          }
          case 16: {
            Axis = input.ReadInt32();
            break;
          }
          case 24: {
            NumAxes = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ScaleParameter : pb::IMessage<ScaleParameter> {
    private static readonly pb::MessageParser<ScaleParameter> _parser = new pb::MessageParser<ScaleParameter>(() => new ScaleParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ScaleParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[49]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScaleParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScaleParameter(ScaleParameter other) : this() {
      axis_ = other.axis_;
      numAxes_ = other.numAxes_;
      filler_ = other.filler_ != null ? other.filler_.Clone() : null;
      biasTerm_ = other.biasTerm_;
      biasFiller_ = other.biasFiller_ != null ? other.biasFiller_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ScaleParameter Clone() {
      return new ScaleParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 1;
    private int axis_;
    /// <summary>
    /// The first axis of bottom[0] (the first input Blob) along which to apply
    /// bottom[1] (the second input Blob).  May be negative to index from the end
    /// (e.g., -1 for the last axis).
    ///
    /// For example, if bottom[0] is 4D with shape 100x3x40x60, the output
    /// top[0] will have the same shape, and bottom[1] may have any of the
    /// following shapes (for the given value of axis):
    ///    (axis == 0 == -4) 100; 100x3; 100x3x40; 100x3x40x60
    ///    (axis == 1 == -3)          3;     3x40;     3x40x60
    ///    (axis == 2 == -2)                   40;       40x60
    ///    (axis == 3 == -1)                                60
    /// Furthermore, bottom[1] may have the empty shape (regardless of the value of
    /// "axis") -- a scalar multiplier.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "num_axes" field.</summary>
    public const int NumAxesFieldNumber = 2;
    private int numAxes_;
    /// <summary>
    /// (num_axes is ignored unless just one bottom is given and the scale is
    /// a learned parameter of the layer.  Otherwise, num_axes is determined by the
    /// number of axes by the second bottom.)
    /// The number of axes of the input (bottom[0]) covered by the scale
    /// parameter, or -1 to cover all axes of bottom[0] starting from `axis`.
    /// Set num_axes := 0, to multiply with a zero-axis Blob: a scalar.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumAxes {
      get { return numAxes_; }
      set {
        numAxes_ = value;
      }
    }

    /// <summary>Field number for the "filler" field.</summary>
    public const int FillerFieldNumber = 3;
    private global::Caffe.FillerParameter filler_;
    /// <summary>
    /// (filler is ignored unless just one bottom is given and the scale is
    /// a learned parameter of the layer.)
    /// The initialization for the learned scale parameter.
    /// Default is the unit (1) initialization, resulting in the ScaleLayer
    /// initially performing the identity operation.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter Filler {
      get { return filler_; }
      set {
        filler_ = value;
      }
    }

    /// <summary>Field number for the "bias_term" field.</summary>
    public const int BiasTermFieldNumber = 4;
    private bool biasTerm_;
    /// <summary>
    /// Whether to also learn a bias (equivalent to a ScaleLayer+BiasLayer, but
    /// may be more efficient).  Initialized with bias_filler (defaults to 0).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BiasTerm {
      get { return biasTerm_; }
      set {
        biasTerm_ = value;
      }
    }

    /// <summary>Field number for the "bias_filler" field.</summary>
    public const int BiasFillerFieldNumber = 5;
    private global::Caffe.FillerParameter biasFiller_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter BiasFiller {
      get { return biasFiller_; }
      set {
        biasFiller_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ScaleParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ScaleParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if (NumAxes != other.NumAxes) return false;
      if (!object.Equals(Filler, other.Filler)) return false;
      if (BiasTerm != other.BiasTerm) return false;
      if (!object.Equals(BiasFiller, other.BiasFiller)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (NumAxes != 0) hash ^= NumAxes.GetHashCode();
      if (filler_ != null) hash ^= Filler.GetHashCode();
      if (BiasTerm != false) hash ^= BiasTerm.GetHashCode();
      if (biasFiller_ != null) hash ^= BiasFiller.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Axis != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Axis);
      }
      if (NumAxes != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(NumAxes);
      }
      if (filler_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Filler);
      }
      if (BiasTerm != false) {
        output.WriteRawTag(32);
        output.WriteBool(BiasTerm);
      }
      if (biasFiller_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(BiasFiller);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (NumAxes != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumAxes);
      }
      if (filler_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filler);
      }
      if (BiasTerm != false) {
        size += 1 + 1;
      }
      if (biasFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiasFiller);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ScaleParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.NumAxes != 0) {
        NumAxes = other.NumAxes;
      }
      if (other.filler_ != null) {
        if (filler_ == null) {
          filler_ = new global::Caffe.FillerParameter();
        }
        Filler.MergeFrom(other.Filler);
      }
      if (other.BiasTerm != false) {
        BiasTerm = other.BiasTerm;
      }
      if (other.biasFiller_ != null) {
        if (biasFiller_ == null) {
          biasFiller_ = new global::Caffe.FillerParameter();
        }
        BiasFiller.MergeFrom(other.BiasFiller);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Axis = input.ReadInt32();
            break;
          }
          case 16: {
            NumAxes = input.ReadInt32();
            break;
          }
          case 26: {
            if (filler_ == null) {
              filler_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(filler_);
            break;
          }
          case 32: {
            BiasTerm = input.ReadBool();
            break;
          }
          case 42: {
            if (biasFiller_ == null) {
              biasFiller_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(biasFiller_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class SigmoidParameter : pb::IMessage<SigmoidParameter> {
    private static readonly pb::MessageParser<SigmoidParameter> _parser = new pb::MessageParser<SigmoidParameter>(() => new SigmoidParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SigmoidParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[50]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidParameter(SigmoidParameter other) : this() {
      engine_ = other.engine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SigmoidParameter Clone() {
      return new SigmoidParameter(this);
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 1;
    private global::Caffe.SigmoidParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SigmoidParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SigmoidParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SigmoidParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Engine != other.Engine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Engine != 0) hash ^= Engine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Engine != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Engine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SigmoidParameter other) {
      if (other == null) {
        return;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            engine_ = (global::Caffe.SigmoidParameter.Types.Engine) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SigmoidParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  public sealed partial class SliceParameter : pb::IMessage<SliceParameter> {
    private static readonly pb::MessageParser<SliceParameter> _parser = new pb::MessageParser<SliceParameter>(() => new SliceParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SliceParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[51]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceParameter(SliceParameter other) : this() {
      axis_ = other.axis_;
      slicePoint_ = other.slicePoint_.Clone();
      sliceDim_ = other.sliceDim_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SliceParameter Clone() {
      return new SliceParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 3;
    private int axis_;
    /// <summary>
    /// The axis along which to slice -- may be negative to index from the end
    /// (e.g., -1 for the last axis).
    /// By default, SliceLayer concatenates blobs along the "channels" axis (1).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "slice_point" field.</summary>
    public const int SlicePointFieldNumber = 2;
    private static readonly pb::FieldCodec<uint> _repeated_slicePoint_codec
        = pb::FieldCodec.ForUInt32(18);
    private readonly pbc::RepeatedField<uint> slicePoint_ = new pbc::RepeatedField<uint>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> SlicePoint {
      get { return slicePoint_; }
    }

    /// <summary>Field number for the "slice_dim" field.</summary>
    public const int SliceDimFieldNumber = 1;
    private uint sliceDim_;
    /// <summary>
    /// DEPRECATED: alias for "axis" -- does not support negative indexing.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint SliceDim {
      get { return sliceDim_; }
      set {
        sliceDim_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SliceParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SliceParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if(!slicePoint_.Equals(other.slicePoint_)) return false;
      if (SliceDim != other.SliceDim) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      hash ^= slicePoint_.GetHashCode();
      if (SliceDim != 0) hash ^= SliceDim.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SliceDim != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(SliceDim);
      }
      slicePoint_.WriteTo(output, _repeated_slicePoint_codec);
      if (Axis != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Axis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      size += slicePoint_.CalculateSize(_repeated_slicePoint_codec);
      if (SliceDim != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SliceDim);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SliceParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      slicePoint_.Add(other.slicePoint_);
      if (other.SliceDim != 0) {
        SliceDim = other.SliceDim;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SliceDim = input.ReadUInt32();
            break;
          }
          case 18:
          case 16: {
            slicePoint_.AddEntriesFrom(input, _repeated_slicePoint_codec);
            break;
          }
          case 24: {
            Axis = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by SoftmaxLayer, SoftmaxWithLossLayer
  /// </summary>
  public sealed partial class SoftmaxParameter : pb::IMessage<SoftmaxParameter> {
    private static readonly pb::MessageParser<SoftmaxParameter> _parser = new pb::MessageParser<SoftmaxParameter>(() => new SoftmaxParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SoftmaxParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[52]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftmaxParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftmaxParameter(SoftmaxParameter other) : this() {
      engine_ = other.engine_;
      axis_ = other.axis_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SoftmaxParameter Clone() {
      return new SoftmaxParameter(this);
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 1;
    private global::Caffe.SoftmaxParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SoftmaxParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 2;
    private int axis_;
    /// <summary>
    /// The axis along which to perform the softmax -- may be negative to index
    /// from the end (e.g., -1 for the last axis).
    /// Any other axes will be evaluated as independent softmaxes.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SoftmaxParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SoftmaxParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Engine != other.Engine) return false;
      if (Axis != other.Axis) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Engine != 0) hash ^= Engine.GetHashCode();
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Engine != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Engine);
      }
      if (Axis != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Axis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SoftmaxParameter other) {
      if (other == null) {
        return;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            engine_ = (global::Caffe.SoftmaxParameter.Types.Engine) input.ReadEnum();
            break;
          }
          case 16: {
            Axis = input.ReadInt32();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SoftmaxParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Message that stores parameters used by SwishLayer
  /// </summary>
  public sealed partial class SwishParameter : pb::IMessage<SwishParameter> {
    private static readonly pb::MessageParser<SwishParameter> _parser = new pb::MessageParser<SwishParameter>(() => new SwishParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SwishParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[53]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwishParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwishParameter(SwishParameter other) : this() {
      beta_ = other.beta_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SwishParameter Clone() {
      return new SwishParameter(this);
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 1;
    private float beta_;
    /// <summary>
    /// Beta parameter for the Swish activation function
    /// Described in:
    /// Prajit Ramachandran, Barret Zoph, Quoc V. Le. (2017). Searching for
    /// Activation Functions. https://arxiv.org/abs/1710.05941v2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SwishParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SwishParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Beta != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Beta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Beta != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SwishParameter other) {
      if (other == null) {
        return;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Beta = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TanHParameter : pb::IMessage<TanHParameter> {
    private static readonly pb::MessageParser<TanHParameter> _parser = new pb::MessageParser<TanHParameter>(() => new TanHParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TanHParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[54]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TanHParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TanHParameter(TanHParameter other) : this() {
      engine_ = other.engine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TanHParameter Clone() {
      return new TanHParameter(this);
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 1;
    private global::Caffe.TanHParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.TanHParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TanHParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TanHParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Engine != other.Engine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Engine != 0) hash ^= Engine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Engine != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Engine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TanHParameter other) {
      if (other == null) {
        return;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            engine_ = (global::Caffe.TanHParameter.Types.Engine) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TanHParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Message that stores parameters used by TileLayer
  /// </summary>
  public sealed partial class TileParameter : pb::IMessage<TileParameter> {
    private static readonly pb::MessageParser<TileParameter> _parser = new pb::MessageParser<TileParameter>(() => new TileParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TileParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[55]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileParameter(TileParameter other) : this() {
      axis_ = other.axis_;
      tiles_ = other.tiles_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TileParameter Clone() {
      return new TileParameter(this);
    }

    /// <summary>Field number for the "axis" field.</summary>
    public const int AxisFieldNumber = 1;
    private int axis_;
    /// <summary>
    /// The index of the axis to tile.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Axis {
      get { return axis_; }
      set {
        axis_ = value;
      }
    }

    /// <summary>Field number for the "tiles" field.</summary>
    public const int TilesFieldNumber = 2;
    private int tiles_;
    /// <summary>
    /// The number of copies (tiles) of the blob to output.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Tiles {
      get { return tiles_; }
      set {
        tiles_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TileParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TileParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Axis != other.Axis) return false;
      if (Tiles != other.Tiles) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Axis != 0) hash ^= Axis.GetHashCode();
      if (Tiles != 0) hash ^= Tiles.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Axis != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Axis);
      }
      if (Tiles != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Tiles);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Axis != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Axis);
      }
      if (Tiles != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Tiles);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TileParameter other) {
      if (other == null) {
        return;
      }
      if (other.Axis != 0) {
        Axis = other.Axis;
      }
      if (other.Tiles != 0) {
        Tiles = other.Tiles;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Axis = input.ReadInt32();
            break;
          }
          case 16: {
            Tiles = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Message that stores parameters used by ThresholdLayer
  /// </summary>
  public sealed partial class ThresholdParameter : pb::IMessage<ThresholdParameter> {
    private static readonly pb::MessageParser<ThresholdParameter> _parser = new pb::MessageParser<ThresholdParameter>(() => new ThresholdParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ThresholdParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[56]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThresholdParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThresholdParameter(ThresholdParameter other) : this() {
      threshold_ = other.threshold_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ThresholdParameter Clone() {
      return new ThresholdParameter(this);
    }

    /// <summary>Field number for the "threshold" field.</summary>
    public const int ThresholdFieldNumber = 1;
    private float threshold_;
    /// <summary>
    /// Strictly positive values
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Threshold {
      get { return threshold_; }
      set {
        threshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ThresholdParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ThresholdParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Threshold, other.Threshold)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Threshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Threshold);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Threshold != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Threshold);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Threshold != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ThresholdParameter other) {
      if (other == null) {
        return;
      }
      if (other.Threshold != 0F) {
        Threshold = other.Threshold;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Threshold = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class WindowDataParameter : pb::IMessage<WindowDataParameter> {
    private static readonly pb::MessageParser<WindowDataParameter> _parser = new pb::MessageParser<WindowDataParameter>(() => new WindowDataParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<WindowDataParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[57]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowDataParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowDataParameter(WindowDataParameter other) : this() {
      source_ = other.source_;
      scale_ = other.scale_;
      meanFile_ = other.meanFile_;
      batchSize_ = other.batchSize_;
      cropSize_ = other.cropSize_;
      mirror_ = other.mirror_;
      fgThreshold_ = other.fgThreshold_;
      bgThreshold_ = other.bgThreshold_;
      fgFraction_ = other.fgFraction_;
      contextPad_ = other.contextPad_;
      cropMode_ = other.cropMode_;
      cacheImages_ = other.cacheImages_;
      rootFolder_ = other.rootFolder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public WindowDataParameter Clone() {
      return new WindowDataParameter(this);
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 1;
    private string source_ = "";
    /// <summary>
    /// Specify the data source.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 2;
    private float scale_;
    /// <summary>
    /// For data pre-processing, we can do simple scaling and subtracting the
    /// data mean, if provided. Note that the mean subtraction is always carried
    /// out before scaling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "mean_file" field.</summary>
    public const int MeanFileFieldNumber = 3;
    private string meanFile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string MeanFile {
      get { return meanFile_; }
      set {
        meanFile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "batch_size" field.</summary>
    public const int BatchSizeFieldNumber = 4;
    private uint batchSize_;
    /// <summary>
    /// Specify the batch size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint BatchSize {
      get { return batchSize_; }
      set {
        batchSize_ = value;
      }
    }

    /// <summary>Field number for the "crop_size" field.</summary>
    public const int CropSizeFieldNumber = 5;
    private uint cropSize_;
    /// <summary>
    /// Specify if we would like to randomly crop an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint CropSize {
      get { return cropSize_; }
      set {
        cropSize_ = value;
      }
    }

    /// <summary>Field number for the "mirror" field.</summary>
    public const int MirrorFieldNumber = 6;
    private bool mirror_;
    /// <summary>
    /// Specify if we want to randomly mirror data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mirror {
      get { return mirror_; }
      set {
        mirror_ = value;
      }
    }

    /// <summary>Field number for the "fg_threshold" field.</summary>
    public const int FgThresholdFieldNumber = 7;
    private float fgThreshold_;
    /// <summary>
    /// Foreground (object) overlap threshold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FgThreshold {
      get { return fgThreshold_; }
      set {
        fgThreshold_ = value;
      }
    }

    /// <summary>Field number for the "bg_threshold" field.</summary>
    public const int BgThresholdFieldNumber = 8;
    private float bgThreshold_;
    /// <summary>
    /// Background (non-object) overlap threshold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BgThreshold {
      get { return bgThreshold_; }
      set {
        bgThreshold_ = value;
      }
    }

    /// <summary>Field number for the "fg_fraction" field.</summary>
    public const int FgFractionFieldNumber = 9;
    private float fgFraction_;
    /// <summary>
    /// Fraction of batch that should be foreground objects
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float FgFraction {
      get { return fgFraction_; }
      set {
        fgFraction_ = value;
      }
    }

    /// <summary>Field number for the "context_pad" field.</summary>
    public const int ContextPadFieldNumber = 10;
    private uint contextPad_;
    /// <summary>
    /// Amount of contextual padding to add around a window
    /// (used only by the window_data_layer)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ContextPad {
      get { return contextPad_; }
      set {
        contextPad_ = value;
      }
    }

    /// <summary>Field number for the "crop_mode" field.</summary>
    public const int CropModeFieldNumber = 11;
    private string cropMode_ = "";
    /// <summary>
    /// Mode for cropping out a detection window
    /// warp: cropped window is warped to a fixed size and aspect ratio
    /// square: the tightest square around the window is cropped
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CropMode {
      get { return cropMode_; }
      set {
        cropMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "cache_images" field.</summary>
    public const int CacheImagesFieldNumber = 12;
    private bool cacheImages_;
    /// <summary>
    /// cache_images: will load all images in memory for faster access
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool CacheImages {
      get { return cacheImages_; }
      set {
        cacheImages_ = value;
      }
    }

    /// <summary>Field number for the "root_folder" field.</summary>
    public const int RootFolderFieldNumber = 13;
    private string rootFolder_ = "";
    /// <summary>
    /// append root_folder to locate images
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RootFolder {
      get { return rootFolder_; }
      set {
        rootFolder_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as WindowDataParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(WindowDataParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Source != other.Source) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (MeanFile != other.MeanFile) return false;
      if (BatchSize != other.BatchSize) return false;
      if (CropSize != other.CropSize) return false;
      if (Mirror != other.Mirror) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FgThreshold, other.FgThreshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BgThreshold, other.BgThreshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(FgFraction, other.FgFraction)) return false;
      if (ContextPad != other.ContextPad) return false;
      if (CropMode != other.CropMode) return false;
      if (CacheImages != other.CacheImages) return false;
      if (RootFolder != other.RootFolder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (MeanFile.Length != 0) hash ^= MeanFile.GetHashCode();
      if (BatchSize != 0) hash ^= BatchSize.GetHashCode();
      if (CropSize != 0) hash ^= CropSize.GetHashCode();
      if (Mirror != false) hash ^= Mirror.GetHashCode();
      if (FgThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FgThreshold);
      if (BgThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BgThreshold);
      if (FgFraction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(FgFraction);
      if (ContextPad != 0) hash ^= ContextPad.GetHashCode();
      if (CropMode.Length != 0) hash ^= CropMode.GetHashCode();
      if (CacheImages != false) hash ^= CacheImages.GetHashCode();
      if (RootFolder.Length != 0) hash ^= RootFolder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Source.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Source);
      }
      if (Scale != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Scale);
      }
      if (MeanFile.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(MeanFile);
      }
      if (BatchSize != 0) {
        output.WriteRawTag(32);
        output.WriteUInt32(BatchSize);
      }
      if (CropSize != 0) {
        output.WriteRawTag(40);
        output.WriteUInt32(CropSize);
      }
      if (Mirror != false) {
        output.WriteRawTag(48);
        output.WriteBool(Mirror);
      }
      if (FgThreshold != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(FgThreshold);
      }
      if (BgThreshold != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(BgThreshold);
      }
      if (FgFraction != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(FgFraction);
      }
      if (ContextPad != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(ContextPad);
      }
      if (CropMode.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(CropMode);
      }
      if (CacheImages != false) {
        output.WriteRawTag(96);
        output.WriteBool(CacheImages);
      }
      if (RootFolder.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(RootFolder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Source.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Scale != 0F) {
        size += 1 + 4;
      }
      if (MeanFile.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(MeanFile);
      }
      if (BatchSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BatchSize);
      }
      if (CropSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(CropSize);
      }
      if (Mirror != false) {
        size += 1 + 1;
      }
      if (FgThreshold != 0F) {
        size += 1 + 4;
      }
      if (BgThreshold != 0F) {
        size += 1 + 4;
      }
      if (FgFraction != 0F) {
        size += 1 + 4;
      }
      if (ContextPad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(ContextPad);
      }
      if (CropMode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CropMode);
      }
      if (CacheImages != false) {
        size += 1 + 1;
      }
      if (RootFolder.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RootFolder);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(WindowDataParameter other) {
      if (other == null) {
        return;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.MeanFile.Length != 0) {
        MeanFile = other.MeanFile;
      }
      if (other.BatchSize != 0) {
        BatchSize = other.BatchSize;
      }
      if (other.CropSize != 0) {
        CropSize = other.CropSize;
      }
      if (other.Mirror != false) {
        Mirror = other.Mirror;
      }
      if (other.FgThreshold != 0F) {
        FgThreshold = other.FgThreshold;
      }
      if (other.BgThreshold != 0F) {
        BgThreshold = other.BgThreshold;
      }
      if (other.FgFraction != 0F) {
        FgFraction = other.FgFraction;
      }
      if (other.ContextPad != 0) {
        ContextPad = other.ContextPad;
      }
      if (other.CropMode.Length != 0) {
        CropMode = other.CropMode;
      }
      if (other.CacheImages != false) {
        CacheImages = other.CacheImages;
      }
      if (other.RootFolder.Length != 0) {
        RootFolder = other.RootFolder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Source = input.ReadString();
            break;
          }
          case 21: {
            Scale = input.ReadFloat();
            break;
          }
          case 26: {
            MeanFile = input.ReadString();
            break;
          }
          case 32: {
            BatchSize = input.ReadUInt32();
            break;
          }
          case 40: {
            CropSize = input.ReadUInt32();
            break;
          }
          case 48: {
            Mirror = input.ReadBool();
            break;
          }
          case 61: {
            FgThreshold = input.ReadFloat();
            break;
          }
          case 69: {
            BgThreshold = input.ReadFloat();
            break;
          }
          case 77: {
            FgFraction = input.ReadFloat();
            break;
          }
          case 80: {
            ContextPad = input.ReadUInt32();
            break;
          }
          case 90: {
            CropMode = input.ReadString();
            break;
          }
          case 96: {
            CacheImages = input.ReadBool();
            break;
          }
          case 106: {
            RootFolder = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SPPParameter : pb::IMessage<SPPParameter> {
    private static readonly pb::MessageParser<SPPParameter> _parser = new pb::MessageParser<SPPParameter>(() => new SPPParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SPPParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[58]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPPParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPPParameter(SPPParameter other) : this() {
      pyramidHeight_ = other.pyramidHeight_;
      pool_ = other.pool_;
      engine_ = other.engine_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SPPParameter Clone() {
      return new SPPParameter(this);
    }

    /// <summary>Field number for the "pyramid_height" field.</summary>
    public const int PyramidHeightFieldNumber = 1;
    private uint pyramidHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PyramidHeight {
      get { return pyramidHeight_; }
      set {
        pyramidHeight_ = value;
      }
    }

    /// <summary>Field number for the "pool" field.</summary>
    public const int PoolFieldNumber = 2;
    private global::Caffe.SPPParameter.Types.PoolMethod pool_ = 0;
    /// <summary>
    /// The pooling method
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SPPParameter.Types.PoolMethod Pool {
      get { return pool_; }
      set {
        pool_ = value;
      }
    }

    /// <summary>Field number for the "engine" field.</summary>
    public const int EngineFieldNumber = 6;
    private global::Caffe.SPPParameter.Types.Engine engine_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SPPParameter.Types.Engine Engine {
      get { return engine_; }
      set {
        engine_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SPPParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SPPParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PyramidHeight != other.PyramidHeight) return false;
      if (Pool != other.Pool) return false;
      if (Engine != other.Engine) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PyramidHeight != 0) hash ^= PyramidHeight.GetHashCode();
      if (Pool != 0) hash ^= Pool.GetHashCode();
      if (Engine != 0) hash ^= Engine.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PyramidHeight != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(PyramidHeight);
      }
      if (Pool != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Pool);
      }
      if (Engine != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Engine);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PyramidHeight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PyramidHeight);
      }
      if (Pool != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pool);
      }
      if (Engine != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Engine);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SPPParameter other) {
      if (other == null) {
        return;
      }
      if (other.PyramidHeight != 0) {
        PyramidHeight = other.PyramidHeight;
      }
      if (other.Pool != 0) {
        Pool = other.Pool;
      }
      if (other.Engine != 0) {
        Engine = other.Engine;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PyramidHeight = input.ReadUInt32();
            break;
          }
          case 16: {
            pool_ = (global::Caffe.SPPParameter.Types.PoolMethod) input.ReadEnum();
            break;
          }
          case 48: {
            engine_ = (global::Caffe.SPPParameter.Types.Engine) input.ReadEnum();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the SPPParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PoolMethod {
        [pbr::OriginalName("MAX")] Max = 0,
        [pbr::OriginalName("AVE")] Ave = 1,
        [pbr::OriginalName("STOCHASTIC")] Stochastic = 2,
      }

      public enum Engine {
        [pbr::OriginalName("DEFAULT")] Default = 0,
        [pbr::OriginalName("CAFFE")] Caffe = 1,
        [pbr::OriginalName("CUDNN")] Cudnn = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// DEPRECATED: use LayerParameter.
  /// </summary>
  public sealed partial class V1LayerParameter : pb::IMessage<V1LayerParameter> {
    private static readonly pb::MessageParser<V1LayerParameter> _parser = new pb::MessageParser<V1LayerParameter>(() => new V1LayerParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<V1LayerParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[59]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public V1LayerParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public V1LayerParameter(V1LayerParameter other) : this() {
      bottom_ = other.bottom_.Clone();
      top_ = other.top_.Clone();
      name_ = other.name_;
      include_ = other.include_.Clone();
      exclude_ = other.exclude_.Clone();
      type_ = other.type_;
      blobs_ = other.blobs_.Clone();
      param_ = other.param_.Clone();
      blobShareMode_ = other.blobShareMode_.Clone();
      blobsLr_ = other.blobsLr_.Clone();
      weightDecay_ = other.weightDecay_.Clone();
      lossWeight_ = other.lossWeight_.Clone();
      accuracyParam_ = other.accuracyParam_ != null ? other.accuracyParam_.Clone() : null;
      argmaxParam_ = other.argmaxParam_ != null ? other.argmaxParam_.Clone() : null;
      concatParam_ = other.concatParam_ != null ? other.concatParam_.Clone() : null;
      contrastiveLossParam_ = other.contrastiveLossParam_ != null ? other.contrastiveLossParam_.Clone() : null;
      convolutionParam_ = other.convolutionParam_ != null ? other.convolutionParam_.Clone() : null;
      dataParam_ = other.dataParam_ != null ? other.dataParam_.Clone() : null;
      dropoutParam_ = other.dropoutParam_ != null ? other.dropoutParam_.Clone() : null;
      dummyDataParam_ = other.dummyDataParam_ != null ? other.dummyDataParam_.Clone() : null;
      eltwiseParam_ = other.eltwiseParam_ != null ? other.eltwiseParam_.Clone() : null;
      expParam_ = other.expParam_ != null ? other.expParam_.Clone() : null;
      hdf5DataParam_ = other.hdf5DataParam_ != null ? other.hdf5DataParam_.Clone() : null;
      hdf5OutputParam_ = other.hdf5OutputParam_ != null ? other.hdf5OutputParam_.Clone() : null;
      hingeLossParam_ = other.hingeLossParam_ != null ? other.hingeLossParam_.Clone() : null;
      imageDataParam_ = other.imageDataParam_ != null ? other.imageDataParam_.Clone() : null;
      infogainLossParam_ = other.infogainLossParam_ != null ? other.infogainLossParam_.Clone() : null;
      innerProductParam_ = other.innerProductParam_ != null ? other.innerProductParam_.Clone() : null;
      lrnParam_ = other.lrnParam_ != null ? other.lrnParam_.Clone() : null;
      memoryDataParam_ = other.memoryDataParam_ != null ? other.memoryDataParam_.Clone() : null;
      mvnParam_ = other.mvnParam_ != null ? other.mvnParam_.Clone() : null;
      poolingParam_ = other.poolingParam_ != null ? other.poolingParam_.Clone() : null;
      powerParam_ = other.powerParam_ != null ? other.powerParam_.Clone() : null;
      reluParam_ = other.reluParam_ != null ? other.reluParam_.Clone() : null;
      sigmoidParam_ = other.sigmoidParam_ != null ? other.sigmoidParam_.Clone() : null;
      softmaxParam_ = other.softmaxParam_ != null ? other.softmaxParam_.Clone() : null;
      sliceParam_ = other.sliceParam_ != null ? other.sliceParam_.Clone() : null;
      tanhParam_ = other.tanhParam_ != null ? other.tanhParam_.Clone() : null;
      thresholdParam_ = other.thresholdParam_ != null ? other.thresholdParam_.Clone() : null;
      windowDataParam_ = other.windowDataParam_ != null ? other.windowDataParam_.Clone() : null;
      transformParam_ = other.transformParam_ != null ? other.transformParam_.Clone() : null;
      lossParam_ = other.lossParam_ != null ? other.lossParam_.Clone() : null;
      layer_ = other.layer_ != null ? other.layer_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public V1LayerParameter Clone() {
      return new V1LayerParameter(this);
    }

    /// <summary>Field number for the "bottom" field.</summary>
    public const int BottomFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_bottom_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> bottom_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Bottom {
      get { return bottom_; }
    }

    /// <summary>Field number for the "top" field.</summary>
    public const int TopFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_top_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> top_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Top {
      get { return top_; }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 4;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "include" field.</summary>
    public const int IncludeFieldNumber = 32;
    private static readonly pb::FieldCodec<global::Caffe.NetStateRule> _repeated_include_codec
        = pb::FieldCodec.ForMessage(258, global::Caffe.NetStateRule.Parser);
    private readonly pbc::RepeatedField<global::Caffe.NetStateRule> include_ = new pbc::RepeatedField<global::Caffe.NetStateRule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.NetStateRule> Include {
      get { return include_; }
    }

    /// <summary>Field number for the "exclude" field.</summary>
    public const int ExcludeFieldNumber = 33;
    private static readonly pb::FieldCodec<global::Caffe.NetStateRule> _repeated_exclude_codec
        = pb::FieldCodec.ForMessage(266, global::Caffe.NetStateRule.Parser);
    private readonly pbc::RepeatedField<global::Caffe.NetStateRule> exclude_ = new pbc::RepeatedField<global::Caffe.NetStateRule>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.NetStateRule> Exclude {
      get { return exclude_; }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 5;
    private global::Caffe.V1LayerParameter.Types.LayerType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.V1LayerParameter.Types.LayerType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "blobs" field.</summary>
    public const int BlobsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Caffe.BlobProto> _repeated_blobs_codec
        = pb::FieldCodec.ForMessage(50, global::Caffe.BlobProto.Parser);
    private readonly pbc::RepeatedField<global::Caffe.BlobProto> blobs_ = new pbc::RepeatedField<global::Caffe.BlobProto>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.BlobProto> Blobs {
      get { return blobs_; }
    }

    /// <summary>Field number for the "param" field.</summary>
    public const int ParamFieldNumber = 1001;
    private static readonly pb::FieldCodec<string> _repeated_param_codec
        = pb::FieldCodec.ForString(8010);
    private readonly pbc::RepeatedField<string> param_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Param {
      get { return param_; }
    }

    /// <summary>Field number for the "blob_share_mode" field.</summary>
    public const int BlobShareModeFieldNumber = 1002;
    private static readonly pb::FieldCodec<global::Caffe.V1LayerParameter.Types.DimCheckMode> _repeated_blobShareMode_codec
        = pb::FieldCodec.ForEnum(8018, x => (int) x, x => (global::Caffe.V1LayerParameter.Types.DimCheckMode) x);
    private readonly pbc::RepeatedField<global::Caffe.V1LayerParameter.Types.DimCheckMode> blobShareMode_ = new pbc::RepeatedField<global::Caffe.V1LayerParameter.Types.DimCheckMode>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.V1LayerParameter.Types.DimCheckMode> BlobShareMode {
      get { return blobShareMode_; }
    }

    /// <summary>Field number for the "blobs_lr" field.</summary>
    public const int BlobsLrFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_blobsLr_codec
        = pb::FieldCodec.ForFloat(58);
    private readonly pbc::RepeatedField<float> blobsLr_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> BlobsLr {
      get { return blobsLr_; }
    }

    /// <summary>Field number for the "weight_decay" field.</summary>
    public const int WeightDecayFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_weightDecay_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> weightDecay_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> WeightDecay {
      get { return weightDecay_; }
    }

    /// <summary>Field number for the "loss_weight" field.</summary>
    public const int LossWeightFieldNumber = 35;
    private static readonly pb::FieldCodec<float> _repeated_lossWeight_codec
        = pb::FieldCodec.ForFloat(282);
    private readonly pbc::RepeatedField<float> lossWeight_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> LossWeight {
      get { return lossWeight_; }
    }

    /// <summary>Field number for the "accuracy_param" field.</summary>
    public const int AccuracyParamFieldNumber = 27;
    private global::Caffe.AccuracyParameter accuracyParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.AccuracyParameter AccuracyParam {
      get { return accuracyParam_; }
      set {
        accuracyParam_ = value;
      }
    }

    /// <summary>Field number for the "argmax_param" field.</summary>
    public const int ArgmaxParamFieldNumber = 23;
    private global::Caffe.ArgMaxParameter argmaxParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ArgMaxParameter ArgmaxParam {
      get { return argmaxParam_; }
      set {
        argmaxParam_ = value;
      }
    }

    /// <summary>Field number for the "concat_param" field.</summary>
    public const int ConcatParamFieldNumber = 9;
    private global::Caffe.ConcatParameter concatParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ConcatParameter ConcatParam {
      get { return concatParam_; }
      set {
        concatParam_ = value;
      }
    }

    /// <summary>Field number for the "contrastive_loss_param" field.</summary>
    public const int ContrastiveLossParamFieldNumber = 40;
    private global::Caffe.ContrastiveLossParameter contrastiveLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ContrastiveLossParameter ContrastiveLossParam {
      get { return contrastiveLossParam_; }
      set {
        contrastiveLossParam_ = value;
      }
    }

    /// <summary>Field number for the "convolution_param" field.</summary>
    public const int ConvolutionParamFieldNumber = 10;
    private global::Caffe.ConvolutionParameter convolutionParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ConvolutionParameter ConvolutionParam {
      get { return convolutionParam_; }
      set {
        convolutionParam_ = value;
      }
    }

    /// <summary>Field number for the "data_param" field.</summary>
    public const int DataParamFieldNumber = 11;
    private global::Caffe.DataParameter dataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.DataParameter DataParam {
      get { return dataParam_; }
      set {
        dataParam_ = value;
      }
    }

    /// <summary>Field number for the "dropout_param" field.</summary>
    public const int DropoutParamFieldNumber = 12;
    private global::Caffe.DropoutParameter dropoutParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.DropoutParameter DropoutParam {
      get { return dropoutParam_; }
      set {
        dropoutParam_ = value;
      }
    }

    /// <summary>Field number for the "dummy_data_param" field.</summary>
    public const int DummyDataParamFieldNumber = 26;
    private global::Caffe.DummyDataParameter dummyDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.DummyDataParameter DummyDataParam {
      get { return dummyDataParam_; }
      set {
        dummyDataParam_ = value;
      }
    }

    /// <summary>Field number for the "eltwise_param" field.</summary>
    public const int EltwiseParamFieldNumber = 24;
    private global::Caffe.EltwiseParameter eltwiseParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.EltwiseParameter EltwiseParam {
      get { return eltwiseParam_; }
      set {
        eltwiseParam_ = value;
      }
    }

    /// <summary>Field number for the "exp_param" field.</summary>
    public const int ExpParamFieldNumber = 41;
    private global::Caffe.ExpParameter expParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ExpParameter ExpParam {
      get { return expParam_; }
      set {
        expParam_ = value;
      }
    }

    /// <summary>Field number for the "hdf5_data_param" field.</summary>
    public const int Hdf5DataParamFieldNumber = 13;
    private global::Caffe.HDF5DataParameter hdf5DataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.HDF5DataParameter Hdf5DataParam {
      get { return hdf5DataParam_; }
      set {
        hdf5DataParam_ = value;
      }
    }

    /// <summary>Field number for the "hdf5_output_param" field.</summary>
    public const int Hdf5OutputParamFieldNumber = 14;
    private global::Caffe.HDF5OutputParameter hdf5OutputParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.HDF5OutputParameter Hdf5OutputParam {
      get { return hdf5OutputParam_; }
      set {
        hdf5OutputParam_ = value;
      }
    }

    /// <summary>Field number for the "hinge_loss_param" field.</summary>
    public const int HingeLossParamFieldNumber = 29;
    private global::Caffe.HingeLossParameter hingeLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.HingeLossParameter HingeLossParam {
      get { return hingeLossParam_; }
      set {
        hingeLossParam_ = value;
      }
    }

    /// <summary>Field number for the "image_data_param" field.</summary>
    public const int ImageDataParamFieldNumber = 15;
    private global::Caffe.ImageDataParameter imageDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ImageDataParameter ImageDataParam {
      get { return imageDataParam_; }
      set {
        imageDataParam_ = value;
      }
    }

    /// <summary>Field number for the "infogain_loss_param" field.</summary>
    public const int InfogainLossParamFieldNumber = 16;
    private global::Caffe.InfogainLossParameter infogainLossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.InfogainLossParameter InfogainLossParam {
      get { return infogainLossParam_; }
      set {
        infogainLossParam_ = value;
      }
    }

    /// <summary>Field number for the "inner_product_param" field.</summary>
    public const int InnerProductParamFieldNumber = 17;
    private global::Caffe.InnerProductParameter innerProductParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.InnerProductParameter InnerProductParam {
      get { return innerProductParam_; }
      set {
        innerProductParam_ = value;
      }
    }

    /// <summary>Field number for the "lrn_param" field.</summary>
    public const int LrnParamFieldNumber = 18;
    private global::Caffe.LRNParameter lrnParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.LRNParameter LrnParam {
      get { return lrnParam_; }
      set {
        lrnParam_ = value;
      }
    }

    /// <summary>Field number for the "memory_data_param" field.</summary>
    public const int MemoryDataParamFieldNumber = 22;
    private global::Caffe.MemoryDataParameter memoryDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.MemoryDataParameter MemoryDataParam {
      get { return memoryDataParam_; }
      set {
        memoryDataParam_ = value;
      }
    }

    /// <summary>Field number for the "mvn_param" field.</summary>
    public const int MvnParamFieldNumber = 34;
    private global::Caffe.MVNParameter mvnParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.MVNParameter MvnParam {
      get { return mvnParam_; }
      set {
        mvnParam_ = value;
      }
    }

    /// <summary>Field number for the "pooling_param" field.</summary>
    public const int PoolingParamFieldNumber = 19;
    private global::Caffe.PoolingParameter poolingParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.PoolingParameter PoolingParam {
      get { return poolingParam_; }
      set {
        poolingParam_ = value;
      }
    }

    /// <summary>Field number for the "power_param" field.</summary>
    public const int PowerParamFieldNumber = 21;
    private global::Caffe.PowerParameter powerParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.PowerParameter PowerParam {
      get { return powerParam_; }
      set {
        powerParam_ = value;
      }
    }

    /// <summary>Field number for the "relu_param" field.</summary>
    public const int ReluParamFieldNumber = 30;
    private global::Caffe.ReLUParameter reluParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ReLUParameter ReluParam {
      get { return reluParam_; }
      set {
        reluParam_ = value;
      }
    }

    /// <summary>Field number for the "sigmoid_param" field.</summary>
    public const int SigmoidParamFieldNumber = 38;
    private global::Caffe.SigmoidParameter sigmoidParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SigmoidParameter SigmoidParam {
      get { return sigmoidParam_; }
      set {
        sigmoidParam_ = value;
      }
    }

    /// <summary>Field number for the "softmax_param" field.</summary>
    public const int SoftmaxParamFieldNumber = 39;
    private global::Caffe.SoftmaxParameter softmaxParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SoftmaxParameter SoftmaxParam {
      get { return softmaxParam_; }
      set {
        softmaxParam_ = value;
      }
    }

    /// <summary>Field number for the "slice_param" field.</summary>
    public const int SliceParamFieldNumber = 31;
    private global::Caffe.SliceParameter sliceParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.SliceParameter SliceParam {
      get { return sliceParam_; }
      set {
        sliceParam_ = value;
      }
    }

    /// <summary>Field number for the "tanh_param" field.</summary>
    public const int TanhParamFieldNumber = 37;
    private global::Caffe.TanHParameter tanhParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.TanHParameter TanhParam {
      get { return tanhParam_; }
      set {
        tanhParam_ = value;
      }
    }

    /// <summary>Field number for the "threshold_param" field.</summary>
    public const int ThresholdParamFieldNumber = 25;
    private global::Caffe.ThresholdParameter thresholdParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.ThresholdParameter ThresholdParam {
      get { return thresholdParam_; }
      set {
        thresholdParam_ = value;
      }
    }

    /// <summary>Field number for the "window_data_param" field.</summary>
    public const int WindowDataParamFieldNumber = 20;
    private global::Caffe.WindowDataParameter windowDataParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.WindowDataParameter WindowDataParam {
      get { return windowDataParam_; }
      set {
        windowDataParam_ = value;
      }
    }

    /// <summary>Field number for the "transform_param" field.</summary>
    public const int TransformParamFieldNumber = 36;
    private global::Caffe.TransformationParameter transformParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.TransformationParameter TransformParam {
      get { return transformParam_; }
      set {
        transformParam_ = value;
      }
    }

    /// <summary>Field number for the "loss_param" field.</summary>
    public const int LossParamFieldNumber = 42;
    private global::Caffe.LossParameter lossParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.LossParameter LossParam {
      get { return lossParam_; }
      set {
        lossParam_ = value;
      }
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 1;
    private global::Caffe.V0LayerParameter layer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.V0LayerParameter Layer {
      get { return layer_; }
      set {
        layer_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as V1LayerParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(V1LayerParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!bottom_.Equals(other.bottom_)) return false;
      if(!top_.Equals(other.top_)) return false;
      if (Name != other.Name) return false;
      if(!include_.Equals(other.include_)) return false;
      if(!exclude_.Equals(other.exclude_)) return false;
      if (Type != other.Type) return false;
      if(!blobs_.Equals(other.blobs_)) return false;
      if(!param_.Equals(other.param_)) return false;
      if(!blobShareMode_.Equals(other.blobShareMode_)) return false;
      if(!blobsLr_.Equals(other.blobsLr_)) return false;
      if(!weightDecay_.Equals(other.weightDecay_)) return false;
      if(!lossWeight_.Equals(other.lossWeight_)) return false;
      if (!object.Equals(AccuracyParam, other.AccuracyParam)) return false;
      if (!object.Equals(ArgmaxParam, other.ArgmaxParam)) return false;
      if (!object.Equals(ConcatParam, other.ConcatParam)) return false;
      if (!object.Equals(ContrastiveLossParam, other.ContrastiveLossParam)) return false;
      if (!object.Equals(ConvolutionParam, other.ConvolutionParam)) return false;
      if (!object.Equals(DataParam, other.DataParam)) return false;
      if (!object.Equals(DropoutParam, other.DropoutParam)) return false;
      if (!object.Equals(DummyDataParam, other.DummyDataParam)) return false;
      if (!object.Equals(EltwiseParam, other.EltwiseParam)) return false;
      if (!object.Equals(ExpParam, other.ExpParam)) return false;
      if (!object.Equals(Hdf5DataParam, other.Hdf5DataParam)) return false;
      if (!object.Equals(Hdf5OutputParam, other.Hdf5OutputParam)) return false;
      if (!object.Equals(HingeLossParam, other.HingeLossParam)) return false;
      if (!object.Equals(ImageDataParam, other.ImageDataParam)) return false;
      if (!object.Equals(InfogainLossParam, other.InfogainLossParam)) return false;
      if (!object.Equals(InnerProductParam, other.InnerProductParam)) return false;
      if (!object.Equals(LrnParam, other.LrnParam)) return false;
      if (!object.Equals(MemoryDataParam, other.MemoryDataParam)) return false;
      if (!object.Equals(MvnParam, other.MvnParam)) return false;
      if (!object.Equals(PoolingParam, other.PoolingParam)) return false;
      if (!object.Equals(PowerParam, other.PowerParam)) return false;
      if (!object.Equals(ReluParam, other.ReluParam)) return false;
      if (!object.Equals(SigmoidParam, other.SigmoidParam)) return false;
      if (!object.Equals(SoftmaxParam, other.SoftmaxParam)) return false;
      if (!object.Equals(SliceParam, other.SliceParam)) return false;
      if (!object.Equals(TanhParam, other.TanhParam)) return false;
      if (!object.Equals(ThresholdParam, other.ThresholdParam)) return false;
      if (!object.Equals(WindowDataParam, other.WindowDataParam)) return false;
      if (!object.Equals(TransformParam, other.TransformParam)) return false;
      if (!object.Equals(LossParam, other.LossParam)) return false;
      if (!object.Equals(Layer, other.Layer)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= bottom_.GetHashCode();
      hash ^= top_.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= include_.GetHashCode();
      hash ^= exclude_.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      hash ^= blobs_.GetHashCode();
      hash ^= param_.GetHashCode();
      hash ^= blobShareMode_.GetHashCode();
      hash ^= blobsLr_.GetHashCode();
      hash ^= weightDecay_.GetHashCode();
      hash ^= lossWeight_.GetHashCode();
      if (accuracyParam_ != null) hash ^= AccuracyParam.GetHashCode();
      if (argmaxParam_ != null) hash ^= ArgmaxParam.GetHashCode();
      if (concatParam_ != null) hash ^= ConcatParam.GetHashCode();
      if (contrastiveLossParam_ != null) hash ^= ContrastiveLossParam.GetHashCode();
      if (convolutionParam_ != null) hash ^= ConvolutionParam.GetHashCode();
      if (dataParam_ != null) hash ^= DataParam.GetHashCode();
      if (dropoutParam_ != null) hash ^= DropoutParam.GetHashCode();
      if (dummyDataParam_ != null) hash ^= DummyDataParam.GetHashCode();
      if (eltwiseParam_ != null) hash ^= EltwiseParam.GetHashCode();
      if (expParam_ != null) hash ^= ExpParam.GetHashCode();
      if (hdf5DataParam_ != null) hash ^= Hdf5DataParam.GetHashCode();
      if (hdf5OutputParam_ != null) hash ^= Hdf5OutputParam.GetHashCode();
      if (hingeLossParam_ != null) hash ^= HingeLossParam.GetHashCode();
      if (imageDataParam_ != null) hash ^= ImageDataParam.GetHashCode();
      if (infogainLossParam_ != null) hash ^= InfogainLossParam.GetHashCode();
      if (innerProductParam_ != null) hash ^= InnerProductParam.GetHashCode();
      if (lrnParam_ != null) hash ^= LrnParam.GetHashCode();
      if (memoryDataParam_ != null) hash ^= MemoryDataParam.GetHashCode();
      if (mvnParam_ != null) hash ^= MvnParam.GetHashCode();
      if (poolingParam_ != null) hash ^= PoolingParam.GetHashCode();
      if (powerParam_ != null) hash ^= PowerParam.GetHashCode();
      if (reluParam_ != null) hash ^= ReluParam.GetHashCode();
      if (sigmoidParam_ != null) hash ^= SigmoidParam.GetHashCode();
      if (softmaxParam_ != null) hash ^= SoftmaxParam.GetHashCode();
      if (sliceParam_ != null) hash ^= SliceParam.GetHashCode();
      if (tanhParam_ != null) hash ^= TanhParam.GetHashCode();
      if (thresholdParam_ != null) hash ^= ThresholdParam.GetHashCode();
      if (windowDataParam_ != null) hash ^= WindowDataParam.GetHashCode();
      if (transformParam_ != null) hash ^= TransformParam.GetHashCode();
      if (lossParam_ != null) hash ^= LossParam.GetHashCode();
      if (layer_ != null) hash ^= Layer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (layer_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Layer);
      }
      bottom_.WriteTo(output, _repeated_bottom_codec);
      top_.WriteTo(output, _repeated_top_codec);
      if (Name.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Name);
      }
      if (Type != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type);
      }
      blobs_.WriteTo(output, _repeated_blobs_codec);
      blobsLr_.WriteTo(output, _repeated_blobsLr_codec);
      weightDecay_.WriteTo(output, _repeated_weightDecay_codec);
      if (concatParam_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(ConcatParam);
      }
      if (convolutionParam_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(ConvolutionParam);
      }
      if (dataParam_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DataParam);
      }
      if (dropoutParam_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(DropoutParam);
      }
      if (hdf5DataParam_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Hdf5DataParam);
      }
      if (hdf5OutputParam_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(Hdf5OutputParam);
      }
      if (imageDataParam_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(ImageDataParam);
      }
      if (infogainLossParam_ != null) {
        output.WriteRawTag(130, 1);
        output.WriteMessage(InfogainLossParam);
      }
      if (innerProductParam_ != null) {
        output.WriteRawTag(138, 1);
        output.WriteMessage(InnerProductParam);
      }
      if (lrnParam_ != null) {
        output.WriteRawTag(146, 1);
        output.WriteMessage(LrnParam);
      }
      if (poolingParam_ != null) {
        output.WriteRawTag(154, 1);
        output.WriteMessage(PoolingParam);
      }
      if (windowDataParam_ != null) {
        output.WriteRawTag(162, 1);
        output.WriteMessage(WindowDataParam);
      }
      if (powerParam_ != null) {
        output.WriteRawTag(170, 1);
        output.WriteMessage(PowerParam);
      }
      if (memoryDataParam_ != null) {
        output.WriteRawTag(178, 1);
        output.WriteMessage(MemoryDataParam);
      }
      if (argmaxParam_ != null) {
        output.WriteRawTag(186, 1);
        output.WriteMessage(ArgmaxParam);
      }
      if (eltwiseParam_ != null) {
        output.WriteRawTag(194, 1);
        output.WriteMessage(EltwiseParam);
      }
      if (thresholdParam_ != null) {
        output.WriteRawTag(202, 1);
        output.WriteMessage(ThresholdParam);
      }
      if (dummyDataParam_ != null) {
        output.WriteRawTag(210, 1);
        output.WriteMessage(DummyDataParam);
      }
      if (accuracyParam_ != null) {
        output.WriteRawTag(218, 1);
        output.WriteMessage(AccuracyParam);
      }
      if (hingeLossParam_ != null) {
        output.WriteRawTag(234, 1);
        output.WriteMessage(HingeLossParam);
      }
      if (reluParam_ != null) {
        output.WriteRawTag(242, 1);
        output.WriteMessage(ReluParam);
      }
      if (sliceParam_ != null) {
        output.WriteRawTag(250, 1);
        output.WriteMessage(SliceParam);
      }
      include_.WriteTo(output, _repeated_include_codec);
      exclude_.WriteTo(output, _repeated_exclude_codec);
      if (mvnParam_ != null) {
        output.WriteRawTag(146, 2);
        output.WriteMessage(MvnParam);
      }
      lossWeight_.WriteTo(output, _repeated_lossWeight_codec);
      if (transformParam_ != null) {
        output.WriteRawTag(162, 2);
        output.WriteMessage(TransformParam);
      }
      if (tanhParam_ != null) {
        output.WriteRawTag(170, 2);
        output.WriteMessage(TanhParam);
      }
      if (sigmoidParam_ != null) {
        output.WriteRawTag(178, 2);
        output.WriteMessage(SigmoidParam);
      }
      if (softmaxParam_ != null) {
        output.WriteRawTag(186, 2);
        output.WriteMessage(SoftmaxParam);
      }
      if (contrastiveLossParam_ != null) {
        output.WriteRawTag(194, 2);
        output.WriteMessage(ContrastiveLossParam);
      }
      if (expParam_ != null) {
        output.WriteRawTag(202, 2);
        output.WriteMessage(ExpParam);
      }
      if (lossParam_ != null) {
        output.WriteRawTag(210, 2);
        output.WriteMessage(LossParam);
      }
      param_.WriteTo(output, _repeated_param_codec);
      blobShareMode_.WriteTo(output, _repeated_blobShareMode_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += bottom_.CalculateSize(_repeated_bottom_codec);
      size += top_.CalculateSize(_repeated_top_codec);
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += include_.CalculateSize(_repeated_include_codec);
      size += exclude_.CalculateSize(_repeated_exclude_codec);
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += blobs_.CalculateSize(_repeated_blobs_codec);
      size += param_.CalculateSize(_repeated_param_codec);
      size += blobShareMode_.CalculateSize(_repeated_blobShareMode_codec);
      size += blobsLr_.CalculateSize(_repeated_blobsLr_codec);
      size += weightDecay_.CalculateSize(_repeated_weightDecay_codec);
      size += lossWeight_.CalculateSize(_repeated_lossWeight_codec);
      if (accuracyParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(AccuracyParam);
      }
      if (argmaxParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ArgmaxParam);
      }
      if (concatParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConcatParam);
      }
      if (contrastiveLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ContrastiveLossParam);
      }
      if (convolutionParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ConvolutionParam);
      }
      if (dataParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DataParam);
      }
      if (dropoutParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DropoutParam);
      }
      if (dummyDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(DummyDataParam);
      }
      if (eltwiseParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(EltwiseParam);
      }
      if (expParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExpParam);
      }
      if (hdf5DataParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hdf5DataParam);
      }
      if (hdf5OutputParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Hdf5OutputParam);
      }
      if (hingeLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(HingeLossParam);
      }
      if (imageDataParam_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ImageDataParam);
      }
      if (infogainLossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InfogainLossParam);
      }
      if (innerProductParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(InnerProductParam);
      }
      if (lrnParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LrnParam);
      }
      if (memoryDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MemoryDataParam);
      }
      if (mvnParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(MvnParam);
      }
      if (poolingParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PoolingParam);
      }
      if (powerParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(PowerParam);
      }
      if (reluParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ReluParam);
      }
      if (sigmoidParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SigmoidParam);
      }
      if (softmaxParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SoftmaxParam);
      }
      if (sliceParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(SliceParam);
      }
      if (tanhParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TanhParam);
      }
      if (thresholdParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(ThresholdParam);
      }
      if (windowDataParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(WindowDataParam);
      }
      if (transformParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(TransformParam);
      }
      if (lossParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(LossParam);
      }
      if (layer_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Layer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(V1LayerParameter other) {
      if (other == null) {
        return;
      }
      bottom_.Add(other.bottom_);
      top_.Add(other.top_);
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      include_.Add(other.include_);
      exclude_.Add(other.exclude_);
      if (other.Type != 0) {
        Type = other.Type;
      }
      blobs_.Add(other.blobs_);
      param_.Add(other.param_);
      blobShareMode_.Add(other.blobShareMode_);
      blobsLr_.Add(other.blobsLr_);
      weightDecay_.Add(other.weightDecay_);
      lossWeight_.Add(other.lossWeight_);
      if (other.accuracyParam_ != null) {
        if (accuracyParam_ == null) {
          accuracyParam_ = new global::Caffe.AccuracyParameter();
        }
        AccuracyParam.MergeFrom(other.AccuracyParam);
      }
      if (other.argmaxParam_ != null) {
        if (argmaxParam_ == null) {
          argmaxParam_ = new global::Caffe.ArgMaxParameter();
        }
        ArgmaxParam.MergeFrom(other.ArgmaxParam);
      }
      if (other.concatParam_ != null) {
        if (concatParam_ == null) {
          concatParam_ = new global::Caffe.ConcatParameter();
        }
        ConcatParam.MergeFrom(other.ConcatParam);
      }
      if (other.contrastiveLossParam_ != null) {
        if (contrastiveLossParam_ == null) {
          contrastiveLossParam_ = new global::Caffe.ContrastiveLossParameter();
        }
        ContrastiveLossParam.MergeFrom(other.ContrastiveLossParam);
      }
      if (other.convolutionParam_ != null) {
        if (convolutionParam_ == null) {
          convolutionParam_ = new global::Caffe.ConvolutionParameter();
        }
        ConvolutionParam.MergeFrom(other.ConvolutionParam);
      }
      if (other.dataParam_ != null) {
        if (dataParam_ == null) {
          dataParam_ = new global::Caffe.DataParameter();
        }
        DataParam.MergeFrom(other.DataParam);
      }
      if (other.dropoutParam_ != null) {
        if (dropoutParam_ == null) {
          dropoutParam_ = new global::Caffe.DropoutParameter();
        }
        DropoutParam.MergeFrom(other.DropoutParam);
      }
      if (other.dummyDataParam_ != null) {
        if (dummyDataParam_ == null) {
          dummyDataParam_ = new global::Caffe.DummyDataParameter();
        }
        DummyDataParam.MergeFrom(other.DummyDataParam);
      }
      if (other.eltwiseParam_ != null) {
        if (eltwiseParam_ == null) {
          eltwiseParam_ = new global::Caffe.EltwiseParameter();
        }
        EltwiseParam.MergeFrom(other.EltwiseParam);
      }
      if (other.expParam_ != null) {
        if (expParam_ == null) {
          expParam_ = new global::Caffe.ExpParameter();
        }
        ExpParam.MergeFrom(other.ExpParam);
      }
      if (other.hdf5DataParam_ != null) {
        if (hdf5DataParam_ == null) {
          hdf5DataParam_ = new global::Caffe.HDF5DataParameter();
        }
        Hdf5DataParam.MergeFrom(other.Hdf5DataParam);
      }
      if (other.hdf5OutputParam_ != null) {
        if (hdf5OutputParam_ == null) {
          hdf5OutputParam_ = new global::Caffe.HDF5OutputParameter();
        }
        Hdf5OutputParam.MergeFrom(other.Hdf5OutputParam);
      }
      if (other.hingeLossParam_ != null) {
        if (hingeLossParam_ == null) {
          hingeLossParam_ = new global::Caffe.HingeLossParameter();
        }
        HingeLossParam.MergeFrom(other.HingeLossParam);
      }
      if (other.imageDataParam_ != null) {
        if (imageDataParam_ == null) {
          imageDataParam_ = new global::Caffe.ImageDataParameter();
        }
        ImageDataParam.MergeFrom(other.ImageDataParam);
      }
      if (other.infogainLossParam_ != null) {
        if (infogainLossParam_ == null) {
          infogainLossParam_ = new global::Caffe.InfogainLossParameter();
        }
        InfogainLossParam.MergeFrom(other.InfogainLossParam);
      }
      if (other.innerProductParam_ != null) {
        if (innerProductParam_ == null) {
          innerProductParam_ = new global::Caffe.InnerProductParameter();
        }
        InnerProductParam.MergeFrom(other.InnerProductParam);
      }
      if (other.lrnParam_ != null) {
        if (lrnParam_ == null) {
          lrnParam_ = new global::Caffe.LRNParameter();
        }
        LrnParam.MergeFrom(other.LrnParam);
      }
      if (other.memoryDataParam_ != null) {
        if (memoryDataParam_ == null) {
          memoryDataParam_ = new global::Caffe.MemoryDataParameter();
        }
        MemoryDataParam.MergeFrom(other.MemoryDataParam);
      }
      if (other.mvnParam_ != null) {
        if (mvnParam_ == null) {
          mvnParam_ = new global::Caffe.MVNParameter();
        }
        MvnParam.MergeFrom(other.MvnParam);
      }
      if (other.poolingParam_ != null) {
        if (poolingParam_ == null) {
          poolingParam_ = new global::Caffe.PoolingParameter();
        }
        PoolingParam.MergeFrom(other.PoolingParam);
      }
      if (other.powerParam_ != null) {
        if (powerParam_ == null) {
          powerParam_ = new global::Caffe.PowerParameter();
        }
        PowerParam.MergeFrom(other.PowerParam);
      }
      if (other.reluParam_ != null) {
        if (reluParam_ == null) {
          reluParam_ = new global::Caffe.ReLUParameter();
        }
        ReluParam.MergeFrom(other.ReluParam);
      }
      if (other.sigmoidParam_ != null) {
        if (sigmoidParam_ == null) {
          sigmoidParam_ = new global::Caffe.SigmoidParameter();
        }
        SigmoidParam.MergeFrom(other.SigmoidParam);
      }
      if (other.softmaxParam_ != null) {
        if (softmaxParam_ == null) {
          softmaxParam_ = new global::Caffe.SoftmaxParameter();
        }
        SoftmaxParam.MergeFrom(other.SoftmaxParam);
      }
      if (other.sliceParam_ != null) {
        if (sliceParam_ == null) {
          sliceParam_ = new global::Caffe.SliceParameter();
        }
        SliceParam.MergeFrom(other.SliceParam);
      }
      if (other.tanhParam_ != null) {
        if (tanhParam_ == null) {
          tanhParam_ = new global::Caffe.TanHParameter();
        }
        TanhParam.MergeFrom(other.TanhParam);
      }
      if (other.thresholdParam_ != null) {
        if (thresholdParam_ == null) {
          thresholdParam_ = new global::Caffe.ThresholdParameter();
        }
        ThresholdParam.MergeFrom(other.ThresholdParam);
      }
      if (other.windowDataParam_ != null) {
        if (windowDataParam_ == null) {
          windowDataParam_ = new global::Caffe.WindowDataParameter();
        }
        WindowDataParam.MergeFrom(other.WindowDataParam);
      }
      if (other.transformParam_ != null) {
        if (transformParam_ == null) {
          transformParam_ = new global::Caffe.TransformationParameter();
        }
        TransformParam.MergeFrom(other.TransformParam);
      }
      if (other.lossParam_ != null) {
        if (lossParam_ == null) {
          lossParam_ = new global::Caffe.LossParameter();
        }
        LossParam.MergeFrom(other.LossParam);
      }
      if (other.layer_ != null) {
        if (layer_ == null) {
          layer_ = new global::Caffe.V0LayerParameter();
        }
        Layer.MergeFrom(other.Layer);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (layer_ == null) {
              layer_ = new global::Caffe.V0LayerParameter();
            }
            input.ReadMessage(layer_);
            break;
          }
          case 18: {
            bottom_.AddEntriesFrom(input, _repeated_bottom_codec);
            break;
          }
          case 26: {
            top_.AddEntriesFrom(input, _repeated_top_codec);
            break;
          }
          case 34: {
            Name = input.ReadString();
            break;
          }
          case 40: {
            type_ = (global::Caffe.V1LayerParameter.Types.LayerType) input.ReadEnum();
            break;
          }
          case 50: {
            blobs_.AddEntriesFrom(input, _repeated_blobs_codec);
            break;
          }
          case 58:
          case 61: {
            blobsLr_.AddEntriesFrom(input, _repeated_blobsLr_codec);
            break;
          }
          case 66:
          case 69: {
            weightDecay_.AddEntriesFrom(input, _repeated_weightDecay_codec);
            break;
          }
          case 74: {
            if (concatParam_ == null) {
              concatParam_ = new global::Caffe.ConcatParameter();
            }
            input.ReadMessage(concatParam_);
            break;
          }
          case 82: {
            if (convolutionParam_ == null) {
              convolutionParam_ = new global::Caffe.ConvolutionParameter();
            }
            input.ReadMessage(convolutionParam_);
            break;
          }
          case 90: {
            if (dataParam_ == null) {
              dataParam_ = new global::Caffe.DataParameter();
            }
            input.ReadMessage(dataParam_);
            break;
          }
          case 98: {
            if (dropoutParam_ == null) {
              dropoutParam_ = new global::Caffe.DropoutParameter();
            }
            input.ReadMessage(dropoutParam_);
            break;
          }
          case 106: {
            if (hdf5DataParam_ == null) {
              hdf5DataParam_ = new global::Caffe.HDF5DataParameter();
            }
            input.ReadMessage(hdf5DataParam_);
            break;
          }
          case 114: {
            if (hdf5OutputParam_ == null) {
              hdf5OutputParam_ = new global::Caffe.HDF5OutputParameter();
            }
            input.ReadMessage(hdf5OutputParam_);
            break;
          }
          case 122: {
            if (imageDataParam_ == null) {
              imageDataParam_ = new global::Caffe.ImageDataParameter();
            }
            input.ReadMessage(imageDataParam_);
            break;
          }
          case 130: {
            if (infogainLossParam_ == null) {
              infogainLossParam_ = new global::Caffe.InfogainLossParameter();
            }
            input.ReadMessage(infogainLossParam_);
            break;
          }
          case 138: {
            if (innerProductParam_ == null) {
              innerProductParam_ = new global::Caffe.InnerProductParameter();
            }
            input.ReadMessage(innerProductParam_);
            break;
          }
          case 146: {
            if (lrnParam_ == null) {
              lrnParam_ = new global::Caffe.LRNParameter();
            }
            input.ReadMessage(lrnParam_);
            break;
          }
          case 154: {
            if (poolingParam_ == null) {
              poolingParam_ = new global::Caffe.PoolingParameter();
            }
            input.ReadMessage(poolingParam_);
            break;
          }
          case 162: {
            if (windowDataParam_ == null) {
              windowDataParam_ = new global::Caffe.WindowDataParameter();
            }
            input.ReadMessage(windowDataParam_);
            break;
          }
          case 170: {
            if (powerParam_ == null) {
              powerParam_ = new global::Caffe.PowerParameter();
            }
            input.ReadMessage(powerParam_);
            break;
          }
          case 178: {
            if (memoryDataParam_ == null) {
              memoryDataParam_ = new global::Caffe.MemoryDataParameter();
            }
            input.ReadMessage(memoryDataParam_);
            break;
          }
          case 186: {
            if (argmaxParam_ == null) {
              argmaxParam_ = new global::Caffe.ArgMaxParameter();
            }
            input.ReadMessage(argmaxParam_);
            break;
          }
          case 194: {
            if (eltwiseParam_ == null) {
              eltwiseParam_ = new global::Caffe.EltwiseParameter();
            }
            input.ReadMessage(eltwiseParam_);
            break;
          }
          case 202: {
            if (thresholdParam_ == null) {
              thresholdParam_ = new global::Caffe.ThresholdParameter();
            }
            input.ReadMessage(thresholdParam_);
            break;
          }
          case 210: {
            if (dummyDataParam_ == null) {
              dummyDataParam_ = new global::Caffe.DummyDataParameter();
            }
            input.ReadMessage(dummyDataParam_);
            break;
          }
          case 218: {
            if (accuracyParam_ == null) {
              accuracyParam_ = new global::Caffe.AccuracyParameter();
            }
            input.ReadMessage(accuracyParam_);
            break;
          }
          case 234: {
            if (hingeLossParam_ == null) {
              hingeLossParam_ = new global::Caffe.HingeLossParameter();
            }
            input.ReadMessage(hingeLossParam_);
            break;
          }
          case 242: {
            if (reluParam_ == null) {
              reluParam_ = new global::Caffe.ReLUParameter();
            }
            input.ReadMessage(reluParam_);
            break;
          }
          case 250: {
            if (sliceParam_ == null) {
              sliceParam_ = new global::Caffe.SliceParameter();
            }
            input.ReadMessage(sliceParam_);
            break;
          }
          case 258: {
            include_.AddEntriesFrom(input, _repeated_include_codec);
            break;
          }
          case 266: {
            exclude_.AddEntriesFrom(input, _repeated_exclude_codec);
            break;
          }
          case 274: {
            if (mvnParam_ == null) {
              mvnParam_ = new global::Caffe.MVNParameter();
            }
            input.ReadMessage(mvnParam_);
            break;
          }
          case 282:
          case 285: {
            lossWeight_.AddEntriesFrom(input, _repeated_lossWeight_codec);
            break;
          }
          case 290: {
            if (transformParam_ == null) {
              transformParam_ = new global::Caffe.TransformationParameter();
            }
            input.ReadMessage(transformParam_);
            break;
          }
          case 298: {
            if (tanhParam_ == null) {
              tanhParam_ = new global::Caffe.TanHParameter();
            }
            input.ReadMessage(tanhParam_);
            break;
          }
          case 306: {
            if (sigmoidParam_ == null) {
              sigmoidParam_ = new global::Caffe.SigmoidParameter();
            }
            input.ReadMessage(sigmoidParam_);
            break;
          }
          case 314: {
            if (softmaxParam_ == null) {
              softmaxParam_ = new global::Caffe.SoftmaxParameter();
            }
            input.ReadMessage(softmaxParam_);
            break;
          }
          case 322: {
            if (contrastiveLossParam_ == null) {
              contrastiveLossParam_ = new global::Caffe.ContrastiveLossParameter();
            }
            input.ReadMessage(contrastiveLossParam_);
            break;
          }
          case 330: {
            if (expParam_ == null) {
              expParam_ = new global::Caffe.ExpParameter();
            }
            input.ReadMessage(expParam_);
            break;
          }
          case 338: {
            if (lossParam_ == null) {
              lossParam_ = new global::Caffe.LossParameter();
            }
            input.ReadMessage(lossParam_);
            break;
          }
          case 8010: {
            param_.AddEntriesFrom(input, _repeated_param_codec);
            break;
          }
          case 8018:
          case 8016: {
            blobShareMode_.AddEntriesFrom(input, _repeated_blobShareMode_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the V1LayerParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum LayerType {
        [pbr::OriginalName("NONE")] None = 0,
        [pbr::OriginalName("ABSVAL")] Absval = 35,
        [pbr::OriginalName("ACCURACY")] Accuracy = 1,
        [pbr::OriginalName("ARGMAX")] Argmax = 30,
        [pbr::OriginalName("BNLL")] Bnll = 2,
        [pbr::OriginalName("CONCAT")] Concat = 3,
        [pbr::OriginalName("CONTRASTIVE_LOSS")] ContrastiveLoss = 37,
        [pbr::OriginalName("CONVOLUTION")] Convolution = 4,
        [pbr::OriginalName("DATA")] Data = 5,
        [pbr::OriginalName("DECONVOLUTION")] Deconvolution = 39,
        [pbr::OriginalName("DROPOUT")] Dropout = 6,
        [pbr::OriginalName("DUMMY_DATA")] DummyData = 32,
        [pbr::OriginalName("EUCLIDEAN_LOSS")] EuclideanLoss = 7,
        [pbr::OriginalName("ELTWISE")] Eltwise = 25,
        [pbr::OriginalName("EXP")] Exp = 38,
        [pbr::OriginalName("FLATTEN")] Flatten = 8,
        [pbr::OriginalName("HDF5_DATA")] Hdf5Data = 9,
        [pbr::OriginalName("HDF5_OUTPUT")] Hdf5Output = 10,
        [pbr::OriginalName("HINGE_LOSS")] HingeLoss = 28,
        [pbr::OriginalName("IM2COL")] Im2Col = 11,
        [pbr::OriginalName("IMAGE_DATA")] ImageData = 12,
        [pbr::OriginalName("INFOGAIN_LOSS")] InfogainLoss = 13,
        [pbr::OriginalName("INNER_PRODUCT")] InnerProduct = 14,
        [pbr::OriginalName("LRN")] Lrn = 15,
        [pbr::OriginalName("MEMORY_DATA")] MemoryData = 29,
        [pbr::OriginalName("MULTINOMIAL_LOGISTIC_LOSS")] MultinomialLogisticLoss = 16,
        [pbr::OriginalName("MVN")] Mvn = 34,
        [pbr::OriginalName("POOLING")] Pooling = 17,
        [pbr::OriginalName("POWER")] Power = 26,
        [pbr::OriginalName("RELU")] Relu = 18,
        [pbr::OriginalName("SIGMOID")] Sigmoid = 19,
        [pbr::OriginalName("SIGMOID_CROSS_ENTROPY_LOSS")] SigmoidCrossEntropyLoss = 27,
        [pbr::OriginalName("SILENCE")] Silence = 36,
        [pbr::OriginalName("SOFTMAX")] Softmax = 20,
        [pbr::OriginalName("SOFTMAX_LOSS")] SoftmaxLoss = 21,
        [pbr::OriginalName("SPLIT")] Split = 22,
        [pbr::OriginalName("SLICE")] Slice = 33,
        [pbr::OriginalName("TANH")] Tanh = 23,
        [pbr::OriginalName("WINDOW_DATA")] WindowData = 24,
        [pbr::OriginalName("THRESHOLD")] Threshold = 31,
      }

      public enum DimCheckMode {
        [pbr::OriginalName("STRICT")] Strict = 0,
        [pbr::OriginalName("PERMISSIVE")] Permissive = 1,
      }

    }
    #endregion

  }

  /// <summary>
  /// DEPRECATED: V0LayerParameter is the old way of specifying layer parameters
  /// in Caffe.  We keep this message type around for legacy support.
  /// </summary>
  public sealed partial class V0LayerParameter : pb::IMessage<V0LayerParameter> {
    private static readonly pb::MessageParser<V0LayerParameter> _parser = new pb::MessageParser<V0LayerParameter>(() => new V0LayerParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<V0LayerParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[60]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public V0LayerParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public V0LayerParameter(V0LayerParameter other) : this() {
      name_ = other.name_;
      type_ = other.type_;
      numOutput_ = other.numOutput_;
      biasterm_ = other.biasterm_;
      weightFiller_ = other.weightFiller_ != null ? other.weightFiller_.Clone() : null;
      biasFiller_ = other.biasFiller_ != null ? other.biasFiller_.Clone() : null;
      pad_ = other.pad_;
      kernelsize_ = other.kernelsize_;
      group_ = other.group_;
      stride_ = other.stride_;
      pool_ = other.pool_;
      dropoutRatio_ = other.dropoutRatio_;
      localSize_ = other.localSize_;
      alpha_ = other.alpha_;
      beta_ = other.beta_;
      k_ = other.k_;
      source_ = other.source_;
      scale_ = other.scale_;
      meanfile_ = other.meanfile_;
      batchsize_ = other.batchsize_;
      cropsize_ = other.cropsize_;
      mirror_ = other.mirror_;
      blobs_ = other.blobs_.Clone();
      blobsLr_ = other.blobsLr_.Clone();
      weightDecay_ = other.weightDecay_.Clone();
      randSkip_ = other.randSkip_;
      detFgThreshold_ = other.detFgThreshold_;
      detBgThreshold_ = other.detBgThreshold_;
      detFgFraction_ = other.detFgFraction_;
      detContextPad_ = other.detContextPad_;
      detCropMode_ = other.detCropMode_;
      newNum_ = other.newNum_;
      newChannels_ = other.newChannels_;
      newHeight_ = other.newHeight_;
      newWidth_ = other.newWidth_;
      shuffleImages_ = other.shuffleImages_;
      concatDim_ = other.concatDim_;
      hdf5OutputParam_ = other.hdf5OutputParam_ != null ? other.hdf5OutputParam_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public V0LayerParameter Clone() {
      return new V0LayerParameter(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// the layer name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private string type_ = "";
    /// <summary>
    /// the string to specify the layer type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "num_output" field.</summary>
    public const int NumOutputFieldNumber = 3;
    private uint numOutput_;
    /// <summary>
    /// Parameters to specify layers with inner products.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint NumOutput {
      get { return numOutput_; }
      set {
        numOutput_ = value;
      }
    }

    /// <summary>Field number for the "biasterm" field.</summary>
    public const int BiastermFieldNumber = 4;
    private bool biasterm_;
    /// <summary>
    /// whether to have bias terms
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Biasterm {
      get { return biasterm_; }
      set {
        biasterm_ = value;
      }
    }

    /// <summary>Field number for the "weight_filler" field.</summary>
    public const int WeightFillerFieldNumber = 5;
    private global::Caffe.FillerParameter weightFiller_;
    /// <summary>
    /// The filler for the weight
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter WeightFiller {
      get { return weightFiller_; }
      set {
        weightFiller_ = value;
      }
    }

    /// <summary>Field number for the "bias_filler" field.</summary>
    public const int BiasFillerFieldNumber = 6;
    private global::Caffe.FillerParameter biasFiller_;
    /// <summary>
    /// The filler for the bias
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter BiasFiller {
      get { return biasFiller_; }
      set {
        biasFiller_ = value;
      }
    }

    /// <summary>Field number for the "pad" field.</summary>
    public const int PadFieldNumber = 7;
    private uint pad_;
    /// <summary>
    /// The padding size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Pad {
      get { return pad_; }
      set {
        pad_ = value;
      }
    }

    /// <summary>Field number for the "kernelsize" field.</summary>
    public const int KernelsizeFieldNumber = 8;
    private uint kernelsize_;
    /// <summary>
    /// The kernel size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Kernelsize {
      get { return kernelsize_; }
      set {
        kernelsize_ = value;
      }
    }

    /// <summary>Field number for the "group" field.</summary>
    public const int GroupFieldNumber = 9;
    private uint group_;
    /// <summary>
    /// The group size for group conv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Group {
      get { return group_; }
      set {
        group_ = value;
      }
    }

    /// <summary>Field number for the "stride" field.</summary>
    public const int StrideFieldNumber = 10;
    private uint stride_;
    /// <summary>
    /// The stride
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Stride {
      get { return stride_; }
      set {
        stride_ = value;
      }
    }

    /// <summary>Field number for the "pool" field.</summary>
    public const int PoolFieldNumber = 11;
    private global::Caffe.V0LayerParameter.Types.PoolMethod pool_ = 0;
    /// <summary>
    /// The pooling method
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.V0LayerParameter.Types.PoolMethod Pool {
      get { return pool_; }
      set {
        pool_ = value;
      }
    }

    /// <summary>Field number for the "dropout_ratio" field.</summary>
    public const int DropoutRatioFieldNumber = 12;
    private float dropoutRatio_;
    /// <summary>
    /// dropout ratio
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DropoutRatio {
      get { return dropoutRatio_; }
      set {
        dropoutRatio_ = value;
      }
    }

    /// <summary>Field number for the "local_size" field.</summary>
    public const int LocalSizeFieldNumber = 13;
    private uint localSize_;
    /// <summary>
    /// for local response norm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint LocalSize {
      get { return localSize_; }
      set {
        localSize_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 14;
    private float alpha_;
    /// <summary>
    /// for local response norm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 15;
    private float beta_;
    /// <summary>
    /// for local response norm
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    /// <summary>Field number for the "k" field.</summary>
    public const int KFieldNumber = 22;
    private float k_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float K {
      get { return k_; }
      set {
        k_ = value;
      }
    }

    /// <summary>Field number for the "source" field.</summary>
    public const int SourceFieldNumber = 16;
    private string source_ = "";
    /// <summary>
    /// For data layers, specify the data source
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Source {
      get { return source_; }
      set {
        source_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "scale" field.</summary>
    public const int ScaleFieldNumber = 17;
    private float scale_;
    /// <summary>
    /// For data pre-processing, we can do simple scaling and subtracting the
    /// data mean, if provided. Note that the mean subtraction is always carried
    /// out before scaling.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Scale {
      get { return scale_; }
      set {
        scale_ = value;
      }
    }

    /// <summary>Field number for the "meanfile" field.</summary>
    public const int MeanfileFieldNumber = 18;
    private string meanfile_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Meanfile {
      get { return meanfile_; }
      set {
        meanfile_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "batchsize" field.</summary>
    public const int BatchsizeFieldNumber = 19;
    private uint batchsize_;
    /// <summary>
    /// For data layers, specify the batch size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Batchsize {
      get { return batchsize_; }
      set {
        batchsize_ = value;
      }
    }

    /// <summary>Field number for the "cropsize" field.</summary>
    public const int CropsizeFieldNumber = 20;
    private uint cropsize_;
    /// <summary>
    /// For data layers, specify if we would like to randomly crop an image.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Cropsize {
      get { return cropsize_; }
      set {
        cropsize_ = value;
      }
    }

    /// <summary>Field number for the "mirror" field.</summary>
    public const int MirrorFieldNumber = 21;
    private bool mirror_;
    /// <summary>
    /// For data layers, specify if we want to randomly mirror data.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Mirror {
      get { return mirror_; }
      set {
        mirror_ = value;
      }
    }

    /// <summary>Field number for the "blobs" field.</summary>
    public const int BlobsFieldNumber = 50;
    private static readonly pb::FieldCodec<global::Caffe.BlobProto> _repeated_blobs_codec
        = pb::FieldCodec.ForMessage(402, global::Caffe.BlobProto.Parser);
    private readonly pbc::RepeatedField<global::Caffe.BlobProto> blobs_ = new pbc::RepeatedField<global::Caffe.BlobProto>();
    /// <summary>
    /// The blobs containing the numeric parameters of the layer
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Caffe.BlobProto> Blobs {
      get { return blobs_; }
    }

    /// <summary>Field number for the "blobs_lr" field.</summary>
    public const int BlobsLrFieldNumber = 51;
    private static readonly pb::FieldCodec<float> _repeated_blobsLr_codec
        = pb::FieldCodec.ForFloat(410);
    private readonly pbc::RepeatedField<float> blobsLr_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// The ratio that is multiplied on the global learning rate. If you want to
    /// set the learning ratio for one blob, you need to set it for all blobs.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> BlobsLr {
      get { return blobsLr_; }
    }

    /// <summary>Field number for the "weight_decay" field.</summary>
    public const int WeightDecayFieldNumber = 52;
    private static readonly pb::FieldCodec<float> _repeated_weightDecay_codec
        = pb::FieldCodec.ForFloat(418);
    private readonly pbc::RepeatedField<float> weightDecay_ = new pbc::RepeatedField<float>();
    /// <summary>
    /// The weight decay that is multiplied on the global weight decay.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> WeightDecay {
      get { return weightDecay_; }
    }

    /// <summary>Field number for the "rand_skip" field.</summary>
    public const int RandSkipFieldNumber = 53;
    private uint randSkip_;
    /// <summary>
    /// The rand_skip variable is for the data layer to skip a few data points
    /// to avoid all asynchronous sgd clients to start at the same point. The skip
    /// point would be set as rand_skip * rand(0,1). Note that rand_skip should not
    /// be larger than the number of keys in the database.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint RandSkip {
      get { return randSkip_; }
      set {
        randSkip_ = value;
      }
    }

    /// <summary>Field number for the "det_fg_threshold" field.</summary>
    public const int DetFgThresholdFieldNumber = 54;
    private float detFgThreshold_;
    /// <summary>
    /// Fields related to detection (det_*)
    /// foreground (object) overlap threshold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DetFgThreshold {
      get { return detFgThreshold_; }
      set {
        detFgThreshold_ = value;
      }
    }

    /// <summary>Field number for the "det_bg_threshold" field.</summary>
    public const int DetBgThresholdFieldNumber = 55;
    private float detBgThreshold_;
    /// <summary>
    /// background (non-object) overlap threshold
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DetBgThreshold {
      get { return detBgThreshold_; }
      set {
        detBgThreshold_ = value;
      }
    }

    /// <summary>Field number for the "det_fg_fraction" field.</summary>
    public const int DetFgFractionFieldNumber = 56;
    private float detFgFraction_;
    /// <summary>
    /// Fraction of batch that should be foreground objects
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DetFgFraction {
      get { return detFgFraction_; }
      set {
        detFgFraction_ = value;
      }
    }

    /// <summary>Field number for the "det_context_pad" field.</summary>
    public const int DetContextPadFieldNumber = 58;
    private uint detContextPad_;
    /// <summary>
    /// Amount of contextual padding to add around a window
    /// (used only by the window_data_layer)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint DetContextPad {
      get { return detContextPad_; }
      set {
        detContextPad_ = value;
      }
    }

    /// <summary>Field number for the "det_crop_mode" field.</summary>
    public const int DetCropModeFieldNumber = 59;
    private string detCropMode_ = "";
    /// <summary>
    /// Mode for cropping out a detection window
    /// warp: cropped window is warped to a fixed size and aspect ratio
    /// square: the tightest square around the window is cropped
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DetCropMode {
      get { return detCropMode_; }
      set {
        detCropMode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "new_num" field.</summary>
    public const int NewNumFieldNumber = 60;
    private int newNum_;
    /// <summary>
    /// For ReshapeLayer, one needs to specify the new dimensions.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewNum {
      get { return newNum_; }
      set {
        newNum_ = value;
      }
    }

    /// <summary>Field number for the "new_channels" field.</summary>
    public const int NewChannelsFieldNumber = 61;
    private int newChannels_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewChannels {
      get { return newChannels_; }
      set {
        newChannels_ = value;
      }
    }

    /// <summary>Field number for the "new_height" field.</summary>
    public const int NewHeightFieldNumber = 62;
    private int newHeight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewHeight {
      get { return newHeight_; }
      set {
        newHeight_ = value;
      }
    }

    /// <summary>Field number for the "new_width" field.</summary>
    public const int NewWidthFieldNumber = 63;
    private int newWidth_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NewWidth {
      get { return newWidth_; }
      set {
        newWidth_ = value;
      }
    }

    /// <summary>Field number for the "shuffle_images" field.</summary>
    public const int ShuffleImagesFieldNumber = 64;
    private bool shuffleImages_;
    /// <summary>
    /// Whether or not ImageLayer should shuffle the list of files at every epoch.
    /// It will also resize images if new_height or new_width are not zero.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShuffleImages {
      get { return shuffleImages_; }
      set {
        shuffleImages_ = value;
      }
    }

    /// <summary>Field number for the "concat_dim" field.</summary>
    public const int ConcatDimFieldNumber = 65;
    private uint concatDim_;
    /// <summary>
    /// For ConcatLayer, one needs to specify the dimension for concatenation, and
    /// the other dimensions must be the same for all the bottom blobs.
    /// By default it will concatenate blobs along the channels dimension.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint ConcatDim {
      get { return concatDim_; }
      set {
        concatDim_ = value;
      }
    }

    /// <summary>Field number for the "hdf5_output_param" field.</summary>
    public const int Hdf5OutputParamFieldNumber = 1001;
    private global::Caffe.HDF5OutputParameter hdf5OutputParam_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.HDF5OutputParameter Hdf5OutputParam {
      get { return hdf5OutputParam_; }
      set {
        hdf5OutputParam_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as V0LayerParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(V0LayerParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (Type != other.Type) return false;
      if (NumOutput != other.NumOutput) return false;
      if (Biasterm != other.Biasterm) return false;
      if (!object.Equals(WeightFiller, other.WeightFiller)) return false;
      if (!object.Equals(BiasFiller, other.BiasFiller)) return false;
      if (Pad != other.Pad) return false;
      if (Kernelsize != other.Kernelsize) return false;
      if (Group != other.Group) return false;
      if (Stride != other.Stride) return false;
      if (Pool != other.Pool) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DropoutRatio, other.DropoutRatio)) return false;
      if (LocalSize != other.LocalSize) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(K, other.K)) return false;
      if (Source != other.Source) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
      if (Meanfile != other.Meanfile) return false;
      if (Batchsize != other.Batchsize) return false;
      if (Cropsize != other.Cropsize) return false;
      if (Mirror != other.Mirror) return false;
      if(!blobs_.Equals(other.blobs_)) return false;
      if(!blobsLr_.Equals(other.blobsLr_)) return false;
      if(!weightDecay_.Equals(other.weightDecay_)) return false;
      if (RandSkip != other.RandSkip) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DetFgThreshold, other.DetFgThreshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DetBgThreshold, other.DetBgThreshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(DetFgFraction, other.DetFgFraction)) return false;
      if (DetContextPad != other.DetContextPad) return false;
      if (DetCropMode != other.DetCropMode) return false;
      if (NewNum != other.NewNum) return false;
      if (NewChannels != other.NewChannels) return false;
      if (NewHeight != other.NewHeight) return false;
      if (NewWidth != other.NewWidth) return false;
      if (ShuffleImages != other.ShuffleImages) return false;
      if (ConcatDim != other.ConcatDim) return false;
      if (!object.Equals(Hdf5OutputParam, other.Hdf5OutputParam)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (NumOutput != 0) hash ^= NumOutput.GetHashCode();
      if (Biasterm != false) hash ^= Biasterm.GetHashCode();
      if (weightFiller_ != null) hash ^= WeightFiller.GetHashCode();
      if (biasFiller_ != null) hash ^= BiasFiller.GetHashCode();
      if (Pad != 0) hash ^= Pad.GetHashCode();
      if (Kernelsize != 0) hash ^= Kernelsize.GetHashCode();
      if (Group != 0) hash ^= Group.GetHashCode();
      if (Stride != 0) hash ^= Stride.GetHashCode();
      if (Pool != 0) hash ^= Pool.GetHashCode();
      if (DropoutRatio != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DropoutRatio);
      if (LocalSize != 0) hash ^= LocalSize.GetHashCode();
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (K != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(K);
      if (Source.Length != 0) hash ^= Source.GetHashCode();
      if (Scale != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
      if (Meanfile.Length != 0) hash ^= Meanfile.GetHashCode();
      if (Batchsize != 0) hash ^= Batchsize.GetHashCode();
      if (Cropsize != 0) hash ^= Cropsize.GetHashCode();
      if (Mirror != false) hash ^= Mirror.GetHashCode();
      hash ^= blobs_.GetHashCode();
      hash ^= blobsLr_.GetHashCode();
      hash ^= weightDecay_.GetHashCode();
      if (RandSkip != 0) hash ^= RandSkip.GetHashCode();
      if (DetFgThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DetFgThreshold);
      if (DetBgThreshold != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DetBgThreshold);
      if (DetFgFraction != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(DetFgFraction);
      if (DetContextPad != 0) hash ^= DetContextPad.GetHashCode();
      if (DetCropMode.Length != 0) hash ^= DetCropMode.GetHashCode();
      if (NewNum != 0) hash ^= NewNum.GetHashCode();
      if (NewChannels != 0) hash ^= NewChannels.GetHashCode();
      if (NewHeight != 0) hash ^= NewHeight.GetHashCode();
      if (NewWidth != 0) hash ^= NewWidth.GetHashCode();
      if (ShuffleImages != false) hash ^= ShuffleImages.GetHashCode();
      if (ConcatDim != 0) hash ^= ConcatDim.GetHashCode();
      if (hdf5OutputParam_ != null) hash ^= Hdf5OutputParam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Type.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Type);
      }
      if (NumOutput != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(NumOutput);
      }
      if (Biasterm != false) {
        output.WriteRawTag(32);
        output.WriteBool(Biasterm);
      }
      if (weightFiller_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(WeightFiller);
      }
      if (biasFiller_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(BiasFiller);
      }
      if (Pad != 0) {
        output.WriteRawTag(56);
        output.WriteUInt32(Pad);
      }
      if (Kernelsize != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Kernelsize);
      }
      if (Group != 0) {
        output.WriteRawTag(72);
        output.WriteUInt32(Group);
      }
      if (Stride != 0) {
        output.WriteRawTag(80);
        output.WriteUInt32(Stride);
      }
      if (Pool != 0) {
        output.WriteRawTag(88);
        output.WriteEnum((int) Pool);
      }
      if (DropoutRatio != 0F) {
        output.WriteRawTag(101);
        output.WriteFloat(DropoutRatio);
      }
      if (LocalSize != 0) {
        output.WriteRawTag(104);
        output.WriteUInt32(LocalSize);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(117);
        output.WriteFloat(Alpha);
      }
      if (Beta != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(Beta);
      }
      if (Source.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(Source);
      }
      if (Scale != 0F) {
        output.WriteRawTag(141, 1);
        output.WriteFloat(Scale);
      }
      if (Meanfile.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(Meanfile);
      }
      if (Batchsize != 0) {
        output.WriteRawTag(152, 1);
        output.WriteUInt32(Batchsize);
      }
      if (Cropsize != 0) {
        output.WriteRawTag(160, 1);
        output.WriteUInt32(Cropsize);
      }
      if (Mirror != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(Mirror);
      }
      if (K != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(K);
      }
      blobs_.WriteTo(output, _repeated_blobs_codec);
      blobsLr_.WriteTo(output, _repeated_blobsLr_codec);
      weightDecay_.WriteTo(output, _repeated_weightDecay_codec);
      if (RandSkip != 0) {
        output.WriteRawTag(168, 3);
        output.WriteUInt32(RandSkip);
      }
      if (DetFgThreshold != 0F) {
        output.WriteRawTag(181, 3);
        output.WriteFloat(DetFgThreshold);
      }
      if (DetBgThreshold != 0F) {
        output.WriteRawTag(189, 3);
        output.WriteFloat(DetBgThreshold);
      }
      if (DetFgFraction != 0F) {
        output.WriteRawTag(197, 3);
        output.WriteFloat(DetFgFraction);
      }
      if (DetContextPad != 0) {
        output.WriteRawTag(208, 3);
        output.WriteUInt32(DetContextPad);
      }
      if (DetCropMode.Length != 0) {
        output.WriteRawTag(218, 3);
        output.WriteString(DetCropMode);
      }
      if (NewNum != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(NewNum);
      }
      if (NewChannels != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(NewChannels);
      }
      if (NewHeight != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(NewHeight);
      }
      if (NewWidth != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(NewWidth);
      }
      if (ShuffleImages != false) {
        output.WriteRawTag(128, 4);
        output.WriteBool(ShuffleImages);
      }
      if (ConcatDim != 0) {
        output.WriteRawTag(136, 4);
        output.WriteUInt32(ConcatDim);
      }
      if (hdf5OutputParam_ != null) {
        output.WriteRawTag(202, 62);
        output.WriteMessage(Hdf5OutputParam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (NumOutput != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(NumOutput);
      }
      if (Biasterm != false) {
        size += 1 + 1;
      }
      if (weightFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(WeightFiller);
      }
      if (biasFiller_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BiasFiller);
      }
      if (Pad != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Pad);
      }
      if (Kernelsize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Kernelsize);
      }
      if (Group != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Group);
      }
      if (Stride != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Stride);
      }
      if (Pool != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Pool);
      }
      if (DropoutRatio != 0F) {
        size += 1 + 4;
      }
      if (LocalSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LocalSize);
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (Beta != 0F) {
        size += 1 + 4;
      }
      if (K != 0F) {
        size += 2 + 4;
      }
      if (Source.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Source);
      }
      if (Scale != 0F) {
        size += 2 + 4;
      }
      if (Meanfile.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Meanfile);
      }
      if (Batchsize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Batchsize);
      }
      if (Cropsize != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Cropsize);
      }
      if (Mirror != false) {
        size += 2 + 1;
      }
      size += blobs_.CalculateSize(_repeated_blobs_codec);
      size += blobsLr_.CalculateSize(_repeated_blobsLr_codec);
      size += weightDecay_.CalculateSize(_repeated_weightDecay_codec);
      if (RandSkip != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(RandSkip);
      }
      if (DetFgThreshold != 0F) {
        size += 2 + 4;
      }
      if (DetBgThreshold != 0F) {
        size += 2 + 4;
      }
      if (DetFgFraction != 0F) {
        size += 2 + 4;
      }
      if (DetContextPad != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(DetContextPad);
      }
      if (DetCropMode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DetCropMode);
      }
      if (NewNum != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewNum);
      }
      if (NewChannels != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewChannels);
      }
      if (NewHeight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewHeight);
      }
      if (NewWidth != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NewWidth);
      }
      if (ShuffleImages != false) {
        size += 2 + 1;
      }
      if (ConcatDim != 0) {
        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(ConcatDim);
      }
      if (hdf5OutputParam_ != null) {
        size += 2 + pb::CodedOutputStream.ComputeMessageSize(Hdf5OutputParam);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(V0LayerParameter other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      if (other.NumOutput != 0) {
        NumOutput = other.NumOutput;
      }
      if (other.Biasterm != false) {
        Biasterm = other.Biasterm;
      }
      if (other.weightFiller_ != null) {
        if (weightFiller_ == null) {
          weightFiller_ = new global::Caffe.FillerParameter();
        }
        WeightFiller.MergeFrom(other.WeightFiller);
      }
      if (other.biasFiller_ != null) {
        if (biasFiller_ == null) {
          biasFiller_ = new global::Caffe.FillerParameter();
        }
        BiasFiller.MergeFrom(other.BiasFiller);
      }
      if (other.Pad != 0) {
        Pad = other.Pad;
      }
      if (other.Kernelsize != 0) {
        Kernelsize = other.Kernelsize;
      }
      if (other.Group != 0) {
        Group = other.Group;
      }
      if (other.Stride != 0) {
        Stride = other.Stride;
      }
      if (other.Pool != 0) {
        Pool = other.Pool;
      }
      if (other.DropoutRatio != 0F) {
        DropoutRatio = other.DropoutRatio;
      }
      if (other.LocalSize != 0) {
        LocalSize = other.LocalSize;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      if (other.K != 0F) {
        K = other.K;
      }
      if (other.Source.Length != 0) {
        Source = other.Source;
      }
      if (other.Scale != 0F) {
        Scale = other.Scale;
      }
      if (other.Meanfile.Length != 0) {
        Meanfile = other.Meanfile;
      }
      if (other.Batchsize != 0) {
        Batchsize = other.Batchsize;
      }
      if (other.Cropsize != 0) {
        Cropsize = other.Cropsize;
      }
      if (other.Mirror != false) {
        Mirror = other.Mirror;
      }
      blobs_.Add(other.blobs_);
      blobsLr_.Add(other.blobsLr_);
      weightDecay_.Add(other.weightDecay_);
      if (other.RandSkip != 0) {
        RandSkip = other.RandSkip;
      }
      if (other.DetFgThreshold != 0F) {
        DetFgThreshold = other.DetFgThreshold;
      }
      if (other.DetBgThreshold != 0F) {
        DetBgThreshold = other.DetBgThreshold;
      }
      if (other.DetFgFraction != 0F) {
        DetFgFraction = other.DetFgFraction;
      }
      if (other.DetContextPad != 0) {
        DetContextPad = other.DetContextPad;
      }
      if (other.DetCropMode.Length != 0) {
        DetCropMode = other.DetCropMode;
      }
      if (other.NewNum != 0) {
        NewNum = other.NewNum;
      }
      if (other.NewChannels != 0) {
        NewChannels = other.NewChannels;
      }
      if (other.NewHeight != 0) {
        NewHeight = other.NewHeight;
      }
      if (other.NewWidth != 0) {
        NewWidth = other.NewWidth;
      }
      if (other.ShuffleImages != false) {
        ShuffleImages = other.ShuffleImages;
      }
      if (other.ConcatDim != 0) {
        ConcatDim = other.ConcatDim;
      }
      if (other.hdf5OutputParam_ != null) {
        if (hdf5OutputParam_ == null) {
          hdf5OutputParam_ = new global::Caffe.HDF5OutputParameter();
        }
        Hdf5OutputParam.MergeFrom(other.Hdf5OutputParam);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Type = input.ReadString();
            break;
          }
          case 24: {
            NumOutput = input.ReadUInt32();
            break;
          }
          case 32: {
            Biasterm = input.ReadBool();
            break;
          }
          case 42: {
            if (weightFiller_ == null) {
              weightFiller_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(weightFiller_);
            break;
          }
          case 50: {
            if (biasFiller_ == null) {
              biasFiller_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(biasFiller_);
            break;
          }
          case 56: {
            Pad = input.ReadUInt32();
            break;
          }
          case 64: {
            Kernelsize = input.ReadUInt32();
            break;
          }
          case 72: {
            Group = input.ReadUInt32();
            break;
          }
          case 80: {
            Stride = input.ReadUInt32();
            break;
          }
          case 88: {
            pool_ = (global::Caffe.V0LayerParameter.Types.PoolMethod) input.ReadEnum();
            break;
          }
          case 101: {
            DropoutRatio = input.ReadFloat();
            break;
          }
          case 104: {
            LocalSize = input.ReadUInt32();
            break;
          }
          case 117: {
            Alpha = input.ReadFloat();
            break;
          }
          case 125: {
            Beta = input.ReadFloat();
            break;
          }
          case 130: {
            Source = input.ReadString();
            break;
          }
          case 141: {
            Scale = input.ReadFloat();
            break;
          }
          case 146: {
            Meanfile = input.ReadString();
            break;
          }
          case 152: {
            Batchsize = input.ReadUInt32();
            break;
          }
          case 160: {
            Cropsize = input.ReadUInt32();
            break;
          }
          case 168: {
            Mirror = input.ReadBool();
            break;
          }
          case 181: {
            K = input.ReadFloat();
            break;
          }
          case 402: {
            blobs_.AddEntriesFrom(input, _repeated_blobs_codec);
            break;
          }
          case 410:
          case 413: {
            blobsLr_.AddEntriesFrom(input, _repeated_blobsLr_codec);
            break;
          }
          case 418:
          case 421: {
            weightDecay_.AddEntriesFrom(input, _repeated_weightDecay_codec);
            break;
          }
          case 424: {
            RandSkip = input.ReadUInt32();
            break;
          }
          case 437: {
            DetFgThreshold = input.ReadFloat();
            break;
          }
          case 445: {
            DetBgThreshold = input.ReadFloat();
            break;
          }
          case 453: {
            DetFgFraction = input.ReadFloat();
            break;
          }
          case 464: {
            DetContextPad = input.ReadUInt32();
            break;
          }
          case 474: {
            DetCropMode = input.ReadString();
            break;
          }
          case 480: {
            NewNum = input.ReadInt32();
            break;
          }
          case 488: {
            NewChannels = input.ReadInt32();
            break;
          }
          case 496: {
            NewHeight = input.ReadInt32();
            break;
          }
          case 504: {
            NewWidth = input.ReadInt32();
            break;
          }
          case 512: {
            ShuffleImages = input.ReadBool();
            break;
          }
          case 520: {
            ConcatDim = input.ReadUInt32();
            break;
          }
          case 8010: {
            if (hdf5OutputParam_ == null) {
              hdf5OutputParam_ = new global::Caffe.HDF5OutputParameter();
            }
            input.ReadMessage(hdf5OutputParam_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the V0LayerParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum PoolMethod {
        [pbr::OriginalName("MAX")] Max = 0,
        [pbr::OriginalName("AVE")] Ave = 1,
        [pbr::OriginalName("STOCHASTIC")] Stochastic = 2,
      }

    }
    #endregion

  }

  /// <summary>
  /// Parametric ReLU described in K. He et al, Delving Deep into Rectifiers:
  /// Surpassing Human-Level Performance on ImageNet Classification, 2015.
  /// </summary>
  public sealed partial class PReLUParameter : pb::IMessage<PReLUParameter> {
    private static readonly pb::MessageParser<PReLUParameter> _parser = new pb::MessageParser<PReLUParameter>(() => new PReLUParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PReLUParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[61]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PReLUParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PReLUParameter(PReLUParameter other) : this() {
      filler_ = other.filler_ != null ? other.filler_.Clone() : null;
      channelShared_ = other.channelShared_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PReLUParameter Clone() {
      return new PReLUParameter(this);
    }

    /// <summary>Field number for the "filler" field.</summary>
    public const int FillerFieldNumber = 1;
    private global::Caffe.FillerParameter filler_;
    /// <summary>
    /// Initial value of a_i. Default is a_i=0.25 for all i.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FillerParameter Filler {
      get { return filler_; }
      set {
        filler_ = value;
      }
    }

    /// <summary>Field number for the "channel_shared" field.</summary>
    public const int ChannelSharedFieldNumber = 2;
    private bool channelShared_;
    /// <summary>
    /// Whether or not slope parameters are shared across channels.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ChannelShared {
      get { return channelShared_; }
      set {
        channelShared_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PReLUParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PReLUParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Filler, other.Filler)) return false;
      if (ChannelShared != other.ChannelShared) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (filler_ != null) hash ^= Filler.GetHashCode();
      if (ChannelShared != false) hash ^= ChannelShared.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (filler_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Filler);
      }
      if (ChannelShared != false) {
        output.WriteRawTag(16);
        output.WriteBool(ChannelShared);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (filler_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Filler);
      }
      if (ChannelShared != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PReLUParameter other) {
      if (other == null) {
        return;
      }
      if (other.filler_ != null) {
        if (filler_ == null) {
          filler_ = new global::Caffe.FillerParameter();
        }
        Filler.MergeFrom(other.Filler);
      }
      if (other.ChannelShared != false) {
        ChannelShared = other.ChannelShared;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (filler_ == null) {
              filler_ = new global::Caffe.FillerParameter();
            }
            input.ReadMessage(filler_);
            break;
          }
          case 16: {
            ChannelShared = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CombinedMarginParameter : pb::IMessage<CombinedMarginParameter> {
    private static readonly pb::MessageParser<CombinedMarginParameter> _parser = new pb::MessageParser<CombinedMarginParameter>(() => new CombinedMarginParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CombinedMarginParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[62]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombinedMarginParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombinedMarginParameter(CombinedMarginParameter other) : this() {
      m1_ = other.m1_;
      m2_ = other.m2_;
      m3_ = other.m3_;
      transformTest_ = other.transformTest_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CombinedMarginParameter Clone() {
      return new CombinedMarginParameter(this);
    }

    /// <summary>Field number for the "m1" field.</summary>
    public const int M1FieldNumber = 1;
    private float m1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float M1 {
      get { return m1_; }
      set {
        m1_ = value;
      }
    }

    /// <summary>Field number for the "m2" field.</summary>
    public const int M2FieldNumber = 2;
    private float m2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float M2 {
      get { return m2_; }
      set {
        m2_ = value;
      }
    }

    /// <summary>Field number for the "m3" field.</summary>
    public const int M3FieldNumber = 3;
    private float m3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float M3 {
      get { return m3_; }
      set {
        m3_ = value;
      }
    }

    /// <summary>Field number for the "transform_test" field.</summary>
    public const int TransformTestFieldNumber = 4;
    private bool transformTest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TransformTest {
      get { return transformTest_; }
      set {
        transformTest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CombinedMarginParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CombinedMarginParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(M1, other.M1)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(M2, other.M2)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(M3, other.M3)) return false;
      if (TransformTest != other.TransformTest) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (M1 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(M1);
      if (M2 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(M2);
      if (M3 != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(M3);
      if (TransformTest != false) hash ^= TransformTest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (M1 != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(M1);
      }
      if (M2 != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(M2);
      }
      if (M3 != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(M3);
      }
      if (TransformTest != false) {
        output.WriteRawTag(32);
        output.WriteBool(TransformTest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (M1 != 0F) {
        size += 1 + 4;
      }
      if (M2 != 0F) {
        size += 1 + 4;
      }
      if (M3 != 0F) {
        size += 1 + 4;
      }
      if (TransformTest != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CombinedMarginParameter other) {
      if (other == null) {
        return;
      }
      if (other.M1 != 0F) {
        M1 = other.M1;
      }
      if (other.M2 != 0F) {
        M2 = other.M2;
      }
      if (other.M3 != 0F) {
        M3 = other.M3;
      }
      if (other.TransformTest != false) {
        TransformTest = other.TransformTest;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            M1 = input.ReadFloat();
            break;
          }
          case 21: {
            M2 = input.ReadFloat();
            break;
          }
          case 29: {
            M3 = input.ReadFloat();
            break;
          }
          case 32: {
            TransformTest = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CosinAddmParameter : pb::IMessage<CosinAddmParameter> {
    private static readonly pb::MessageParser<CosinAddmParameter> _parser = new pb::MessageParser<CosinAddmParameter>(() => new CosinAddmParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CosinAddmParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[63]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CosinAddmParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CosinAddmParameter(CosinAddmParameter other) : this() {
      m_ = other.m_;
      transformTest_ = other.transformTest_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CosinAddmParameter Clone() {
      return new CosinAddmParameter(this);
    }

    /// <summary>Field number for the "m" field.</summary>
    public const int MFieldNumber = 1;
    private float m_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float M {
      get { return m_; }
      set {
        m_ = value;
      }
    }

    /// <summary>Field number for the "transform_test" field.</summary>
    public const int TransformTestFieldNumber = 2;
    private bool transformTest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TransformTest {
      get { return transformTest_; }
      set {
        transformTest_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CosinAddmParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CosinAddmParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(M, other.M)) return false;
      if (TransformTest != other.TransformTest) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (M != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(M);
      if (TransformTest != false) hash ^= TransformTest.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (M != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(M);
      }
      if (TransformTest != false) {
        output.WriteRawTag(16);
        output.WriteBool(TransformTest);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (M != 0F) {
        size += 1 + 4;
      }
      if (TransformTest != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CosinAddmParameter other) {
      if (other == null) {
        return;
      }
      if (other.M != 0F) {
        M = other.M;
      }
      if (other.TransformTest != false) {
        TransformTest = other.TransformTest;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            M = input.ReadFloat();
            break;
          }
          case 16: {
            TransformTest = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class NormalizeParameter : pb::IMessage<NormalizeParameter> {
    private static readonly pb::MessageParser<NormalizeParameter> _parser = new pb::MessageParser<NormalizeParameter>(() => new NormalizeParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<NormalizeParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[64]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalizeParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalizeParameter(NormalizeParameter other) : this() {
      normalizeType_ = other.normalizeType_;
      fixGradient_ = other.fixGradient_;
      bpNorm_ = other.bpNorm_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public NormalizeParameter Clone() {
      return new NormalizeParameter(this);
    }

    /// <summary>Field number for the "normalize_type" field.</summary>
    public const int NormalizeTypeFieldNumber = 1;
    private string normalizeType_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NormalizeType {
      get { return normalizeType_; }
      set {
        normalizeType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fix_gradient" field.</summary>
    public const int FixGradientFieldNumber = 2;
    private bool fixGradient_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool FixGradient {
      get { return fixGradient_; }
      set {
        fixGradient_ = value;
      }
    }

    /// <summary>Field number for the "bp_norm" field.</summary>
    public const int BpNormFieldNumber = 3;
    private bool bpNorm_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool BpNorm {
      get { return bpNorm_; }
      set {
        bpNorm_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as NormalizeParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(NormalizeParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NormalizeType != other.NormalizeType) return false;
      if (FixGradient != other.FixGradient) return false;
      if (BpNorm != other.BpNorm) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NormalizeType.Length != 0) hash ^= NormalizeType.GetHashCode();
      if (FixGradient != false) hash ^= FixGradient.GetHashCode();
      if (BpNorm != false) hash ^= BpNorm.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NormalizeType.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NormalizeType);
      }
      if (FixGradient != false) {
        output.WriteRawTag(16);
        output.WriteBool(FixGradient);
      }
      if (BpNorm != false) {
        output.WriteRawTag(24);
        output.WriteBool(BpNorm);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NormalizeType.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NormalizeType);
      }
      if (FixGradient != false) {
        size += 1 + 1;
      }
      if (BpNorm != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(NormalizeParameter other) {
      if (other == null) {
        return;
      }
      if (other.NormalizeType.Length != 0) {
        NormalizeType = other.NormalizeType;
      }
      if (other.FixGradient != false) {
        FixGradient = other.FixGradient;
      }
      if (other.BpNorm != false) {
        BpNorm = other.BpNorm;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NormalizeType = input.ReadString();
            break;
          }
          case 16: {
            FixGradient = input.ReadBool();
            break;
          }
          case 24: {
            BpNorm = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class L2NormalizationParameter : pb::IMessage<L2NormalizationParameter> {
    private static readonly pb::MessageParser<L2NormalizationParameter> _parser = new pb::MessageParser<L2NormalizationParameter>(() => new L2NormalizationParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<L2NormalizationParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[65]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2NormalizationParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2NormalizationParameter(L2NormalizationParameter other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public L2NormalizationParameter Clone() {
      return new L2NormalizationParameter(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as L2NormalizationParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(L2NormalizationParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(L2NormalizationParameter other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  /// <summary>
  /// Focal Loss for Dense Object Detection
  /// </summary>
  public sealed partial class FocalLossParameter : pb::IMessage<FocalLossParameter> {
    private static readonly pb::MessageParser<FocalLossParameter> _parser = new pb::MessageParser<FocalLossParameter>(() => new FocalLossParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FocalLossParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[66]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FocalLossParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FocalLossParameter(FocalLossParameter other) : this() {
      type_ = other.type_;
      gamma_ = other.gamma_;
      alpha_ = other.alpha_;
      beta_ = other.beta_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FocalLossParameter Clone() {
      return new FocalLossParameter(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Caffe.FocalLossParameter.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Caffe.FocalLossParameter.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "gamma" field.</summary>
    public const int GammaFieldNumber = 2;
    private float gamma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Gamma {
      get { return gamma_; }
      set {
        gamma_ = value;
      }
    }

    /// <summary>Field number for the "alpha" field.</summary>
    public const int AlphaFieldNumber = 3;
    private float alpha_;
    /// <summary>
    /// cross-categories weights to solve the imbalance problem
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Alpha {
      get { return alpha_; }
      set {
        alpha_ = value;
      }
    }

    /// <summary>Field number for the "beta" field.</summary>
    public const int BetaFieldNumber = 4;
    private float beta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Beta {
      get { return beta_; }
      set {
        beta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FocalLossParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FocalLossParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Gamma, other.Gamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Alpha, other.Alpha)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Beta, other.Beta)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Gamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Gamma);
      if (Alpha != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Alpha);
      if (Beta != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Beta);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (Gamma != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Gamma);
      }
      if (Alpha != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Alpha);
      }
      if (Beta != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Beta);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Gamma != 0F) {
        size += 1 + 4;
      }
      if (Alpha != 0F) {
        size += 1 + 4;
      }
      if (Beta != 0F) {
        size += 1 + 4;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FocalLossParameter other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Gamma != 0F) {
        Gamma = other.Gamma;
      }
      if (other.Alpha != 0F) {
        Alpha = other.Alpha;
      }
      if (other.Beta != 0F) {
        Beta = other.Beta;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Caffe.FocalLossParameter.Types.Type) input.ReadEnum();
            break;
          }
          case 21: {
            Gamma = input.ReadFloat();
            break;
          }
          case 29: {
            Alpha = input.ReadFloat();
            break;
          }
          case 37: {
            Beta = input.ReadFloat();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the FocalLossParameter message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        /// <summary>
        /// FL(p_t)  = -(1 - p_t) ^ gama * log(p_t), where p_t = p if y == 1 else 1 - p, whre p = sigmoid(x)
        /// </summary>
        [pbr::OriginalName("ORIGIN")] Origin = 0,
        /// <summary>
        /// FL*(p_t) = -log(p_t) / gama, where p_t = sigmoid(gama * x_t + beta), where x_t = x * y, y is the ground truth label {-1, 1}
        /// </summary>
        [pbr::OriginalName("LINEAR")] Linear = 1,
        [pbr::OriginalName("ONEADDP")] Oneaddp = 2,
      }

    }
    #endregion

  }

  public sealed partial class LabelSpecificAddParameter : pb::IMessage<LabelSpecificAddParameter> {
    private static readonly pb::MessageParser<LabelSpecificAddParameter> _parser = new pb::MessageParser<LabelSpecificAddParameter>(() => new LabelSpecificAddParameter());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LabelSpecificAddParameter> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Caffe.CaffeReflection.Descriptor.MessageTypes[67]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelSpecificAddParameter() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelSpecificAddParameter(LabelSpecificAddParameter other) : this() {
      bias_ = other.bias_;
      transformTest_ = other.transformTest_;
      biasBase_ = other.biasBase_;
      biasGamma_ = other.biasGamma_;
      biasPower_ = other.biasPower_;
      biasMin_ = other.biasMin_;
      biasMax_ = other.biasMax_;
      iteration_ = other.iteration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LabelSpecificAddParameter Clone() {
      return new LabelSpecificAddParameter(this);
    }

    /// <summary>Field number for the "bias" field.</summary>
    public const int BiasFieldNumber = 1;
    private float bias_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Bias {
      get { return bias_; }
      set {
        bias_ = value;
      }
    }

    /// <summary>Field number for the "transform_test" field.</summary>
    public const int TransformTestFieldNumber = 2;
    private bool transformTest_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool TransformTest {
      get { return transformTest_; }
      set {
        transformTest_ = value;
      }
    }

    /// <summary>Field number for the "bias_base" field.</summary>
    public const int BiasBaseFieldNumber = 3;
    private float biasBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BiasBase {
      get { return biasBase_; }
      set {
        biasBase_ = value;
      }
    }

    /// <summary>Field number for the "bias_gamma" field.</summary>
    public const int BiasGammaFieldNumber = 4;
    private float biasGamma_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BiasGamma {
      get { return biasGamma_; }
      set {
        biasGamma_ = value;
      }
    }

    /// <summary>Field number for the "bias_power" field.</summary>
    public const int BiasPowerFieldNumber = 5;
    private float biasPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BiasPower {
      get { return biasPower_; }
      set {
        biasPower_ = value;
      }
    }

    /// <summary>Field number for the "bias_min" field.</summary>
    public const int BiasMinFieldNumber = 6;
    private float biasMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BiasMin {
      get { return biasMin_; }
      set {
        biasMin_ = value;
      }
    }

    /// <summary>Field number for the "bias_max" field.</summary>
    public const int BiasMaxFieldNumber = 7;
    private float biasMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BiasMax {
      get { return biasMax_; }
      set {
        biasMax_ = value;
      }
    }

    /// <summary>Field number for the "iteration" field.</summary>
    public const int IterationFieldNumber = 8;
    private uint iteration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Iteration {
      get { return iteration_; }
      set {
        iteration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LabelSpecificAddParameter);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LabelSpecificAddParameter other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Bias, other.Bias)) return false;
      if (TransformTest != other.TransformTest) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BiasBase, other.BiasBase)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BiasGamma, other.BiasGamma)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BiasPower, other.BiasPower)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BiasMin, other.BiasMin)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BiasMax, other.BiasMax)) return false;
      if (Iteration != other.Iteration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Bias != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Bias);
      if (TransformTest != false) hash ^= TransformTest.GetHashCode();
      if (BiasBase != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BiasBase);
      if (BiasGamma != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BiasGamma);
      if (BiasPower != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BiasPower);
      if (BiasMin != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BiasMin);
      if (BiasMax != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BiasMax);
      if (Iteration != 0) hash ^= Iteration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Bias != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Bias);
      }
      if (TransformTest != false) {
        output.WriteRawTag(16);
        output.WriteBool(TransformTest);
      }
      if (BiasBase != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(BiasBase);
      }
      if (BiasGamma != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(BiasGamma);
      }
      if (BiasPower != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(BiasPower);
      }
      if (BiasMin != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(BiasMin);
      }
      if (BiasMax != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(BiasMax);
      }
      if (Iteration != 0) {
        output.WriteRawTag(64);
        output.WriteUInt32(Iteration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Bias != 0F) {
        size += 1 + 4;
      }
      if (TransformTest != false) {
        size += 1 + 1;
      }
      if (BiasBase != 0F) {
        size += 1 + 4;
      }
      if (BiasGamma != 0F) {
        size += 1 + 4;
      }
      if (BiasPower != 0F) {
        size += 1 + 4;
      }
      if (BiasMin != 0F) {
        size += 1 + 4;
      }
      if (BiasMax != 0F) {
        size += 1 + 4;
      }
      if (Iteration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Iteration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LabelSpecificAddParameter other) {
      if (other == null) {
        return;
      }
      if (other.Bias != 0F) {
        Bias = other.Bias;
      }
      if (other.TransformTest != false) {
        TransformTest = other.TransformTest;
      }
      if (other.BiasBase != 0F) {
        BiasBase = other.BiasBase;
      }
      if (other.BiasGamma != 0F) {
        BiasGamma = other.BiasGamma;
      }
      if (other.BiasPower != 0F) {
        BiasPower = other.BiasPower;
      }
      if (other.BiasMin != 0F) {
        BiasMin = other.BiasMin;
      }
      if (other.BiasMax != 0F) {
        BiasMax = other.BiasMax;
      }
      if (other.Iteration != 0) {
        Iteration = other.Iteration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 13: {
            Bias = input.ReadFloat();
            break;
          }
          case 16: {
            TransformTest = input.ReadBool();
            break;
          }
          case 29: {
            BiasBase = input.ReadFloat();
            break;
          }
          case 37: {
            BiasGamma = input.ReadFloat();
            break;
          }
          case 45: {
            BiasPower = input.ReadFloat();
            break;
          }
          case 53: {
            BiasMin = input.ReadFloat();
            break;
          }
          case 61: {
            BiasMax = input.ReadFloat();
            break;
          }
          case 64: {
            Iteration = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
