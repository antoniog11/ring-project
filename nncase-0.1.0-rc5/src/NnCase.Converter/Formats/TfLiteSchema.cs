// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace tflite
{

using global::System;
using global::FlatBuffers;

public enum TensorType : sbyte
{
 FLOAT32 = 0,
 FLOAT16 = 1,
 INT32 = 2,
 UINT8 = 3,
 INT64 = 4,
 STRING = 5,
 BOOL = 6,
 INT16 = 7,
 COMPLEX64 = 8,
 INT8 = 9,
};

public enum QuantizationDetails : byte
{
 NONE = 0,
 CustomQuantization = 1,
};

public enum BuiltinOperator : sbyte
{
 ADD = 0,
 AVERAGE_POOL_2D = 1,
 CONCATENATION = 2,
 CONV_2D = 3,
 DEPTHWISE_CONV_2D = 4,
 DEQUANTIZE = 6,
 EMBEDDING_LOOKUP = 7,
 FLOOR = 8,
 FULLY_CONNECTED = 9,
 HASHTABLE_LOOKUP = 10,
 L2_NORMALIZATION = 11,
 L2_POOL_2D = 12,
 LOCAL_RESPONSE_NORMALIZATION = 13,
 LOGISTIC = 14,
 LSH_PROJECTION = 15,
 LSTM = 16,
 MAX_POOL_2D = 17,
 MUL = 18,
 RELU = 19,
 RELU_N1_TO_1 = 20,
 RELU6 = 21,
 RESHAPE = 22,
 RESIZE_BILINEAR = 23,
 RNN = 24,
 SOFTMAX = 25,
 SPACE_TO_DEPTH = 26,
 SVDF = 27,
 TANH = 28,
 CONCAT_EMBEDDINGS = 29,
 SKIP_GRAM = 30,
 CALL = 31,
 CUSTOM = 32,
 EMBEDDING_LOOKUP_SPARSE = 33,
 PAD = 34,
 UNIDIRECTIONAL_SEQUENCE_RNN = 35,
 GATHER = 36,
 BATCH_TO_SPACE_ND = 37,
 SPACE_TO_BATCH_ND = 38,
 TRANSPOSE = 39,
 MEAN = 40,
 SUB = 41,
 DIV = 42,
 SQUEEZE = 43,
 UNIDIRECTIONAL_SEQUENCE_LSTM = 44,
 STRIDED_SLICE = 45,
 BIDIRECTIONAL_SEQUENCE_RNN = 46,
 EXP = 47,
 TOPK_V2 = 48,
 SPLIT = 49,
 LOG_SOFTMAX = 50,
 DELEGATE = 51,
 BIDIRECTIONAL_SEQUENCE_LSTM = 52,
 CAST = 53,
 PRELU = 54,
 MAXIMUM = 55,
 ARG_MAX = 56,
 MINIMUM = 57,
 LESS = 58,
 NEG = 59,
 PADV2 = 60,
 GREATER = 61,
 GREATER_EQUAL = 62,
 LESS_EQUAL = 63,
 SELECT = 64,
 SLICE = 65,
 SIN = 66,
 TRANSPOSE_CONV = 67,
 SPARSE_TO_DENSE = 68,
 TILE = 69,
 EXPAND_DIMS = 70,
 EQUAL = 71,
 NOT_EQUAL = 72,
 LOG = 73,
 SUM = 74,
 SQRT = 75,
 RSQRT = 76,
 SHAPE = 77,
 POW = 78,
 ARG_MIN = 79,
 FAKE_QUANT = 80,
 REDUCE_PROD = 81,
 REDUCE_MAX = 82,
 PACK = 83,
 LOGICAL_OR = 84,
 ONE_HOT = 85,
 LOGICAL_AND = 86,
 LOGICAL_NOT = 87,
 UNPACK = 88,
 REDUCE_MIN = 89,
 FLOOR_DIV = 90,
 REDUCE_ANY = 91,
 SQUARE = 92,
 ZEROS_LIKE = 93,
 FILL = 94,
 FLOOR_MOD = 95,
 RANGE = 96,
 RESIZE_NEAREST_NEIGHBOR = 97,
 LEAKY_RELU = 98,
 SQUARED_DIFFERENCE = 99,
 MIRROR_PAD = 100,
 ABS = 101,
 SPLIT_V = 102,
 UNIQUE = 103,
 CEIL = 104,
 REVERSE_V2 = 105,
 ADD_N = 106,
 GATHER_ND = 107,
 COS = 108,
 WHERE = 109,
 RANK = 110,
 ELU = 111,
 REVERSE_SEQUENCE = 112,
};

public enum BuiltinOptions : byte
{
 NONE = 0,
 Conv2DOptions = 1,
 DepthwiseConv2DOptions = 2,
 ConcatEmbeddingsOptions = 3,
 LSHProjectionOptions = 4,
 Pool2DOptions = 5,
 SVDFOptions = 6,
 RNNOptions = 7,
 FullyConnectedOptions = 8,
 SoftmaxOptions = 9,
 ConcatenationOptions = 10,
 AddOptions = 11,
 L2NormOptions = 12,
 LocalResponseNormalizationOptions = 13,
 LSTMOptions = 14,
 ResizeBilinearOptions = 15,
 CallOptions = 16,
 ReshapeOptions = 17,
 SkipGramOptions = 18,
 SpaceToDepthOptions = 19,
 EmbeddingLookupSparseOptions = 20,
 MulOptions = 21,
 PadOptions = 22,
 GatherOptions = 23,
 BatchToSpaceNDOptions = 24,
 SpaceToBatchNDOptions = 25,
 TransposeOptions = 26,
 ReducerOptions = 27,
 SubOptions = 28,
 DivOptions = 29,
 SqueezeOptions = 30,
 SequenceRNNOptions = 31,
 StridedSliceOptions = 32,
 ExpOptions = 33,
 TopKV2Options = 34,
 SplitOptions = 35,
 LogSoftmaxOptions = 36,
 CastOptions = 37,
 DequantizeOptions = 38,
 MaximumMinimumOptions = 39,
 ArgMaxOptions = 40,
 LessOptions = 41,
 NegOptions = 42,
 PadV2Options = 43,
 GreaterOptions = 44,
 GreaterEqualOptions = 45,
 LessEqualOptions = 46,
 SelectOptions = 47,
 SliceOptions = 48,
 TransposeConvOptions = 49,
 SparseToDenseOptions = 50,
 TileOptions = 51,
 ExpandDimsOptions = 52,
 EqualOptions = 53,
 NotEqualOptions = 54,
 ShapeOptions = 55,
 PowOptions = 56,
 ArgMinOptions = 57,
 FakeQuantOptions = 58,
 PackOptions = 59,
 LogicalOrOptions = 60,
 OneHotOptions = 61,
 LogicalAndOptions = 62,
 LogicalNotOptions = 63,
 UnpackOptions = 64,
 FloorDivOptions = 65,
 SquareOptions = 66,
 ZerosLikeOptions = 67,
 FillOptions = 68,
 BidirectionalSequenceLSTMOptions = 69,
 BidirectionalSequenceRNNOptions = 70,
 UnidirectionalSequenceLSTMOptions = 71,
 FloorModOptions = 72,
 RangeOptions = 73,
 ResizeNearestNeighborOptions = 74,
 LeakyReluOptions = 75,
 SquaredDifferenceOptions = 76,
 MirrorPadOptions = 77,
 AbsOptions = 78,
 SplitVOptions = 79,
 UniqueOptions = 80,
 ReverseV2Options = 81,
 AddNOptions = 82,
 GatherNdOptions = 83,
 CosOptions = 84,
 WhereOptions = 85,
 RankOptions = 86,
 ReverseSequenceOptions = 87,
};

public enum Padding : sbyte
{
 SAME = 0,
 VALID = 1,
};

public enum ActivationFunctionType : sbyte
{
 NONE = 0,
 RELU = 1,
 RELU_N1_TO_1 = 2,
 RELU6 = 3,
 TANH = 4,
 SIGN_BIT = 5,
};

public enum LSHProjectionType : sbyte
{
 UNKNOWN = 0,
 SPARSE = 1,
 DENSE = 2,
};

public enum FullyConnectedOptionsWeightsFormat : sbyte
{
 DEFAULT = 0,
 SHUFFLED4x16INT8 = 1,
};

public enum LSTMKernelType : sbyte
{
 FULL = 0,
 BASIC = 1,
};

public enum CombinerType : sbyte
{
 SUM = 0,
 MEAN = 1,
 SQRTN = 2,
};

public enum MirrorPadMode : sbyte
{
 REFLECT = 0,
 SYMMETRIC = 1,
};

public enum CustomOptionsFormat : sbyte
{
 FLEXBUFFERS = 0,
};

public struct CustomQuantization : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CustomQuantization GetRootAsCustomQuantization(ByteBuffer _bb) { return GetRootAsCustomQuantization(_bb, new CustomQuantization()); }
  public static CustomQuantization GetRootAsCustomQuantization(ByteBuffer _bb, CustomQuantization obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CustomQuantization __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Custom(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int CustomLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCustomBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetCustomBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCustomArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<CustomQuantization> CreateCustomQuantization(FlatBufferBuilder builder,
      VectorOffset customOffset = default(VectorOffset)) {
    builder.StartObject(1);
    CustomQuantization.AddCustom(builder, customOffset);
    return CustomQuantization.EndCustomQuantization(builder);
  }

  public static void StartCustomQuantization(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddCustom(FlatBufferBuilder builder, VectorOffset customOffset) { builder.AddOffset(0, customOffset.Value, 0); }
  public static VectorOffset CreateCustomVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCustomVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartCustomVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<CustomQuantization> EndCustomQuantization(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CustomQuantization>(o);
  }
};

public struct QuantizationParameters : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static QuantizationParameters GetRootAsQuantizationParameters(ByteBuffer _bb) { return GetRootAsQuantizationParameters(_bb, new QuantizationParameters()); }
  public static QuantizationParameters GetRootAsQuantizationParameters(ByteBuffer _bb, QuantizationParameters obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public QuantizationParameters __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Min(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int MinLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMinBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetMinBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public float[] GetMinArray() { return __p.__vector_as_array<float>(4); }
  public float Max(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int MaxLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMaxBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetMaxBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public float[] GetMaxArray() { return __p.__vector_as_array<float>(6); }
  public float Scale(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int ScaleLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetScaleBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetScaleBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public float[] GetScaleArray() { return __p.__vector_as_array<float>(8); }
  public long ZeroPoint(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetLong(__p.__vector(o) + j * 8) : (long)0; }
  public int ZeroPointLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetZeroPointBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetZeroPointBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public long[] GetZeroPointArray() { return __p.__vector_as_array<long>(10); }
  public QuantizationDetails DetailsType { get { int o = __p.__offset(12); return o != 0 ? (QuantizationDetails)__p.bb.Get(o + __p.bb_pos) : QuantizationDetails.NONE; } }
  public TTable? Details<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(14); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }
  public int QuantizedDimension { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<QuantizationParameters> CreateQuantizationParameters(FlatBufferBuilder builder,
      VectorOffset minOffset = default(VectorOffset),
      VectorOffset maxOffset = default(VectorOffset),
      VectorOffset scaleOffset = default(VectorOffset),
      VectorOffset zero_pointOffset = default(VectorOffset),
      QuantizationDetails details_type = QuantizationDetails.NONE,
      int detailsOffset = 0,
      int quantized_dimension = 0) {
    builder.StartObject(7);
    QuantizationParameters.AddQuantizedDimension(builder, quantized_dimension);
    QuantizationParameters.AddDetails(builder, detailsOffset);
    QuantizationParameters.AddZeroPoint(builder, zero_pointOffset);
    QuantizationParameters.AddScale(builder, scaleOffset);
    QuantizationParameters.AddMax(builder, maxOffset);
    QuantizationParameters.AddMin(builder, minOffset);
    QuantizationParameters.AddDetailsType(builder, details_type);
    return QuantizationParameters.EndQuantizationParameters(builder);
  }

  public static void StartQuantizationParameters(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddMin(FlatBufferBuilder builder, VectorOffset minOffset) { builder.AddOffset(0, minOffset.Value, 0); }
  public static VectorOffset CreateMinVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMinVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMinVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMax(FlatBufferBuilder builder, VectorOffset maxOffset) { builder.AddOffset(1, maxOffset.Value, 0); }
  public static VectorOffset CreateMaxVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMaxVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMaxVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddScale(FlatBufferBuilder builder, VectorOffset scaleOffset) { builder.AddOffset(2, scaleOffset.Value, 0); }
  public static VectorOffset CreateScaleVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateScaleVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartScaleVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddZeroPoint(FlatBufferBuilder builder, VectorOffset zeroPointOffset) { builder.AddOffset(3, zeroPointOffset.Value, 0); }
  public static VectorOffset CreateZeroPointVector(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddLong(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateZeroPointVectorBlock(FlatBufferBuilder builder, long[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartZeroPointVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static void AddDetailsType(FlatBufferBuilder builder, QuantizationDetails detailsType) { builder.AddByte(4, (byte)detailsType, 0); }
  public static void AddDetails(FlatBufferBuilder builder, int detailsOffset) { builder.AddOffset(5, detailsOffset, 0); }
  public static void AddQuantizedDimension(FlatBufferBuilder builder, int quantizedDimension) { builder.AddInt(6, quantizedDimension, 0); }
  public static Offset<QuantizationParameters> EndQuantizationParameters(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<QuantizationParameters>(o);
  }
};

public struct Tensor : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Tensor GetRootAsTensor(ByteBuffer _bb) { return GetRootAsTensor(_bb, new Tensor()); }
  public static Tensor GetRootAsTensor(ByteBuffer _bb, Tensor obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Tensor __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Shape(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int ShapeLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetShapeBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetShapeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetShapeArray() { return __p.__vector_as_array<int>(4); }
  public TensorType Type { get { int o = __p.__offset(6); return o != 0 ? (TensorType)__p.bb.GetSbyte(o + __p.bb_pos) : TensorType.FLOAT32; } }
  public uint Buffer { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public string Name { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(10); }
  public QuantizationParameters? Quantization { get { int o = __p.__offset(12); return o != 0 ? (QuantizationParameters?)(new QuantizationParameters()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool IsVariable { get { int o = __p.__offset(14); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<Tensor> CreateTensor(FlatBufferBuilder builder,
      VectorOffset shapeOffset = default(VectorOffset),
      TensorType type = TensorType.FLOAT32,
      uint buffer = 0,
      StringOffset nameOffset = default(StringOffset),
      Offset<QuantizationParameters> quantizationOffset = default(Offset<QuantizationParameters>),
      bool is_variable = false) {
    builder.StartObject(6);
    Tensor.AddQuantization(builder, quantizationOffset);
    Tensor.AddName(builder, nameOffset);
    Tensor.AddBuffer(builder, buffer);
    Tensor.AddShape(builder, shapeOffset);
    Tensor.AddIsVariable(builder, is_variable);
    Tensor.AddType(builder, type);
    return Tensor.EndTensor(builder);
  }

  public static void StartTensor(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddShape(FlatBufferBuilder builder, VectorOffset shapeOffset) { builder.AddOffset(0, shapeOffset.Value, 0); }
  public static VectorOffset CreateShapeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateShapeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartShapeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddType(FlatBufferBuilder builder, TensorType type) { builder.AddSbyte(1, (sbyte)type, 0); }
  public static void AddBuffer(FlatBufferBuilder builder, uint buffer) { builder.AddUint(2, buffer, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(3, nameOffset.Value, 0); }
  public static void AddQuantization(FlatBufferBuilder builder, Offset<QuantizationParameters> quantizationOffset) { builder.AddOffset(4, quantizationOffset.Value, 0); }
  public static void AddIsVariable(FlatBufferBuilder builder, bool isVariable) { builder.AddBool(5, isVariable, false); }
  public static Offset<Tensor> EndTensor(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Tensor>(o);
  }
};

public struct Conv2DOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Conv2DOptions GetRootAsConv2DOptions(ByteBuffer _bb) { return GetRootAsConv2DOptions(_bb, new Conv2DOptions()); }
  public static Conv2DOptions GetRootAsConv2DOptions(ByteBuffer _bb, Conv2DOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Conv2DOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Padding Padding { get { int o = __p.__offset(4); return o != 0 ? (Padding)__p.bb.GetSbyte(o + __p.bb_pos) : Padding.SAME; } }
  public int StrideW { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StrideH { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(10); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }
  public int DilationWFactor { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int DilationHFactor { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }

  public static Offset<Conv2DOptions> CreateConv2DOptions(FlatBufferBuilder builder,
      Padding padding = Padding.SAME,
      int stride_w = 0,
      int stride_h = 0,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE,
      int dilation_w_factor = 1,
      int dilation_h_factor = 1) {
    builder.StartObject(6);
    Conv2DOptions.AddDilationHFactor(builder, dilation_h_factor);
    Conv2DOptions.AddDilationWFactor(builder, dilation_w_factor);
    Conv2DOptions.AddStrideH(builder, stride_h);
    Conv2DOptions.AddStrideW(builder, stride_w);
    Conv2DOptions.AddFusedActivationFunction(builder, fused_activation_function);
    Conv2DOptions.AddPadding(builder, padding);
    return Conv2DOptions.EndConv2DOptions(builder);
  }

  public static void StartConv2DOptions(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddPadding(FlatBufferBuilder builder, Padding padding) { builder.AddSbyte(0, (sbyte)padding, 0); }
  public static void AddStrideW(FlatBufferBuilder builder, int strideW) { builder.AddInt(1, strideW, 0); }
  public static void AddStrideH(FlatBufferBuilder builder, int strideH) { builder.AddInt(2, strideH, 0); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(3, (sbyte)fusedActivationFunction, 0); }
  public static void AddDilationWFactor(FlatBufferBuilder builder, int dilationWFactor) { builder.AddInt(4, dilationWFactor, 1); }
  public static void AddDilationHFactor(FlatBufferBuilder builder, int dilationHFactor) { builder.AddInt(5, dilationHFactor, 1); }
  public static Offset<Conv2DOptions> EndConv2DOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Conv2DOptions>(o);
  }
};

public struct Pool2DOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Pool2DOptions GetRootAsPool2DOptions(ByteBuffer _bb) { return GetRootAsPool2DOptions(_bb, new Pool2DOptions()); }
  public static Pool2DOptions GetRootAsPool2DOptions(ByteBuffer _bb, Pool2DOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Pool2DOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Padding Padding { get { int o = __p.__offset(4); return o != 0 ? (Padding)__p.bb.GetSbyte(o + __p.bb_pos) : Padding.SAME; } }
  public int StrideW { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StrideH { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FilterWidth { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int FilterHeight { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(14); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }

  public static Offset<Pool2DOptions> CreatePool2DOptions(FlatBufferBuilder builder,
      Padding padding = Padding.SAME,
      int stride_w = 0,
      int stride_h = 0,
      int filter_width = 0,
      int filter_height = 0,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE) {
    builder.StartObject(6);
    Pool2DOptions.AddFilterHeight(builder, filter_height);
    Pool2DOptions.AddFilterWidth(builder, filter_width);
    Pool2DOptions.AddStrideH(builder, stride_h);
    Pool2DOptions.AddStrideW(builder, stride_w);
    Pool2DOptions.AddFusedActivationFunction(builder, fused_activation_function);
    Pool2DOptions.AddPadding(builder, padding);
    return Pool2DOptions.EndPool2DOptions(builder);
  }

  public static void StartPool2DOptions(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddPadding(FlatBufferBuilder builder, Padding padding) { builder.AddSbyte(0, (sbyte)padding, 0); }
  public static void AddStrideW(FlatBufferBuilder builder, int strideW) { builder.AddInt(1, strideW, 0); }
  public static void AddStrideH(FlatBufferBuilder builder, int strideH) { builder.AddInt(2, strideH, 0); }
  public static void AddFilterWidth(FlatBufferBuilder builder, int filterWidth) { builder.AddInt(3, filterWidth, 0); }
  public static void AddFilterHeight(FlatBufferBuilder builder, int filterHeight) { builder.AddInt(4, filterHeight, 0); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(5, (sbyte)fusedActivationFunction, 0); }
  public static Offset<Pool2DOptions> EndPool2DOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Pool2DOptions>(o);
  }
};

public struct DepthwiseConv2DOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DepthwiseConv2DOptions GetRootAsDepthwiseConv2DOptions(ByteBuffer _bb) { return GetRootAsDepthwiseConv2DOptions(_bb, new DepthwiseConv2DOptions()); }
  public static DepthwiseConv2DOptions GetRootAsDepthwiseConv2DOptions(ByteBuffer _bb, DepthwiseConv2DOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DepthwiseConv2DOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Padding Padding { get { int o = __p.__offset(4); return o != 0 ? (Padding)__p.bb.GetSbyte(o + __p.bb_pos) : Padding.SAME; } }
  public int StrideW { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StrideH { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int DepthMultiplier { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(12); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }
  public int DilationWFactor { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }
  public int DilationHFactor { get { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }

  public static Offset<DepthwiseConv2DOptions> CreateDepthwiseConv2DOptions(FlatBufferBuilder builder,
      Padding padding = Padding.SAME,
      int stride_w = 0,
      int stride_h = 0,
      int depth_multiplier = 0,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE,
      int dilation_w_factor = 1,
      int dilation_h_factor = 1) {
    builder.StartObject(7);
    DepthwiseConv2DOptions.AddDilationHFactor(builder, dilation_h_factor);
    DepthwiseConv2DOptions.AddDilationWFactor(builder, dilation_w_factor);
    DepthwiseConv2DOptions.AddDepthMultiplier(builder, depth_multiplier);
    DepthwiseConv2DOptions.AddStrideH(builder, stride_h);
    DepthwiseConv2DOptions.AddStrideW(builder, stride_w);
    DepthwiseConv2DOptions.AddFusedActivationFunction(builder, fused_activation_function);
    DepthwiseConv2DOptions.AddPadding(builder, padding);
    return DepthwiseConv2DOptions.EndDepthwiseConv2DOptions(builder);
  }

  public static void StartDepthwiseConv2DOptions(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddPadding(FlatBufferBuilder builder, Padding padding) { builder.AddSbyte(0, (sbyte)padding, 0); }
  public static void AddStrideW(FlatBufferBuilder builder, int strideW) { builder.AddInt(1, strideW, 0); }
  public static void AddStrideH(FlatBufferBuilder builder, int strideH) { builder.AddInt(2, strideH, 0); }
  public static void AddDepthMultiplier(FlatBufferBuilder builder, int depthMultiplier) { builder.AddInt(3, depthMultiplier, 0); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(4, (sbyte)fusedActivationFunction, 0); }
  public static void AddDilationWFactor(FlatBufferBuilder builder, int dilationWFactor) { builder.AddInt(5, dilationWFactor, 1); }
  public static void AddDilationHFactor(FlatBufferBuilder builder, int dilationHFactor) { builder.AddInt(6, dilationHFactor, 1); }
  public static Offset<DepthwiseConv2DOptions> EndDepthwiseConv2DOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DepthwiseConv2DOptions>(o);
  }
};

public struct ConcatEmbeddingsOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ConcatEmbeddingsOptions GetRootAsConcatEmbeddingsOptions(ByteBuffer _bb) { return GetRootAsConcatEmbeddingsOptions(_bb, new ConcatEmbeddingsOptions()); }
  public static ConcatEmbeddingsOptions GetRootAsConcatEmbeddingsOptions(ByteBuffer _bb, ConcatEmbeddingsOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ConcatEmbeddingsOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int NumChannels { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NumColumnsPerChannel(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NumColumnsPerChannelLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNumColumnsPerChannelBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNumColumnsPerChannelBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetNumColumnsPerChannelArray() { return __p.__vector_as_array<int>(6); }
  public int EmbeddingDimPerChannel(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int EmbeddingDimPerChannelLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetEmbeddingDimPerChannelBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetEmbeddingDimPerChannelBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetEmbeddingDimPerChannelArray() { return __p.__vector_as_array<int>(8); }

  public static Offset<ConcatEmbeddingsOptions> CreateConcatEmbeddingsOptions(FlatBufferBuilder builder,
      int num_channels = 0,
      VectorOffset num_columns_per_channelOffset = default(VectorOffset),
      VectorOffset embedding_dim_per_channelOffset = default(VectorOffset)) {
    builder.StartObject(3);
    ConcatEmbeddingsOptions.AddEmbeddingDimPerChannel(builder, embedding_dim_per_channelOffset);
    ConcatEmbeddingsOptions.AddNumColumnsPerChannel(builder, num_columns_per_channelOffset);
    ConcatEmbeddingsOptions.AddNumChannels(builder, num_channels);
    return ConcatEmbeddingsOptions.EndConcatEmbeddingsOptions(builder);
  }

  public static void StartConcatEmbeddingsOptions(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddNumChannels(FlatBufferBuilder builder, int numChannels) { builder.AddInt(0, numChannels, 0); }
  public static void AddNumColumnsPerChannel(FlatBufferBuilder builder, VectorOffset numColumnsPerChannelOffset) { builder.AddOffset(1, numColumnsPerChannelOffset.Value, 0); }
  public static VectorOffset CreateNumColumnsPerChannelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNumColumnsPerChannelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNumColumnsPerChannelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddEmbeddingDimPerChannel(FlatBufferBuilder builder, VectorOffset embeddingDimPerChannelOffset) { builder.AddOffset(2, embeddingDimPerChannelOffset.Value, 0); }
  public static VectorOffset CreateEmbeddingDimPerChannelVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateEmbeddingDimPerChannelVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEmbeddingDimPerChannelVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ConcatEmbeddingsOptions> EndConcatEmbeddingsOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ConcatEmbeddingsOptions>(o);
  }
};

public struct LSHProjectionOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LSHProjectionOptions GetRootAsLSHProjectionOptions(ByteBuffer _bb) { return GetRootAsLSHProjectionOptions(_bb, new LSHProjectionOptions()); }
  public static LSHProjectionOptions GetRootAsLSHProjectionOptions(ByteBuffer _bb, LSHProjectionOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LSHProjectionOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public LSHProjectionType Type { get { int o = __p.__offset(4); return o != 0 ? (LSHProjectionType)__p.bb.GetSbyte(o + __p.bb_pos) : LSHProjectionType.UNKNOWN; } }

  public static Offset<LSHProjectionOptions> CreateLSHProjectionOptions(FlatBufferBuilder builder,
      LSHProjectionType type = LSHProjectionType.UNKNOWN) {
    builder.StartObject(1);
    LSHProjectionOptions.AddType(builder, type);
    return LSHProjectionOptions.EndLSHProjectionOptions(builder);
  }

  public static void StartLSHProjectionOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddType(FlatBufferBuilder builder, LSHProjectionType type) { builder.AddSbyte(0, (sbyte)type, 0); }
  public static Offset<LSHProjectionOptions> EndLSHProjectionOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LSHProjectionOptions>(o);
  }
};

public struct SVDFOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SVDFOptions GetRootAsSVDFOptions(ByteBuffer _bb) { return GetRootAsSVDFOptions(_bb, new SVDFOptions()); }
  public static SVDFOptions GetRootAsSVDFOptions(ByteBuffer _bb, SVDFOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SVDFOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Rank { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(6); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }

  public static Offset<SVDFOptions> CreateSVDFOptions(FlatBufferBuilder builder,
      int rank = 0,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE) {
    builder.StartObject(2);
    SVDFOptions.AddRank(builder, rank);
    SVDFOptions.AddFusedActivationFunction(builder, fused_activation_function);
    return SVDFOptions.EndSVDFOptions(builder);
  }

  public static void StartSVDFOptions(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddRank(FlatBufferBuilder builder, int rank) { builder.AddInt(0, rank, 0); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(1, (sbyte)fusedActivationFunction, 0); }
  public static Offset<SVDFOptions> EndSVDFOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SVDFOptions>(o);
  }
};

public struct RNNOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RNNOptions GetRootAsRNNOptions(ByteBuffer _bb) { return GetRootAsRNNOptions(_bb, new RNNOptions()); }
  public static RNNOptions GetRootAsRNNOptions(ByteBuffer _bb, RNNOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RNNOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(4); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }

  public static Offset<RNNOptions> CreateRNNOptions(FlatBufferBuilder builder,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE) {
    builder.StartObject(1);
    RNNOptions.AddFusedActivationFunction(builder, fused_activation_function);
    return RNNOptions.EndRNNOptions(builder);
  }

  public static void StartRNNOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(0, (sbyte)fusedActivationFunction, 0); }
  public static Offset<RNNOptions> EndRNNOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RNNOptions>(o);
  }
};

public struct SequenceRNNOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SequenceRNNOptions GetRootAsSequenceRNNOptions(ByteBuffer _bb) { return GetRootAsSequenceRNNOptions(_bb, new SequenceRNNOptions()); }
  public static SequenceRNNOptions GetRootAsSequenceRNNOptions(ByteBuffer _bb, SequenceRNNOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SequenceRNNOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool TimeMajor { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(6); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }

  public static Offset<SequenceRNNOptions> CreateSequenceRNNOptions(FlatBufferBuilder builder,
      bool time_major = false,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE) {
    builder.StartObject(2);
    SequenceRNNOptions.AddFusedActivationFunction(builder, fused_activation_function);
    SequenceRNNOptions.AddTimeMajor(builder, time_major);
    return SequenceRNNOptions.EndSequenceRNNOptions(builder);
  }

  public static void StartSequenceRNNOptions(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTimeMajor(FlatBufferBuilder builder, bool timeMajor) { builder.AddBool(0, timeMajor, false); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(1, (sbyte)fusedActivationFunction, 0); }
  public static Offset<SequenceRNNOptions> EndSequenceRNNOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SequenceRNNOptions>(o);
  }
};

public struct BidirectionalSequenceRNNOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BidirectionalSequenceRNNOptions GetRootAsBidirectionalSequenceRNNOptions(ByteBuffer _bb) { return GetRootAsBidirectionalSequenceRNNOptions(_bb, new BidirectionalSequenceRNNOptions()); }
  public static BidirectionalSequenceRNNOptions GetRootAsBidirectionalSequenceRNNOptions(ByteBuffer _bb, BidirectionalSequenceRNNOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BidirectionalSequenceRNNOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool TimeMajor { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(6); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }
  public bool MergeOutputs { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<BidirectionalSequenceRNNOptions> CreateBidirectionalSequenceRNNOptions(FlatBufferBuilder builder,
      bool time_major = false,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE,
      bool merge_outputs = false) {
    builder.StartObject(3);
    BidirectionalSequenceRNNOptions.AddMergeOutputs(builder, merge_outputs);
    BidirectionalSequenceRNNOptions.AddFusedActivationFunction(builder, fused_activation_function);
    BidirectionalSequenceRNNOptions.AddTimeMajor(builder, time_major);
    return BidirectionalSequenceRNNOptions.EndBidirectionalSequenceRNNOptions(builder);
  }

  public static void StartBidirectionalSequenceRNNOptions(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddTimeMajor(FlatBufferBuilder builder, bool timeMajor) { builder.AddBool(0, timeMajor, false); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(1, (sbyte)fusedActivationFunction, 0); }
  public static void AddMergeOutputs(FlatBufferBuilder builder, bool mergeOutputs) { builder.AddBool(2, mergeOutputs, false); }
  public static Offset<BidirectionalSequenceRNNOptions> EndBidirectionalSequenceRNNOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BidirectionalSequenceRNNOptions>(o);
  }
};

public struct FullyConnectedOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FullyConnectedOptions GetRootAsFullyConnectedOptions(ByteBuffer _bb) { return GetRootAsFullyConnectedOptions(_bb, new FullyConnectedOptions()); }
  public static FullyConnectedOptions GetRootAsFullyConnectedOptions(ByteBuffer _bb, FullyConnectedOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FullyConnectedOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(4); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }
  public FullyConnectedOptionsWeightsFormat WeightsFormat { get { int o = __p.__offset(6); return o != 0 ? (FullyConnectedOptionsWeightsFormat)__p.bb.GetSbyte(o + __p.bb_pos) : FullyConnectedOptionsWeightsFormat.DEFAULT; } }

  public static Offset<FullyConnectedOptions> CreateFullyConnectedOptions(FlatBufferBuilder builder,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE,
      FullyConnectedOptionsWeightsFormat weights_format = FullyConnectedOptionsWeightsFormat.DEFAULT) {
    builder.StartObject(2);
    FullyConnectedOptions.AddWeightsFormat(builder, weights_format);
    FullyConnectedOptions.AddFusedActivationFunction(builder, fused_activation_function);
    return FullyConnectedOptions.EndFullyConnectedOptions(builder);
  }

  public static void StartFullyConnectedOptions(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(0, (sbyte)fusedActivationFunction, 0); }
  public static void AddWeightsFormat(FlatBufferBuilder builder, FullyConnectedOptionsWeightsFormat weightsFormat) { builder.AddSbyte(1, (sbyte)weightsFormat, 0); }
  public static Offset<FullyConnectedOptions> EndFullyConnectedOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FullyConnectedOptions>(o);
  }
};

public struct SoftmaxOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SoftmaxOptions GetRootAsSoftmaxOptions(ByteBuffer _bb) { return GetRootAsSoftmaxOptions(_bb, new SoftmaxOptions()); }
  public static SoftmaxOptions GetRootAsSoftmaxOptions(ByteBuffer _bb, SoftmaxOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SoftmaxOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Beta { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<SoftmaxOptions> CreateSoftmaxOptions(FlatBufferBuilder builder,
      float beta = 0.0f) {
    builder.StartObject(1);
    SoftmaxOptions.AddBeta(builder, beta);
    return SoftmaxOptions.EndSoftmaxOptions(builder);
  }

  public static void StartSoftmaxOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddBeta(FlatBufferBuilder builder, float beta) { builder.AddFloat(0, beta, 0.0f); }
  public static Offset<SoftmaxOptions> EndSoftmaxOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SoftmaxOptions>(o);
  }
};

public struct ConcatenationOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ConcatenationOptions GetRootAsConcatenationOptions(ByteBuffer _bb) { return GetRootAsConcatenationOptions(_bb, new ConcatenationOptions()); }
  public static ConcatenationOptions GetRootAsConcatenationOptions(ByteBuffer _bb, ConcatenationOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ConcatenationOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Axis { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(6); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }

  public static Offset<ConcatenationOptions> CreateConcatenationOptions(FlatBufferBuilder builder,
      int axis = 0,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE) {
    builder.StartObject(2);
    ConcatenationOptions.AddAxis(builder, axis);
    ConcatenationOptions.AddFusedActivationFunction(builder, fused_activation_function);
    return ConcatenationOptions.EndConcatenationOptions(builder);
  }

  public static void StartConcatenationOptions(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddAxis(FlatBufferBuilder builder, int axis) { builder.AddInt(0, axis, 0); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(1, (sbyte)fusedActivationFunction, 0); }
  public static Offset<ConcatenationOptions> EndConcatenationOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ConcatenationOptions>(o);
  }
};

public struct AddOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AddOptions GetRootAsAddOptions(ByteBuffer _bb) { return GetRootAsAddOptions(_bb, new AddOptions()); }
  public static AddOptions GetRootAsAddOptions(ByteBuffer _bb, AddOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AddOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(4); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }

  public static Offset<AddOptions> CreateAddOptions(FlatBufferBuilder builder,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE) {
    builder.StartObject(1);
    AddOptions.AddFusedActivationFunction(builder, fused_activation_function);
    return AddOptions.EndAddOptions(builder);
  }

  public static void StartAddOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(0, (sbyte)fusedActivationFunction, 0); }
  public static Offset<AddOptions> EndAddOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AddOptions>(o);
  }
};

public struct MulOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MulOptions GetRootAsMulOptions(ByteBuffer _bb) { return GetRootAsMulOptions(_bb, new MulOptions()); }
  public static MulOptions GetRootAsMulOptions(ByteBuffer _bb, MulOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MulOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(4); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }

  public static Offset<MulOptions> CreateMulOptions(FlatBufferBuilder builder,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE) {
    builder.StartObject(1);
    MulOptions.AddFusedActivationFunction(builder, fused_activation_function);
    return MulOptions.EndMulOptions(builder);
  }

  public static void StartMulOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(0, (sbyte)fusedActivationFunction, 0); }
  public static Offset<MulOptions> EndMulOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MulOptions>(o);
  }
};

public struct L2NormOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static L2NormOptions GetRootAsL2NormOptions(ByteBuffer _bb) { return GetRootAsL2NormOptions(_bb, new L2NormOptions()); }
  public static L2NormOptions GetRootAsL2NormOptions(ByteBuffer _bb, L2NormOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public L2NormOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(4); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }

  public static Offset<L2NormOptions> CreateL2NormOptions(FlatBufferBuilder builder,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE) {
    builder.StartObject(1);
    L2NormOptions.AddFusedActivationFunction(builder, fused_activation_function);
    return L2NormOptions.EndL2NormOptions(builder);
  }

  public static void StartL2NormOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(0, (sbyte)fusedActivationFunction, 0); }
  public static Offset<L2NormOptions> EndL2NormOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<L2NormOptions>(o);
  }
};

public struct LocalResponseNormalizationOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LocalResponseNormalizationOptions GetRootAsLocalResponseNormalizationOptions(ByteBuffer _bb) { return GetRootAsLocalResponseNormalizationOptions(_bb, new LocalResponseNormalizationOptions()); }
  public static LocalResponseNormalizationOptions GetRootAsLocalResponseNormalizationOptions(ByteBuffer _bb, LocalResponseNormalizationOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LocalResponseNormalizationOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Radius { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Bias { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Alpha { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Beta { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<LocalResponseNormalizationOptions> CreateLocalResponseNormalizationOptions(FlatBufferBuilder builder,
      int radius = 0,
      float bias = 0.0f,
      float alpha = 0.0f,
      float beta = 0.0f) {
    builder.StartObject(4);
    LocalResponseNormalizationOptions.AddBeta(builder, beta);
    LocalResponseNormalizationOptions.AddAlpha(builder, alpha);
    LocalResponseNormalizationOptions.AddBias(builder, bias);
    LocalResponseNormalizationOptions.AddRadius(builder, radius);
    return LocalResponseNormalizationOptions.EndLocalResponseNormalizationOptions(builder);
  }

  public static void StartLocalResponseNormalizationOptions(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddRadius(FlatBufferBuilder builder, int radius) { builder.AddInt(0, radius, 0); }
  public static void AddBias(FlatBufferBuilder builder, float bias) { builder.AddFloat(1, bias, 0.0f); }
  public static void AddAlpha(FlatBufferBuilder builder, float alpha) { builder.AddFloat(2, alpha, 0.0f); }
  public static void AddBeta(FlatBufferBuilder builder, float beta) { builder.AddFloat(3, beta, 0.0f); }
  public static Offset<LocalResponseNormalizationOptions> EndLocalResponseNormalizationOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LocalResponseNormalizationOptions>(o);
  }
};

public struct LSTMOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LSTMOptions GetRootAsLSTMOptions(ByteBuffer _bb) { return GetRootAsLSTMOptions(_bb, new LSTMOptions()); }
  public static LSTMOptions GetRootAsLSTMOptions(ByteBuffer _bb, LSTMOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LSTMOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(4); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }
  public float CellClip { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ProjClip { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public LSTMKernelType KernelType { get { int o = __p.__offset(10); return o != 0 ? (LSTMKernelType)__p.bb.GetSbyte(o + __p.bb_pos) : LSTMKernelType.FULL; } }

  public static Offset<LSTMOptions> CreateLSTMOptions(FlatBufferBuilder builder,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE,
      float cell_clip = 0.0f,
      float proj_clip = 0.0f,
      LSTMKernelType kernel_type = LSTMKernelType.FULL) {
    builder.StartObject(4);
    LSTMOptions.AddProjClip(builder, proj_clip);
    LSTMOptions.AddCellClip(builder, cell_clip);
    LSTMOptions.AddKernelType(builder, kernel_type);
    LSTMOptions.AddFusedActivationFunction(builder, fused_activation_function);
    return LSTMOptions.EndLSTMOptions(builder);
  }

  public static void StartLSTMOptions(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(0, (sbyte)fusedActivationFunction, 0); }
  public static void AddCellClip(FlatBufferBuilder builder, float cellClip) { builder.AddFloat(1, cellClip, 0.0f); }
  public static void AddProjClip(FlatBufferBuilder builder, float projClip) { builder.AddFloat(2, projClip, 0.0f); }
  public static void AddKernelType(FlatBufferBuilder builder, LSTMKernelType kernelType) { builder.AddSbyte(3, (sbyte)kernelType, 0); }
  public static Offset<LSTMOptions> EndLSTMOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LSTMOptions>(o);
  }
};

public struct UnidirectionalSequenceLSTMOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static UnidirectionalSequenceLSTMOptions GetRootAsUnidirectionalSequenceLSTMOptions(ByteBuffer _bb) { return GetRootAsUnidirectionalSequenceLSTMOptions(_bb, new UnidirectionalSequenceLSTMOptions()); }
  public static UnidirectionalSequenceLSTMOptions GetRootAsUnidirectionalSequenceLSTMOptions(ByteBuffer _bb, UnidirectionalSequenceLSTMOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public UnidirectionalSequenceLSTMOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(4); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }
  public float CellClip { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ProjClip { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool TimeMajor { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<UnidirectionalSequenceLSTMOptions> CreateUnidirectionalSequenceLSTMOptions(FlatBufferBuilder builder,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE,
      float cell_clip = 0.0f,
      float proj_clip = 0.0f,
      bool time_major = false) {
    builder.StartObject(4);
    UnidirectionalSequenceLSTMOptions.AddProjClip(builder, proj_clip);
    UnidirectionalSequenceLSTMOptions.AddCellClip(builder, cell_clip);
    UnidirectionalSequenceLSTMOptions.AddTimeMajor(builder, time_major);
    UnidirectionalSequenceLSTMOptions.AddFusedActivationFunction(builder, fused_activation_function);
    return UnidirectionalSequenceLSTMOptions.EndUnidirectionalSequenceLSTMOptions(builder);
  }

  public static void StartUnidirectionalSequenceLSTMOptions(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(0, (sbyte)fusedActivationFunction, 0); }
  public static void AddCellClip(FlatBufferBuilder builder, float cellClip) { builder.AddFloat(1, cellClip, 0.0f); }
  public static void AddProjClip(FlatBufferBuilder builder, float projClip) { builder.AddFloat(2, projClip, 0.0f); }
  public static void AddTimeMajor(FlatBufferBuilder builder, bool timeMajor) { builder.AddBool(3, timeMajor, false); }
  public static Offset<UnidirectionalSequenceLSTMOptions> EndUnidirectionalSequenceLSTMOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UnidirectionalSequenceLSTMOptions>(o);
  }
};

public struct BidirectionalSequenceLSTMOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BidirectionalSequenceLSTMOptions GetRootAsBidirectionalSequenceLSTMOptions(ByteBuffer _bb) { return GetRootAsBidirectionalSequenceLSTMOptions(_bb, new BidirectionalSequenceLSTMOptions()); }
  public static BidirectionalSequenceLSTMOptions GetRootAsBidirectionalSequenceLSTMOptions(ByteBuffer _bb, BidirectionalSequenceLSTMOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BidirectionalSequenceLSTMOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(4); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }
  public float CellClip { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float ProjClip { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public bool MergeOutputs { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool TimeMajor { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)true; } }

  public static Offset<BidirectionalSequenceLSTMOptions> CreateBidirectionalSequenceLSTMOptions(FlatBufferBuilder builder,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE,
      float cell_clip = 0.0f,
      float proj_clip = 0.0f,
      bool merge_outputs = false,
      bool time_major = true) {
    builder.StartObject(5);
    BidirectionalSequenceLSTMOptions.AddProjClip(builder, proj_clip);
    BidirectionalSequenceLSTMOptions.AddCellClip(builder, cell_clip);
    BidirectionalSequenceLSTMOptions.AddTimeMajor(builder, time_major);
    BidirectionalSequenceLSTMOptions.AddMergeOutputs(builder, merge_outputs);
    BidirectionalSequenceLSTMOptions.AddFusedActivationFunction(builder, fused_activation_function);
    return BidirectionalSequenceLSTMOptions.EndBidirectionalSequenceLSTMOptions(builder);
  }

  public static void StartBidirectionalSequenceLSTMOptions(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(0, (sbyte)fusedActivationFunction, 0); }
  public static void AddCellClip(FlatBufferBuilder builder, float cellClip) { builder.AddFloat(1, cellClip, 0.0f); }
  public static void AddProjClip(FlatBufferBuilder builder, float projClip) { builder.AddFloat(2, projClip, 0.0f); }
  public static void AddMergeOutputs(FlatBufferBuilder builder, bool mergeOutputs) { builder.AddBool(3, mergeOutputs, false); }
  public static void AddTimeMajor(FlatBufferBuilder builder, bool timeMajor) { builder.AddBool(4, timeMajor, true); }
  public static Offset<BidirectionalSequenceLSTMOptions> EndBidirectionalSequenceLSTMOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BidirectionalSequenceLSTMOptions>(o);
  }
};

public struct ResizeBilinearOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ResizeBilinearOptions GetRootAsResizeBilinearOptions(ByteBuffer _bb) { return GetRootAsResizeBilinearOptions(_bb, new ResizeBilinearOptions()); }
  public static ResizeBilinearOptions GetRootAsResizeBilinearOptions(ByteBuffer _bb, ResizeBilinearOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ResizeBilinearOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool AlignCorners { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<ResizeBilinearOptions> CreateResizeBilinearOptions(FlatBufferBuilder builder,
      bool align_corners = false) {
    builder.StartObject(3);
    ResizeBilinearOptions.AddAlignCorners(builder, align_corners);
    return ResizeBilinearOptions.EndResizeBilinearOptions(builder);
  }

  public static void StartResizeBilinearOptions(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddAlignCorners(FlatBufferBuilder builder, bool alignCorners) { builder.AddBool(2, alignCorners, false); }
  public static Offset<ResizeBilinearOptions> EndResizeBilinearOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ResizeBilinearOptions>(o);
  }
};

public struct ResizeNearestNeighborOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ResizeNearestNeighborOptions GetRootAsResizeNearestNeighborOptions(ByteBuffer _bb) { return GetRootAsResizeNearestNeighborOptions(_bb, new ResizeNearestNeighborOptions()); }
  public static ResizeNearestNeighborOptions GetRootAsResizeNearestNeighborOptions(ByteBuffer _bb, ResizeNearestNeighborOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ResizeNearestNeighborOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool AlignCorners { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<ResizeNearestNeighborOptions> CreateResizeNearestNeighborOptions(FlatBufferBuilder builder,
      bool align_corners = false) {
    builder.StartObject(1);
    ResizeNearestNeighborOptions.AddAlignCorners(builder, align_corners);
    return ResizeNearestNeighborOptions.EndResizeNearestNeighborOptions(builder);
  }

  public static void StartResizeNearestNeighborOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddAlignCorners(FlatBufferBuilder builder, bool alignCorners) { builder.AddBool(0, alignCorners, false); }
  public static Offset<ResizeNearestNeighborOptions> EndResizeNearestNeighborOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ResizeNearestNeighborOptions>(o);
  }
};

public struct CallOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CallOptions GetRootAsCallOptions(ByteBuffer _bb) { return GetRootAsCallOptions(_bb, new CallOptions()); }
  public static CallOptions GetRootAsCallOptions(ByteBuffer _bb, CallOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CallOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Subgraph { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }

  public static Offset<CallOptions> CreateCallOptions(FlatBufferBuilder builder,
      uint subgraph = 0) {
    builder.StartObject(1);
    CallOptions.AddSubgraph(builder, subgraph);
    return CallOptions.EndCallOptions(builder);
  }

  public static void StartCallOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddSubgraph(FlatBufferBuilder builder, uint subgraph) { builder.AddUint(0, subgraph, 0); }
  public static Offset<CallOptions> EndCallOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CallOptions>(o);
  }
};

public struct PadOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PadOptions GetRootAsPadOptions(ByteBuffer _bb) { return GetRootAsPadOptions(_bb, new PadOptions()); }
  public static PadOptions GetRootAsPadOptions(ByteBuffer _bb, PadOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PadOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartPadOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<PadOptions> EndPadOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PadOptions>(o);
  }
};

public struct PadV2Options : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PadV2Options GetRootAsPadV2Options(ByteBuffer _bb) { return GetRootAsPadV2Options(_bb, new PadV2Options()); }
  public static PadV2Options GetRootAsPadV2Options(ByteBuffer _bb, PadV2Options obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PadV2Options __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartPadV2Options(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<PadV2Options> EndPadV2Options(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PadV2Options>(o);
  }
};

public struct ReshapeOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ReshapeOptions GetRootAsReshapeOptions(ByteBuffer _bb) { return GetRootAsReshapeOptions(_bb, new ReshapeOptions()); }
  public static ReshapeOptions GetRootAsReshapeOptions(ByteBuffer _bb, ReshapeOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ReshapeOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int NewShape(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int NewShapeLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNewShapeBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetNewShapeBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetNewShapeArray() { return __p.__vector_as_array<int>(4); }

  public static Offset<ReshapeOptions> CreateReshapeOptions(FlatBufferBuilder builder,
      VectorOffset new_shapeOffset = default(VectorOffset)) {
    builder.StartObject(1);
    ReshapeOptions.AddNewShape(builder, new_shapeOffset);
    return ReshapeOptions.EndReshapeOptions(builder);
  }

  public static void StartReshapeOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddNewShape(FlatBufferBuilder builder, VectorOffset newShapeOffset) { builder.AddOffset(0, newShapeOffset.Value, 0); }
  public static VectorOffset CreateNewShapeVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateNewShapeVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartNewShapeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ReshapeOptions> EndReshapeOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ReshapeOptions>(o);
  }
};

public struct SpaceToBatchNDOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SpaceToBatchNDOptions GetRootAsSpaceToBatchNDOptions(ByteBuffer _bb) { return GetRootAsSpaceToBatchNDOptions(_bb, new SpaceToBatchNDOptions()); }
  public static SpaceToBatchNDOptions GetRootAsSpaceToBatchNDOptions(ByteBuffer _bb, SpaceToBatchNDOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SpaceToBatchNDOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartSpaceToBatchNDOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<SpaceToBatchNDOptions> EndSpaceToBatchNDOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SpaceToBatchNDOptions>(o);
  }
};

public struct BatchToSpaceNDOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BatchToSpaceNDOptions GetRootAsBatchToSpaceNDOptions(ByteBuffer _bb) { return GetRootAsBatchToSpaceNDOptions(_bb, new BatchToSpaceNDOptions()); }
  public static BatchToSpaceNDOptions GetRootAsBatchToSpaceNDOptions(ByteBuffer _bb, BatchToSpaceNDOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BatchToSpaceNDOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartBatchToSpaceNDOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<BatchToSpaceNDOptions> EndBatchToSpaceNDOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BatchToSpaceNDOptions>(o);
  }
};

public struct SkipGramOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SkipGramOptions GetRootAsSkipGramOptions(ByteBuffer _bb) { return GetRootAsSkipGramOptions(_bb, new SkipGramOptions()); }
  public static SkipGramOptions GetRootAsSkipGramOptions(ByteBuffer _bb, SkipGramOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SkipGramOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int NgramSize { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int MaxSkipSize { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool IncludeAllNgrams { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<SkipGramOptions> CreateSkipGramOptions(FlatBufferBuilder builder,
      int ngram_size = 0,
      int max_skip_size = 0,
      bool include_all_ngrams = false) {
    builder.StartObject(3);
    SkipGramOptions.AddMaxSkipSize(builder, max_skip_size);
    SkipGramOptions.AddNgramSize(builder, ngram_size);
    SkipGramOptions.AddIncludeAllNgrams(builder, include_all_ngrams);
    return SkipGramOptions.EndSkipGramOptions(builder);
  }

  public static void StartSkipGramOptions(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddNgramSize(FlatBufferBuilder builder, int ngramSize) { builder.AddInt(0, ngramSize, 0); }
  public static void AddMaxSkipSize(FlatBufferBuilder builder, int maxSkipSize) { builder.AddInt(1, maxSkipSize, 0); }
  public static void AddIncludeAllNgrams(FlatBufferBuilder builder, bool includeAllNgrams) { builder.AddBool(2, includeAllNgrams, false); }
  public static Offset<SkipGramOptions> EndSkipGramOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SkipGramOptions>(o);
  }
};

public struct SpaceToDepthOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SpaceToDepthOptions GetRootAsSpaceToDepthOptions(ByteBuffer _bb) { return GetRootAsSpaceToDepthOptions(_bb, new SpaceToDepthOptions()); }
  public static SpaceToDepthOptions GetRootAsSpaceToDepthOptions(ByteBuffer _bb, SpaceToDepthOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SpaceToDepthOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int BlockSize { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SpaceToDepthOptions> CreateSpaceToDepthOptions(FlatBufferBuilder builder,
      int block_size = 0) {
    builder.StartObject(1);
    SpaceToDepthOptions.AddBlockSize(builder, block_size);
    return SpaceToDepthOptions.EndSpaceToDepthOptions(builder);
  }

  public static void StartSpaceToDepthOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddBlockSize(FlatBufferBuilder builder, int blockSize) { builder.AddInt(0, blockSize, 0); }
  public static Offset<SpaceToDepthOptions> EndSpaceToDepthOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SpaceToDepthOptions>(o);
  }
};

public struct SubOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SubOptions GetRootAsSubOptions(ByteBuffer _bb) { return GetRootAsSubOptions(_bb, new SubOptions()); }
  public static SubOptions GetRootAsSubOptions(ByteBuffer _bb, SubOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SubOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(4); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }

  public static Offset<SubOptions> CreateSubOptions(FlatBufferBuilder builder,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE) {
    builder.StartObject(1);
    SubOptions.AddFusedActivationFunction(builder, fused_activation_function);
    return SubOptions.EndSubOptions(builder);
  }

  public static void StartSubOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(0, (sbyte)fusedActivationFunction, 0); }
  public static Offset<SubOptions> EndSubOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SubOptions>(o);
  }
};

public struct DivOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DivOptions GetRootAsDivOptions(ByteBuffer _bb) { return GetRootAsDivOptions(_bb, new DivOptions()); }
  public static DivOptions GetRootAsDivOptions(ByteBuffer _bb, DivOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DivOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ActivationFunctionType FusedActivationFunction { get { int o = __p.__offset(4); return o != 0 ? (ActivationFunctionType)__p.bb.GetSbyte(o + __p.bb_pos) : ActivationFunctionType.NONE; } }

  public static Offset<DivOptions> CreateDivOptions(FlatBufferBuilder builder,
      ActivationFunctionType fused_activation_function = ActivationFunctionType.NONE) {
    builder.StartObject(1);
    DivOptions.AddFusedActivationFunction(builder, fused_activation_function);
    return DivOptions.EndDivOptions(builder);
  }

  public static void StartDivOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddFusedActivationFunction(FlatBufferBuilder builder, ActivationFunctionType fusedActivationFunction) { builder.AddSbyte(0, (sbyte)fusedActivationFunction, 0); }
  public static Offset<DivOptions> EndDivOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DivOptions>(o);
  }
};

public struct TopKV2Options : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TopKV2Options GetRootAsTopKV2Options(ByteBuffer _bb) { return GetRootAsTopKV2Options(_bb, new TopKV2Options()); }
  public static TopKV2Options GetRootAsTopKV2Options(ByteBuffer _bb, TopKV2Options obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TopKV2Options __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartTopKV2Options(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<TopKV2Options> EndTopKV2Options(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TopKV2Options>(o);
  }
};

public struct EmbeddingLookupSparseOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EmbeddingLookupSparseOptions GetRootAsEmbeddingLookupSparseOptions(ByteBuffer _bb) { return GetRootAsEmbeddingLookupSparseOptions(_bb, new EmbeddingLookupSparseOptions()); }
  public static EmbeddingLookupSparseOptions GetRootAsEmbeddingLookupSparseOptions(ByteBuffer _bb, EmbeddingLookupSparseOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EmbeddingLookupSparseOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public CombinerType Combiner { get { int o = __p.__offset(4); return o != 0 ? (CombinerType)__p.bb.GetSbyte(o + __p.bb_pos) : CombinerType.SUM; } }

  public static Offset<EmbeddingLookupSparseOptions> CreateEmbeddingLookupSparseOptions(FlatBufferBuilder builder,
      CombinerType combiner = CombinerType.SUM) {
    builder.StartObject(1);
    EmbeddingLookupSparseOptions.AddCombiner(builder, combiner);
    return EmbeddingLookupSparseOptions.EndEmbeddingLookupSparseOptions(builder);
  }

  public static void StartEmbeddingLookupSparseOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddCombiner(FlatBufferBuilder builder, CombinerType combiner) { builder.AddSbyte(0, (sbyte)combiner, 0); }
  public static Offset<EmbeddingLookupSparseOptions> EndEmbeddingLookupSparseOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EmbeddingLookupSparseOptions>(o);
  }
};

public struct GatherOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GatherOptions GetRootAsGatherOptions(ByteBuffer _bb) { return GetRootAsGatherOptions(_bb, new GatherOptions()); }
  public static GatherOptions GetRootAsGatherOptions(ByteBuffer _bb, GatherOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GatherOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Axis { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<GatherOptions> CreateGatherOptions(FlatBufferBuilder builder,
      int axis = 0) {
    builder.StartObject(1);
    GatherOptions.AddAxis(builder, axis);
    return GatherOptions.EndGatherOptions(builder);
  }

  public static void StartGatherOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddAxis(FlatBufferBuilder builder, int axis) { builder.AddInt(0, axis, 0); }
  public static Offset<GatherOptions> EndGatherOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GatherOptions>(o);
  }
};

public struct TransposeOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TransposeOptions GetRootAsTransposeOptions(ByteBuffer _bb) { return GetRootAsTransposeOptions(_bb, new TransposeOptions()); }
  public static TransposeOptions GetRootAsTransposeOptions(ByteBuffer _bb, TransposeOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TransposeOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartTransposeOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<TransposeOptions> EndTransposeOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TransposeOptions>(o);
  }
};

public struct ExpOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ExpOptions GetRootAsExpOptions(ByteBuffer _bb) { return GetRootAsExpOptions(_bb, new ExpOptions()); }
  public static ExpOptions GetRootAsExpOptions(ByteBuffer _bb, ExpOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ExpOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartExpOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<ExpOptions> EndExpOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ExpOptions>(o);
  }
};

public struct CosOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CosOptions GetRootAsCosOptions(ByteBuffer _bb) { return GetRootAsCosOptions(_bb, new CosOptions()); }
  public static CosOptions GetRootAsCosOptions(ByteBuffer _bb, CosOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CosOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartCosOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<CosOptions> EndCosOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CosOptions>(o);
  }
};

public struct ReducerOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ReducerOptions GetRootAsReducerOptions(ByteBuffer _bb) { return GetRootAsReducerOptions(_bb, new ReducerOptions()); }
  public static ReducerOptions GetRootAsReducerOptions(ByteBuffer _bb, ReducerOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ReducerOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool KeepDims { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<ReducerOptions> CreateReducerOptions(FlatBufferBuilder builder,
      bool keep_dims = false) {
    builder.StartObject(1);
    ReducerOptions.AddKeepDims(builder, keep_dims);
    return ReducerOptions.EndReducerOptions(builder);
  }

  public static void StartReducerOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddKeepDims(FlatBufferBuilder builder, bool keepDims) { builder.AddBool(0, keepDims, false); }
  public static Offset<ReducerOptions> EndReducerOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ReducerOptions>(o);
  }
};

public struct SqueezeOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SqueezeOptions GetRootAsSqueezeOptions(ByteBuffer _bb) { return GetRootAsSqueezeOptions(_bb, new SqueezeOptions()); }
  public static SqueezeOptions GetRootAsSqueezeOptions(ByteBuffer _bb, SqueezeOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SqueezeOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SqueezeDims(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int SqueezeDimsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetSqueezeDimsBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetSqueezeDimsBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public int[] GetSqueezeDimsArray() { return __p.__vector_as_array<int>(4); }

  public static Offset<SqueezeOptions> CreateSqueezeOptions(FlatBufferBuilder builder,
      VectorOffset squeeze_dimsOffset = default(VectorOffset)) {
    builder.StartObject(1);
    SqueezeOptions.AddSqueezeDims(builder, squeeze_dimsOffset);
    return SqueezeOptions.EndSqueezeOptions(builder);
  }

  public static void StartSqueezeOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddSqueezeDims(FlatBufferBuilder builder, VectorOffset squeezeDimsOffset) { builder.AddOffset(0, squeezeDimsOffset.Value, 0); }
  public static VectorOffset CreateSqueezeDimsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateSqueezeDimsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSqueezeDimsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SqueezeOptions> EndSqueezeOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SqueezeOptions>(o);
  }
};

public struct SplitOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SplitOptions GetRootAsSplitOptions(ByteBuffer _bb) { return GetRootAsSplitOptions(_bb, new SplitOptions()); }
  public static SplitOptions GetRootAsSplitOptions(ByteBuffer _bb, SplitOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SplitOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int NumSplits { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SplitOptions> CreateSplitOptions(FlatBufferBuilder builder,
      int num_splits = 0) {
    builder.StartObject(1);
    SplitOptions.AddNumSplits(builder, num_splits);
    return SplitOptions.EndSplitOptions(builder);
  }

  public static void StartSplitOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddNumSplits(FlatBufferBuilder builder, int numSplits) { builder.AddInt(0, numSplits, 0); }
  public static Offset<SplitOptions> EndSplitOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SplitOptions>(o);
  }
};

public struct SplitVOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SplitVOptions GetRootAsSplitVOptions(ByteBuffer _bb) { return GetRootAsSplitVOptions(_bb, new SplitVOptions()); }
  public static SplitVOptions GetRootAsSplitVOptions(ByteBuffer _bb, SplitVOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SplitVOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int NumSplits { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<SplitVOptions> CreateSplitVOptions(FlatBufferBuilder builder,
      int num_splits = 0) {
    builder.StartObject(1);
    SplitVOptions.AddNumSplits(builder, num_splits);
    return SplitVOptions.EndSplitVOptions(builder);
  }

  public static void StartSplitVOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddNumSplits(FlatBufferBuilder builder, int numSplits) { builder.AddInt(0, numSplits, 0); }
  public static Offset<SplitVOptions> EndSplitVOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SplitVOptions>(o);
  }
};

public struct StridedSliceOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static StridedSliceOptions GetRootAsStridedSliceOptions(ByteBuffer _bb) { return GetRootAsStridedSliceOptions(_bb, new StridedSliceOptions()); }
  public static StridedSliceOptions GetRootAsStridedSliceOptions(ByteBuffer _bb, StridedSliceOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public StridedSliceOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int BeginMask { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EndMask { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int EllipsisMask { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int NewAxisMask { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int ShrinkAxisMask { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<StridedSliceOptions> CreateStridedSliceOptions(FlatBufferBuilder builder,
      int begin_mask = 0,
      int end_mask = 0,
      int ellipsis_mask = 0,
      int new_axis_mask = 0,
      int shrink_axis_mask = 0) {
    builder.StartObject(5);
    StridedSliceOptions.AddShrinkAxisMask(builder, shrink_axis_mask);
    StridedSliceOptions.AddNewAxisMask(builder, new_axis_mask);
    StridedSliceOptions.AddEllipsisMask(builder, ellipsis_mask);
    StridedSliceOptions.AddEndMask(builder, end_mask);
    StridedSliceOptions.AddBeginMask(builder, begin_mask);
    return StridedSliceOptions.EndStridedSliceOptions(builder);
  }

  public static void StartStridedSliceOptions(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddBeginMask(FlatBufferBuilder builder, int beginMask) { builder.AddInt(0, beginMask, 0); }
  public static void AddEndMask(FlatBufferBuilder builder, int endMask) { builder.AddInt(1, endMask, 0); }
  public static void AddEllipsisMask(FlatBufferBuilder builder, int ellipsisMask) { builder.AddInt(2, ellipsisMask, 0); }
  public static void AddNewAxisMask(FlatBufferBuilder builder, int newAxisMask) { builder.AddInt(3, newAxisMask, 0); }
  public static void AddShrinkAxisMask(FlatBufferBuilder builder, int shrinkAxisMask) { builder.AddInt(4, shrinkAxisMask, 0); }
  public static Offset<StridedSliceOptions> EndStridedSliceOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<StridedSliceOptions>(o);
  }
};

public struct LogSoftmaxOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LogSoftmaxOptions GetRootAsLogSoftmaxOptions(ByteBuffer _bb) { return GetRootAsLogSoftmaxOptions(_bb, new LogSoftmaxOptions()); }
  public static LogSoftmaxOptions GetRootAsLogSoftmaxOptions(ByteBuffer _bb, LogSoftmaxOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LogSoftmaxOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartLogSoftmaxOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<LogSoftmaxOptions> EndLogSoftmaxOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LogSoftmaxOptions>(o);
  }
};

public struct CastOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static CastOptions GetRootAsCastOptions(ByteBuffer _bb) { return GetRootAsCastOptions(_bb, new CastOptions()); }
  public static CastOptions GetRootAsCastOptions(ByteBuffer _bb, CastOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public CastOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TensorType InDataType { get { int o = __p.__offset(4); return o != 0 ? (TensorType)__p.bb.GetSbyte(o + __p.bb_pos) : TensorType.FLOAT32; } }
  public TensorType OutDataType { get { int o = __p.__offset(6); return o != 0 ? (TensorType)__p.bb.GetSbyte(o + __p.bb_pos) : TensorType.FLOAT32; } }

  public static Offset<CastOptions> CreateCastOptions(FlatBufferBuilder builder,
      TensorType in_data_type = TensorType.FLOAT32,
      TensorType out_data_type = TensorType.FLOAT32) {
    builder.StartObject(2);
    CastOptions.AddOutDataType(builder, out_data_type);
    CastOptions.AddInDataType(builder, in_data_type);
    return CastOptions.EndCastOptions(builder);
  }

  public static void StartCastOptions(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddInDataType(FlatBufferBuilder builder, TensorType inDataType) { builder.AddSbyte(0, (sbyte)inDataType, 0); }
  public static void AddOutDataType(FlatBufferBuilder builder, TensorType outDataType) { builder.AddSbyte(1, (sbyte)outDataType, 0); }
  public static Offset<CastOptions> EndCastOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<CastOptions>(o);
  }
};

public struct DequantizeOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static DequantizeOptions GetRootAsDequantizeOptions(ByteBuffer _bb) { return GetRootAsDequantizeOptions(_bb, new DequantizeOptions()); }
  public static DequantizeOptions GetRootAsDequantizeOptions(ByteBuffer _bb, DequantizeOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public DequantizeOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartDequantizeOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<DequantizeOptions> EndDequantizeOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<DequantizeOptions>(o);
  }
};

public struct MaximumMinimumOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MaximumMinimumOptions GetRootAsMaximumMinimumOptions(ByteBuffer _bb) { return GetRootAsMaximumMinimumOptions(_bb, new MaximumMinimumOptions()); }
  public static MaximumMinimumOptions GetRootAsMaximumMinimumOptions(ByteBuffer _bb, MaximumMinimumOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MaximumMinimumOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartMaximumMinimumOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<MaximumMinimumOptions> EndMaximumMinimumOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MaximumMinimumOptions>(o);
  }
};

public struct TileOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TileOptions GetRootAsTileOptions(ByteBuffer _bb) { return GetRootAsTileOptions(_bb, new TileOptions()); }
  public static TileOptions GetRootAsTileOptions(ByteBuffer _bb, TileOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TileOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartTileOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<TileOptions> EndTileOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TileOptions>(o);
  }
};

public struct ArgMaxOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ArgMaxOptions GetRootAsArgMaxOptions(ByteBuffer _bb) { return GetRootAsArgMaxOptions(_bb, new ArgMaxOptions()); }
  public static ArgMaxOptions GetRootAsArgMaxOptions(ByteBuffer _bb, ArgMaxOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ArgMaxOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TensorType OutputType { get { int o = __p.__offset(4); return o != 0 ? (TensorType)__p.bb.GetSbyte(o + __p.bb_pos) : TensorType.FLOAT32; } }

  public static Offset<ArgMaxOptions> CreateArgMaxOptions(FlatBufferBuilder builder,
      TensorType output_type = TensorType.FLOAT32) {
    builder.StartObject(1);
    ArgMaxOptions.AddOutputType(builder, output_type);
    return ArgMaxOptions.EndArgMaxOptions(builder);
  }

  public static void StartArgMaxOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddOutputType(FlatBufferBuilder builder, TensorType outputType) { builder.AddSbyte(0, (sbyte)outputType, 0); }
  public static Offset<ArgMaxOptions> EndArgMaxOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ArgMaxOptions>(o);
  }
};

public struct ArgMinOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ArgMinOptions GetRootAsArgMinOptions(ByteBuffer _bb) { return GetRootAsArgMinOptions(_bb, new ArgMinOptions()); }
  public static ArgMinOptions GetRootAsArgMinOptions(ByteBuffer _bb, ArgMinOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ArgMinOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TensorType OutputType { get { int o = __p.__offset(4); return o != 0 ? (TensorType)__p.bb.GetSbyte(o + __p.bb_pos) : TensorType.FLOAT32; } }

  public static Offset<ArgMinOptions> CreateArgMinOptions(FlatBufferBuilder builder,
      TensorType output_type = TensorType.FLOAT32) {
    builder.StartObject(1);
    ArgMinOptions.AddOutputType(builder, output_type);
    return ArgMinOptions.EndArgMinOptions(builder);
  }

  public static void StartArgMinOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddOutputType(FlatBufferBuilder builder, TensorType outputType) { builder.AddSbyte(0, (sbyte)outputType, 0); }
  public static Offset<ArgMinOptions> EndArgMinOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ArgMinOptions>(o);
  }
};

public struct GreaterOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GreaterOptions GetRootAsGreaterOptions(ByteBuffer _bb) { return GetRootAsGreaterOptions(_bb, new GreaterOptions()); }
  public static GreaterOptions GetRootAsGreaterOptions(ByteBuffer _bb, GreaterOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GreaterOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartGreaterOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<GreaterOptions> EndGreaterOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GreaterOptions>(o);
  }
};

public struct GreaterEqualOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GreaterEqualOptions GetRootAsGreaterEqualOptions(ByteBuffer _bb) { return GetRootAsGreaterEqualOptions(_bb, new GreaterEqualOptions()); }
  public static GreaterEqualOptions GetRootAsGreaterEqualOptions(ByteBuffer _bb, GreaterEqualOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GreaterEqualOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartGreaterEqualOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<GreaterEqualOptions> EndGreaterEqualOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GreaterEqualOptions>(o);
  }
};

public struct LessOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LessOptions GetRootAsLessOptions(ByteBuffer _bb) { return GetRootAsLessOptions(_bb, new LessOptions()); }
  public static LessOptions GetRootAsLessOptions(ByteBuffer _bb, LessOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LessOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartLessOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<LessOptions> EndLessOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LessOptions>(o);
  }
};

public struct LessEqualOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LessEqualOptions GetRootAsLessEqualOptions(ByteBuffer _bb) { return GetRootAsLessEqualOptions(_bb, new LessEqualOptions()); }
  public static LessEqualOptions GetRootAsLessEqualOptions(ByteBuffer _bb, LessEqualOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LessEqualOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartLessEqualOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<LessEqualOptions> EndLessEqualOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LessEqualOptions>(o);
  }
};

public struct NegOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NegOptions GetRootAsNegOptions(ByteBuffer _bb) { return GetRootAsNegOptions(_bb, new NegOptions()); }
  public static NegOptions GetRootAsNegOptions(ByteBuffer _bb, NegOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NegOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartNegOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<NegOptions> EndNegOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NegOptions>(o);
  }
};

public struct SelectOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SelectOptions GetRootAsSelectOptions(ByteBuffer _bb) { return GetRootAsSelectOptions(_bb, new SelectOptions()); }
  public static SelectOptions GetRootAsSelectOptions(ByteBuffer _bb, SelectOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SelectOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartSelectOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<SelectOptions> EndSelectOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SelectOptions>(o);
  }
};

public struct SliceOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SliceOptions GetRootAsSliceOptions(ByteBuffer _bb) { return GetRootAsSliceOptions(_bb, new SliceOptions()); }
  public static SliceOptions GetRootAsSliceOptions(ByteBuffer _bb, SliceOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SliceOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartSliceOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<SliceOptions> EndSliceOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SliceOptions>(o);
  }
};

public struct TransposeConvOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TransposeConvOptions GetRootAsTransposeConvOptions(ByteBuffer _bb) { return GetRootAsTransposeConvOptions(_bb, new TransposeConvOptions()); }
  public static TransposeConvOptions GetRootAsTransposeConvOptions(ByteBuffer _bb, TransposeConvOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TransposeConvOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Padding Padding { get { int o = __p.__offset(4); return o != 0 ? (Padding)__p.bb.GetSbyte(o + __p.bb_pos) : Padding.SAME; } }
  public int StrideW { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int StrideH { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<TransposeConvOptions> CreateTransposeConvOptions(FlatBufferBuilder builder,
      Padding padding = Padding.SAME,
      int stride_w = 0,
      int stride_h = 0) {
    builder.StartObject(3);
    TransposeConvOptions.AddStrideH(builder, stride_h);
    TransposeConvOptions.AddStrideW(builder, stride_w);
    TransposeConvOptions.AddPadding(builder, padding);
    return TransposeConvOptions.EndTransposeConvOptions(builder);
  }

  public static void StartTransposeConvOptions(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddPadding(FlatBufferBuilder builder, Padding padding) { builder.AddSbyte(0, (sbyte)padding, 0); }
  public static void AddStrideW(FlatBufferBuilder builder, int strideW) { builder.AddInt(1, strideW, 0); }
  public static void AddStrideH(FlatBufferBuilder builder, int strideH) { builder.AddInt(2, strideH, 0); }
  public static Offset<TransposeConvOptions> EndTransposeConvOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TransposeConvOptions>(o);
  }
};

public struct ExpandDimsOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ExpandDimsOptions GetRootAsExpandDimsOptions(ByteBuffer _bb) { return GetRootAsExpandDimsOptions(_bb, new ExpandDimsOptions()); }
  public static ExpandDimsOptions GetRootAsExpandDimsOptions(ByteBuffer _bb, ExpandDimsOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ExpandDimsOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartExpandDimsOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<ExpandDimsOptions> EndExpandDimsOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ExpandDimsOptions>(o);
  }
};

public struct SparseToDenseOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SparseToDenseOptions GetRootAsSparseToDenseOptions(ByteBuffer _bb) { return GetRootAsSparseToDenseOptions(_bb, new SparseToDenseOptions()); }
  public static SparseToDenseOptions GetRootAsSparseToDenseOptions(ByteBuffer _bb, SparseToDenseOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SparseToDenseOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool ValidateIndices { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<SparseToDenseOptions> CreateSparseToDenseOptions(FlatBufferBuilder builder,
      bool validate_indices = false) {
    builder.StartObject(1);
    SparseToDenseOptions.AddValidateIndices(builder, validate_indices);
    return SparseToDenseOptions.EndSparseToDenseOptions(builder);
  }

  public static void StartSparseToDenseOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddValidateIndices(FlatBufferBuilder builder, bool validateIndices) { builder.AddBool(0, validateIndices, false); }
  public static Offset<SparseToDenseOptions> EndSparseToDenseOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SparseToDenseOptions>(o);
  }
};

public struct EqualOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static EqualOptions GetRootAsEqualOptions(ByteBuffer _bb) { return GetRootAsEqualOptions(_bb, new EqualOptions()); }
  public static EqualOptions GetRootAsEqualOptions(ByteBuffer _bb, EqualOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public EqualOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartEqualOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<EqualOptions> EndEqualOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<EqualOptions>(o);
  }
};

public struct NotEqualOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static NotEqualOptions GetRootAsNotEqualOptions(ByteBuffer _bb) { return GetRootAsNotEqualOptions(_bb, new NotEqualOptions()); }
  public static NotEqualOptions GetRootAsNotEqualOptions(ByteBuffer _bb, NotEqualOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public NotEqualOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartNotEqualOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<NotEqualOptions> EndNotEqualOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<NotEqualOptions>(o);
  }
};

public struct ShapeOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ShapeOptions GetRootAsShapeOptions(ByteBuffer _bb) { return GetRootAsShapeOptions(_bb, new ShapeOptions()); }
  public static ShapeOptions GetRootAsShapeOptions(ByteBuffer _bb, ShapeOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ShapeOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TensorType OutType { get { int o = __p.__offset(4); return o != 0 ? (TensorType)__p.bb.GetSbyte(o + __p.bb_pos) : TensorType.FLOAT32; } }

  public static Offset<ShapeOptions> CreateShapeOptions(FlatBufferBuilder builder,
      TensorType out_type = TensorType.FLOAT32) {
    builder.StartObject(1);
    ShapeOptions.AddOutType(builder, out_type);
    return ShapeOptions.EndShapeOptions(builder);
  }

  public static void StartShapeOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddOutType(FlatBufferBuilder builder, TensorType outType) { builder.AddSbyte(0, (sbyte)outType, 0); }
  public static Offset<ShapeOptions> EndShapeOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ShapeOptions>(o);
  }
};

public struct RankOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RankOptions GetRootAsRankOptions(ByteBuffer _bb) { return GetRootAsRankOptions(_bb, new RankOptions()); }
  public static RankOptions GetRootAsRankOptions(ByteBuffer _bb, RankOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RankOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartRankOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<RankOptions> EndRankOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RankOptions>(o);
  }
};

public struct PowOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PowOptions GetRootAsPowOptions(ByteBuffer _bb) { return GetRootAsPowOptions(_bb, new PowOptions()); }
  public static PowOptions GetRootAsPowOptions(ByteBuffer _bb, PowOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PowOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartPowOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<PowOptions> EndPowOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PowOptions>(o);
  }
};

public struct FakeQuantOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FakeQuantOptions GetRootAsFakeQuantOptions(ByteBuffer _bb) { return GetRootAsFakeQuantOptions(_bb, new FakeQuantOptions()); }
  public static FakeQuantOptions GetRootAsFakeQuantOptions(ByteBuffer _bb, FakeQuantOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FakeQuantOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Min { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float Max { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public int NumBits { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool NarrowRange { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<FakeQuantOptions> CreateFakeQuantOptions(FlatBufferBuilder builder,
      float min = 0.0f,
      float max = 0.0f,
      int num_bits = 0,
      bool narrow_range = false) {
    builder.StartObject(4);
    FakeQuantOptions.AddNumBits(builder, num_bits);
    FakeQuantOptions.AddMax(builder, max);
    FakeQuantOptions.AddMin(builder, min);
    FakeQuantOptions.AddNarrowRange(builder, narrow_range);
    return FakeQuantOptions.EndFakeQuantOptions(builder);
  }

  public static void StartFakeQuantOptions(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddMin(FlatBufferBuilder builder, float min) { builder.AddFloat(0, min, 0.0f); }
  public static void AddMax(FlatBufferBuilder builder, float max) { builder.AddFloat(1, max, 0.0f); }
  public static void AddNumBits(FlatBufferBuilder builder, int numBits) { builder.AddInt(2, numBits, 0); }
  public static void AddNarrowRange(FlatBufferBuilder builder, bool narrowRange) { builder.AddBool(3, narrowRange, false); }
  public static Offset<FakeQuantOptions> EndFakeQuantOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FakeQuantOptions>(o);
  }
};

public struct PackOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static PackOptions GetRootAsPackOptions(ByteBuffer _bb) { return GetRootAsPackOptions(_bb, new PackOptions()); }
  public static PackOptions GetRootAsPackOptions(ByteBuffer _bb, PackOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public PackOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int ValuesCount { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Axis { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<PackOptions> CreatePackOptions(FlatBufferBuilder builder,
      int values_count = 0,
      int axis = 0) {
    builder.StartObject(2);
    PackOptions.AddAxis(builder, axis);
    PackOptions.AddValuesCount(builder, values_count);
    return PackOptions.EndPackOptions(builder);
  }

  public static void StartPackOptions(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddValuesCount(FlatBufferBuilder builder, int valuesCount) { builder.AddInt(0, valuesCount, 0); }
  public static void AddAxis(FlatBufferBuilder builder, int axis) { builder.AddInt(1, axis, 0); }
  public static Offset<PackOptions> EndPackOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PackOptions>(o);
  }
};

public struct LogicalOrOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LogicalOrOptions GetRootAsLogicalOrOptions(ByteBuffer _bb) { return GetRootAsLogicalOrOptions(_bb, new LogicalOrOptions()); }
  public static LogicalOrOptions GetRootAsLogicalOrOptions(ByteBuffer _bb, LogicalOrOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LogicalOrOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartLogicalOrOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<LogicalOrOptions> EndLogicalOrOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LogicalOrOptions>(o);
  }
};

public struct OneHotOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static OneHotOptions GetRootAsOneHotOptions(ByteBuffer _bb) { return GetRootAsOneHotOptions(_bb, new OneHotOptions()); }
  public static OneHotOptions GetRootAsOneHotOptions(ByteBuffer _bb, OneHotOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public OneHotOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Axis { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<OneHotOptions> CreateOneHotOptions(FlatBufferBuilder builder,
      int axis = 0) {
    builder.StartObject(1);
    OneHotOptions.AddAxis(builder, axis);
    return OneHotOptions.EndOneHotOptions(builder);
  }

  public static void StartOneHotOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddAxis(FlatBufferBuilder builder, int axis) { builder.AddInt(0, axis, 0); }
  public static Offset<OneHotOptions> EndOneHotOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<OneHotOptions>(o);
  }
};

public struct AbsOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AbsOptions GetRootAsAbsOptions(ByteBuffer _bb) { return GetRootAsAbsOptions(_bb, new AbsOptions()); }
  public static AbsOptions GetRootAsAbsOptions(ByteBuffer _bb, AbsOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AbsOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartAbsOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<AbsOptions> EndAbsOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AbsOptions>(o);
  }
};

public struct LogicalAndOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LogicalAndOptions GetRootAsLogicalAndOptions(ByteBuffer _bb) { return GetRootAsLogicalAndOptions(_bb, new LogicalAndOptions()); }
  public static LogicalAndOptions GetRootAsLogicalAndOptions(ByteBuffer _bb, LogicalAndOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LogicalAndOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartLogicalAndOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<LogicalAndOptions> EndLogicalAndOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LogicalAndOptions>(o);
  }
};

public struct LogicalNotOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LogicalNotOptions GetRootAsLogicalNotOptions(ByteBuffer _bb) { return GetRootAsLogicalNotOptions(_bb, new LogicalNotOptions()); }
  public static LogicalNotOptions GetRootAsLogicalNotOptions(ByteBuffer _bb, LogicalNotOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LogicalNotOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartLogicalNotOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<LogicalNotOptions> EndLogicalNotOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LogicalNotOptions>(o);
  }
};

public struct UnpackOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static UnpackOptions GetRootAsUnpackOptions(ByteBuffer _bb) { return GetRootAsUnpackOptions(_bb, new UnpackOptions()); }
  public static UnpackOptions GetRootAsUnpackOptions(ByteBuffer _bb, UnpackOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public UnpackOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Num { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Axis { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<UnpackOptions> CreateUnpackOptions(FlatBufferBuilder builder,
      int num = 0,
      int axis = 0) {
    builder.StartObject(2);
    UnpackOptions.AddAxis(builder, axis);
    UnpackOptions.AddNum(builder, num);
    return UnpackOptions.EndUnpackOptions(builder);
  }

  public static void StartUnpackOptions(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddNum(FlatBufferBuilder builder, int num) { builder.AddInt(0, num, 0); }
  public static void AddAxis(FlatBufferBuilder builder, int axis) { builder.AddInt(1, axis, 0); }
  public static Offset<UnpackOptions> EndUnpackOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UnpackOptions>(o);
  }
};

public struct FloorDivOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FloorDivOptions GetRootAsFloorDivOptions(ByteBuffer _bb) { return GetRootAsFloorDivOptions(_bb, new FloorDivOptions()); }
  public static FloorDivOptions GetRootAsFloorDivOptions(ByteBuffer _bb, FloorDivOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FloorDivOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartFloorDivOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<FloorDivOptions> EndFloorDivOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FloorDivOptions>(o);
  }
};

public struct SquareOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SquareOptions GetRootAsSquareOptions(ByteBuffer _bb) { return GetRootAsSquareOptions(_bb, new SquareOptions()); }
  public static SquareOptions GetRootAsSquareOptions(ByteBuffer _bb, SquareOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SquareOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartSquareOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<SquareOptions> EndSquareOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SquareOptions>(o);
  }
};

public struct ZerosLikeOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ZerosLikeOptions GetRootAsZerosLikeOptions(ByteBuffer _bb) { return GetRootAsZerosLikeOptions(_bb, new ZerosLikeOptions()); }
  public static ZerosLikeOptions GetRootAsZerosLikeOptions(ByteBuffer _bb, ZerosLikeOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ZerosLikeOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartZerosLikeOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<ZerosLikeOptions> EndZerosLikeOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ZerosLikeOptions>(o);
  }
};

public struct FillOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FillOptions GetRootAsFillOptions(ByteBuffer _bb) { return GetRootAsFillOptions(_bb, new FillOptions()); }
  public static FillOptions GetRootAsFillOptions(ByteBuffer _bb, FillOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FillOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartFillOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<FillOptions> EndFillOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FillOptions>(o);
  }
};

public struct FloorModOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static FloorModOptions GetRootAsFloorModOptions(ByteBuffer _bb) { return GetRootAsFloorModOptions(_bb, new FloorModOptions()); }
  public static FloorModOptions GetRootAsFloorModOptions(ByteBuffer _bb, FloorModOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public FloorModOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartFloorModOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<FloorModOptions> EndFloorModOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<FloorModOptions>(o);
  }
};

public struct RangeOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static RangeOptions GetRootAsRangeOptions(ByteBuffer _bb) { return GetRootAsRangeOptions(_bb, new RangeOptions()); }
  public static RangeOptions GetRootAsRangeOptions(ByteBuffer _bb, RangeOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public RangeOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartRangeOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<RangeOptions> EndRangeOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<RangeOptions>(o);
  }
};

public struct LeakyReluOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static LeakyReluOptions GetRootAsLeakyReluOptions(ByteBuffer _bb) { return GetRootAsLeakyReluOptions(_bb, new LeakyReluOptions()); }
  public static LeakyReluOptions GetRootAsLeakyReluOptions(ByteBuffer _bb, LeakyReluOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public LeakyReluOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public float Alpha { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static Offset<LeakyReluOptions> CreateLeakyReluOptions(FlatBufferBuilder builder,
      float alpha = 0.0f) {
    builder.StartObject(1);
    LeakyReluOptions.AddAlpha(builder, alpha);
    return LeakyReluOptions.EndLeakyReluOptions(builder);
  }

  public static void StartLeakyReluOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddAlpha(FlatBufferBuilder builder, float alpha) { builder.AddFloat(0, alpha, 0.0f); }
  public static Offset<LeakyReluOptions> EndLeakyReluOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<LeakyReluOptions>(o);
  }
};

public struct SquaredDifferenceOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SquaredDifferenceOptions GetRootAsSquaredDifferenceOptions(ByteBuffer _bb) { return GetRootAsSquaredDifferenceOptions(_bb, new SquaredDifferenceOptions()); }
  public static SquaredDifferenceOptions GetRootAsSquaredDifferenceOptions(ByteBuffer _bb, SquaredDifferenceOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SquaredDifferenceOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartSquaredDifferenceOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<SquaredDifferenceOptions> EndSquaredDifferenceOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SquaredDifferenceOptions>(o);
  }
};

public struct MirrorPadOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static MirrorPadOptions GetRootAsMirrorPadOptions(ByteBuffer _bb) { return GetRootAsMirrorPadOptions(_bb, new MirrorPadOptions()); }
  public static MirrorPadOptions GetRootAsMirrorPadOptions(ByteBuffer _bb, MirrorPadOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public MirrorPadOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public MirrorPadMode Mode { get { int o = __p.__offset(4); return o != 0 ? (MirrorPadMode)__p.bb.GetSbyte(o + __p.bb_pos) : MirrorPadMode.REFLECT; } }

  public static Offset<MirrorPadOptions> CreateMirrorPadOptions(FlatBufferBuilder builder,
      MirrorPadMode mode = MirrorPadMode.REFLECT) {
    builder.StartObject(1);
    MirrorPadOptions.AddMode(builder, mode);
    return MirrorPadOptions.EndMirrorPadOptions(builder);
  }

  public static void StartMirrorPadOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddMode(FlatBufferBuilder builder, MirrorPadMode mode) { builder.AddSbyte(0, (sbyte)mode, 0); }
  public static Offset<MirrorPadOptions> EndMirrorPadOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<MirrorPadOptions>(o);
  }
};

public struct UniqueOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static UniqueOptions GetRootAsUniqueOptions(ByteBuffer _bb) { return GetRootAsUniqueOptions(_bb, new UniqueOptions()); }
  public static UniqueOptions GetRootAsUniqueOptions(ByteBuffer _bb, UniqueOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public UniqueOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TensorType IdxOutType { get { int o = __p.__offset(4); return o != 0 ? (TensorType)__p.bb.GetSbyte(o + __p.bb_pos) : TensorType.INT32; } }

  public static Offset<UniqueOptions> CreateUniqueOptions(FlatBufferBuilder builder,
      TensorType idx_out_type = TensorType.INT32) {
    builder.StartObject(1);
    UniqueOptions.AddIdxOutType(builder, idx_out_type);
    return UniqueOptions.EndUniqueOptions(builder);
  }

  public static void StartUniqueOptions(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddIdxOutType(FlatBufferBuilder builder, TensorType idxOutType) { builder.AddSbyte(0, (sbyte)idxOutType, 2); }
  public static Offset<UniqueOptions> EndUniqueOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<UniqueOptions>(o);
  }
};

public struct ReverseV2Options : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ReverseV2Options GetRootAsReverseV2Options(ByteBuffer _bb) { return GetRootAsReverseV2Options(_bb, new ReverseV2Options()); }
  public static ReverseV2Options GetRootAsReverseV2Options(ByteBuffer _bb, ReverseV2Options obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ReverseV2Options __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartReverseV2Options(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<ReverseV2Options> EndReverseV2Options(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ReverseV2Options>(o);
  }
};

public struct AddNOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AddNOptions GetRootAsAddNOptions(ByteBuffer _bb) { return GetRootAsAddNOptions(_bb, new AddNOptions()); }
  public static AddNOptions GetRootAsAddNOptions(ByteBuffer _bb, AddNOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AddNOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartAddNOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<AddNOptions> EndAddNOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AddNOptions>(o);
  }
};

public struct GatherNdOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static GatherNdOptions GetRootAsGatherNdOptions(ByteBuffer _bb) { return GetRootAsGatherNdOptions(_bb, new GatherNdOptions()); }
  public static GatherNdOptions GetRootAsGatherNdOptions(ByteBuffer _bb, GatherNdOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public GatherNdOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartGatherNdOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<GatherNdOptions> EndGatherNdOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<GatherNdOptions>(o);
  }
};

public struct WhereOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static WhereOptions GetRootAsWhereOptions(ByteBuffer _bb) { return GetRootAsWhereOptions(_bb, new WhereOptions()); }
  public static WhereOptions GetRootAsWhereOptions(ByteBuffer _bb, WhereOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public WhereOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }


  public static void StartWhereOptions(FlatBufferBuilder builder) { builder.StartObject(0); }
  public static Offset<WhereOptions> EndWhereOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<WhereOptions>(o);
  }
};

public struct ReverseSequenceOptions : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ReverseSequenceOptions GetRootAsReverseSequenceOptions(ByteBuffer _bb) { return GetRootAsReverseSequenceOptions(_bb, new ReverseSequenceOptions()); }
  public static ReverseSequenceOptions GetRootAsReverseSequenceOptions(ByteBuffer _bb, ReverseSequenceOptions obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ReverseSequenceOptions __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int SeqDim { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int BatchDim { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }

  public static Offset<ReverseSequenceOptions> CreateReverseSequenceOptions(FlatBufferBuilder builder,
      int seq_dim = 0,
      int batch_dim = 0) {
    builder.StartObject(2);
    ReverseSequenceOptions.AddBatchDim(builder, batch_dim);
    ReverseSequenceOptions.AddSeqDim(builder, seq_dim);
    return ReverseSequenceOptions.EndReverseSequenceOptions(builder);
  }

  public static void StartReverseSequenceOptions(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddSeqDim(FlatBufferBuilder builder, int seqDim) { builder.AddInt(0, seqDim, 0); }
  public static void AddBatchDim(FlatBufferBuilder builder, int batchDim) { builder.AddInt(1, batchDim, 0); }
  public static Offset<ReverseSequenceOptions> EndReverseSequenceOptions(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ReverseSequenceOptions>(o);
  }
};

public struct OperatorCode : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static OperatorCode GetRootAsOperatorCode(ByteBuffer _bb) { return GetRootAsOperatorCode(_bb, new OperatorCode()); }
  public static OperatorCode GetRootAsOperatorCode(ByteBuffer _bb, OperatorCode obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public OperatorCode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BuiltinOperator BuiltinCode { get { int o = __p.__offset(4); return o != 0 ? (BuiltinOperator)__p.bb.GetSbyte(o + __p.bb_pos) : BuiltinOperator.ADD; } }
  public string CustomCode { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCustomCodeBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetCustomCodeBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetCustomCodeArray() { return __p.__vector_as_array<byte>(6); }
  public int Version { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)1; } }

  public static Offset<OperatorCode> CreateOperatorCode(FlatBufferBuilder builder,
      BuiltinOperator builtin_code = BuiltinOperator.ADD,
      StringOffset custom_codeOffset = default(StringOffset),
      int version = 1) {
    builder.StartObject(3);
    OperatorCode.AddVersion(builder, version);
    OperatorCode.AddCustomCode(builder, custom_codeOffset);
    OperatorCode.AddBuiltinCode(builder, builtin_code);
    return OperatorCode.EndOperatorCode(builder);
  }

  public static void StartOperatorCode(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddBuiltinCode(FlatBufferBuilder builder, BuiltinOperator builtinCode) { builder.AddSbyte(0, (sbyte)builtinCode, 0); }
  public static void AddCustomCode(FlatBufferBuilder builder, StringOffset customCodeOffset) { builder.AddOffset(1, customCodeOffset.Value, 0); }
  public static void AddVersion(FlatBufferBuilder builder, int version) { builder.AddInt(2, version, 1); }
  public static Offset<OperatorCode> EndOperatorCode(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<OperatorCode>(o);
  }
};

public struct Operator : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Operator GetRootAsOperator(ByteBuffer _bb) { return GetRootAsOperator(_bb, new Operator()); }
  public static Operator GetRootAsOperator(ByteBuffer _bb, Operator obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Operator __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint OpcodeIndex { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public int Inputs(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InputsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInputsBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetInputsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetInputsArray() { return __p.__vector_as_array<int>(6); }
  public int Outputs(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OutputsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOutputsBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetOutputsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetOutputsArray() { return __p.__vector_as_array<int>(8); }
  public BuiltinOptions BuiltinOptionsType { get { int o = __p.__offset(10); return o != 0 ? (BuiltinOptions)__p.bb.Get(o + __p.bb_pos) : tflite.BuiltinOptions.NONE; } }
  public TTable? BuiltinOptions<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(12); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }
  public byte CustomOptions(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int CustomOptionsLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCustomOptionsBytes() { return __p.__vector_as_span(14); }
#else
  public ArraySegment<byte>? GetCustomOptionsBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetCustomOptionsArray() { return __p.__vector_as_array<byte>(14); }
  public CustomOptionsFormat CustomOptionsFormat { get { int o = __p.__offset(16); return o != 0 ? (CustomOptionsFormat)__p.bb.GetSbyte(o + __p.bb_pos) : CustomOptionsFormat.FLEXBUFFERS; } }
  public bool MutatingVariableInputs(int j) { int o = __p.__offset(18); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int MutatingVariableInputsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMutatingVariableInputsBytes() { return __p.__vector_as_span(18); }
#else
  public ArraySegment<byte>? GetMutatingVariableInputsBytes() { return __p.__vector_as_arraysegment(18); }
#endif
  public bool[] GetMutatingVariableInputsArray() { return __p.__vector_as_array<bool>(18); }

  public static Offset<Operator> CreateOperator(FlatBufferBuilder builder,
      uint opcode_index = 0,
      VectorOffset inputsOffset = default(VectorOffset),
      VectorOffset outputsOffset = default(VectorOffset),
      BuiltinOptions builtin_options_type = tflite.BuiltinOptions.NONE,
      int builtin_optionsOffset = 0,
      VectorOffset custom_optionsOffset = default(VectorOffset),
      CustomOptionsFormat custom_options_format = CustomOptionsFormat.FLEXBUFFERS,
      VectorOffset mutating_variable_inputsOffset = default(VectorOffset)) {
    builder.StartObject(8);
    Operator.AddMutatingVariableInputs(builder, mutating_variable_inputsOffset);
    Operator.AddCustomOptions(builder, custom_optionsOffset);
    Operator.AddBuiltinOptions(builder, builtin_optionsOffset);
    Operator.AddOutputs(builder, outputsOffset);
    Operator.AddInputs(builder, inputsOffset);
    Operator.AddOpcodeIndex(builder, opcode_index);
    Operator.AddCustomOptionsFormat(builder, custom_options_format);
    Operator.AddBuiltinOptionsType(builder, builtin_options_type);
    return Operator.EndOperator(builder);
  }

  public static void StartOperator(FlatBufferBuilder builder) { builder.StartObject(8); }
  public static void AddOpcodeIndex(FlatBufferBuilder builder, uint opcodeIndex) { builder.AddUint(0, opcodeIndex, 0); }
  public static void AddInputs(FlatBufferBuilder builder, VectorOffset inputsOffset) { builder.AddOffset(1, inputsOffset.Value, 0); }
  public static VectorOffset CreateInputsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInputsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOutputs(FlatBufferBuilder builder, VectorOffset outputsOffset) { builder.AddOffset(2, outputsOffset.Value, 0); }
  public static VectorOffset CreateOutputsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOutputsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOutputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddBuiltinOptionsType(FlatBufferBuilder builder, BuiltinOptions builtinOptionsType) { builder.AddByte(3, (byte)builtinOptionsType, 0); }
  public static void AddBuiltinOptions(FlatBufferBuilder builder, int builtinOptionsOffset) { builder.AddOffset(4, builtinOptionsOffset, 0); }
  public static void AddCustomOptions(FlatBufferBuilder builder, VectorOffset customOptionsOffset) { builder.AddOffset(5, customOptionsOffset.Value, 0); }
  public static VectorOffset CreateCustomOptionsVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateCustomOptionsVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartCustomOptionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddCustomOptionsFormat(FlatBufferBuilder builder, CustomOptionsFormat customOptionsFormat) { builder.AddSbyte(6, (sbyte)customOptionsFormat, 0); }
  public static void AddMutatingVariableInputs(FlatBufferBuilder builder, VectorOffset mutatingVariableInputsOffset) { builder.AddOffset(7, mutatingVariableInputsOffset.Value, 0); }
  public static VectorOffset CreateMutatingVariableInputsVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMutatingVariableInputsVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartMutatingVariableInputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Operator> EndOperator(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Operator>(o);
  }
};

public struct SubGraph : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static SubGraph GetRootAsSubGraph(ByteBuffer _bb) { return GetRootAsSubGraph(_bb, new SubGraph()); }
  public static SubGraph GetRootAsSubGraph(ByteBuffer _bb, SubGraph obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public SubGraph __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Tensor? Tensors(int j) { int o = __p.__offset(4); return o != 0 ? (Tensor?)(new Tensor()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TensorsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int Inputs(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int InputsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInputsBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetInputsBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public int[] GetInputsArray() { return __p.__vector_as_array<int>(6); }
  public int Outputs(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int OutputsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetOutputsBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetOutputsBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public int[] GetOutputsArray() { return __p.__vector_as_array<int>(8); }
  public Operator? Operators(int j) { int o = __p.__offset(10); return o != 0 ? (Operator?)(new Operator()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OperatorsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Name { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(12); }

  public static Offset<SubGraph> CreateSubGraph(FlatBufferBuilder builder,
      VectorOffset tensorsOffset = default(VectorOffset),
      VectorOffset inputsOffset = default(VectorOffset),
      VectorOffset outputsOffset = default(VectorOffset),
      VectorOffset operatorsOffset = default(VectorOffset),
      StringOffset nameOffset = default(StringOffset)) {
    builder.StartObject(5);
    SubGraph.AddName(builder, nameOffset);
    SubGraph.AddOperators(builder, operatorsOffset);
    SubGraph.AddOutputs(builder, outputsOffset);
    SubGraph.AddInputs(builder, inputsOffset);
    SubGraph.AddTensors(builder, tensorsOffset);
    return SubGraph.EndSubGraph(builder);
  }

  public static void StartSubGraph(FlatBufferBuilder builder) { builder.StartObject(5); }
  public static void AddTensors(FlatBufferBuilder builder, VectorOffset tensorsOffset) { builder.AddOffset(0, tensorsOffset.Value, 0); }
  public static VectorOffset CreateTensorsVector(FlatBufferBuilder builder, Offset<Tensor>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTensorsVectorBlock(FlatBufferBuilder builder, Offset<Tensor>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTensorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInputs(FlatBufferBuilder builder, VectorOffset inputsOffset) { builder.AddOffset(1, inputsOffset.Value, 0); }
  public static VectorOffset CreateInputsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInputsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOutputs(FlatBufferBuilder builder, VectorOffset outputsOffset) { builder.AddOffset(2, outputsOffset.Value, 0); }
  public static VectorOffset CreateOutputsVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateOutputsVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOutputsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOperators(FlatBufferBuilder builder, VectorOffset operatorsOffset) { builder.AddOffset(3, operatorsOffset.Value, 0); }
  public static VectorOffset CreateOperatorsVector(FlatBufferBuilder builder, Offset<Operator>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOperatorsVectorBlock(FlatBufferBuilder builder, Offset<Operator>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOperatorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(4, nameOffset.Value, 0); }
  public static Offset<SubGraph> EndSubGraph(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<SubGraph>(o);
  }
};

public struct Buffer : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Buffer GetRootAsBuffer(ByteBuffer _bb) { return GetRootAsBuffer(_bb, new Buffer()); }
  public static Buffer GetRootAsBuffer(ByteBuffer _bb, Buffer obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Buffer __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte Data(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int DataLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetDataArray() { return __p.__vector_as_array<byte>(4); }

  public static Offset<Buffer> CreateBuffer(FlatBufferBuilder builder,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(1);
    Buffer.AddData(builder, dataOffset);
    return Buffer.EndBuffer(builder);
  }

  public static void StartBuffer(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(0, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Buffer> EndBuffer(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Buffer>(o);
  }
};

public struct Model : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Model GetRootAsModel(ByteBuffer _bb) { return GetRootAsModel(_bb, new Model()); }
  public static Model GetRootAsModel(ByteBuffer _bb, Model obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool ModelBufferHasIdentifier(ByteBuffer _bb) { return Table.__has_identifier(_bb, "TFL3"); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Model __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public uint Version { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUint(o + __p.bb_pos) : (uint)0; } }
  public OperatorCode? OperatorCodes(int j) { int o = __p.__offset(6); return o != 0 ? (OperatorCode?)(new OperatorCode()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OperatorCodesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public SubGraph? Subgraphs(int j) { int o = __p.__offset(8); return o != 0 ? (SubGraph?)(new SubGraph()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SubgraphsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Description { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(10); }
  public Buffer? Buffers(int j) { int o = __p.__offset(12); return o != 0 ? (Buffer?)(new Buffer()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BuffersLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
  public int MetadataBuffer(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int MetadataBufferLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMetadataBufferBytes() { return __p.__vector_as_span(14); }
#else
  public ArraySegment<byte>? GetMetadataBufferBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public int[] GetMetadataBufferArray() { return __p.__vector_as_array<int>(14); }

  public static Offset<Model> CreateModel(FlatBufferBuilder builder,
      uint version = 0,
      VectorOffset operator_codesOffset = default(VectorOffset),
      VectorOffset subgraphsOffset = default(VectorOffset),
      StringOffset descriptionOffset = default(StringOffset),
      VectorOffset buffersOffset = default(VectorOffset),
      VectorOffset metadata_bufferOffset = default(VectorOffset)) {
    builder.StartObject(6);
    Model.AddMetadataBuffer(builder, metadata_bufferOffset);
    Model.AddBuffers(builder, buffersOffset);
    Model.AddDescription(builder, descriptionOffset);
    Model.AddSubgraphs(builder, subgraphsOffset);
    Model.AddOperatorCodes(builder, operator_codesOffset);
    Model.AddVersion(builder, version);
    return Model.EndModel(builder);
  }

  public static void StartModel(FlatBufferBuilder builder) { builder.StartObject(6); }
  public static void AddVersion(FlatBufferBuilder builder, uint version) { builder.AddUint(0, version, 0); }
  public static void AddOperatorCodes(FlatBufferBuilder builder, VectorOffset operatorCodesOffset) { builder.AddOffset(1, operatorCodesOffset.Value, 0); }
  public static VectorOffset CreateOperatorCodesVector(FlatBufferBuilder builder, Offset<OperatorCode>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOperatorCodesVectorBlock(FlatBufferBuilder builder, Offset<OperatorCode>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOperatorCodesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSubgraphs(FlatBufferBuilder builder, VectorOffset subgraphsOffset) { builder.AddOffset(2, subgraphsOffset.Value, 0); }
  public static VectorOffset CreateSubgraphsVector(FlatBufferBuilder builder, Offset<SubGraph>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSubgraphsVectorBlock(FlatBufferBuilder builder, Offset<SubGraph>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSubgraphsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(3, descriptionOffset.Value, 0); }
  public static void AddBuffers(FlatBufferBuilder builder, VectorOffset buffersOffset) { builder.AddOffset(4, buffersOffset.Value, 0); }
  public static VectorOffset CreateBuffersVector(FlatBufferBuilder builder, Offset<Buffer>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBuffersVectorBlock(FlatBufferBuilder builder, Offset<Buffer>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBuffersVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddMetadataBuffer(FlatBufferBuilder builder, VectorOffset metadataBufferOffset) { builder.AddOffset(5, metadataBufferOffset.Value, 0); }
  public static VectorOffset CreateMetadataBufferVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateMetadataBufferVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMetadataBufferVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Model> EndModel(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Model>(o);
  }
  public static void FinishModelBuffer(FlatBufferBuilder builder, Offset<Model> offset) { builder.Finish(offset.Value, "TFL3"); }
  public static void FinishSizePrefixedModelBuffer(FlatBufferBuilder builder, Offset<Model> offset) { builder.FinishSizePrefixed(offset.Value, "TFL3"); }
};


}
