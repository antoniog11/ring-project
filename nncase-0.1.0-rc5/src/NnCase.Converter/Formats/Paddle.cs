// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: framework.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Paddle.Framework.Proto {

  /// <summary>Holder for reflection information generated from framework.proto</summary>
  public static partial class FrameworkReflection {

    #region Descriptor
    /// <summary>File descriptor for framework.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FrameworkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9mcmFtZXdvcmsucHJvdG8SFnBhZGRsZS5mcmFtZXdvcmsucHJvdG8iGgoH",
            "VmVyc2lvbhIPCgd2ZXJzaW9uGAEgASgDIuUDCgZPcERlc2MSDAoEdHlwZRgD",
            "IAEoCRIyCgZpbnB1dHMYASADKAsyIi5wYWRkbGUuZnJhbWV3b3JrLnByb3Rv",
            "Lk9wRGVzYy5WYXISMwoHb3V0cHV0cxgCIAMoCzIiLnBhZGRsZS5mcmFtZXdv",
            "cmsucHJvdG8uT3BEZXNjLlZhchIyCgVhdHRycxgEIAMoCzIjLnBhZGRsZS5m",
            "cmFtZXdvcmsucHJvdG8uT3BEZXNjLkF0dHISEQoJaXNfdGFyZ2V0GAUgASgI",
            "Gu8BCgRBdHRyEgwKBG5hbWUYASABKAkSLgoEdHlwZRgCIAEoDjIgLnBhZGRs",
            "ZS5mcmFtZXdvcmsucHJvdG8uQXR0clR5cGUSCQoBaRgDIAEoBRIJCgFmGAQg",
            "ASgCEgkKAXMYBSABKAkSDAoEaW50cxgGIAMoBRIOCgZmbG9hdHMYByADKAIS",
            "DwoHc3RyaW5ncxgIIAMoCRIJCgFiGAogASgIEg0KBWJvb2xzGAsgAygIEhEK",
            "CWJsb2NrX2lkeBgMIAEoBRIJCgFsGA0gASgDEhIKCmJsb2Nrc19pZHgYDiAD",
            "KAUSDQoFbG9uZ3MYDyADKAMaKwoDVmFyEhEKCXBhcmFtZXRlchgBIAEoCRIR",
            "Cglhcmd1bWVudHMYAiADKAkilwMKB09wUHJvdG8SDAoEdHlwZRgBIAEoCRIz",
            "CgZpbnB1dHMYAiADKAsyIy5wYWRkbGUuZnJhbWV3b3JrLnByb3RvLk9wUHJv",
            "dG8uVmFyEjQKB291dHB1dHMYAyADKAsyIy5wYWRkbGUuZnJhbWV3b3JrLnBy",
            "b3RvLk9wUHJvdG8uVmFyEjMKBWF0dHJzGAQgAygLMiQucGFkZGxlLmZyYW1l",
            "d29yay5wcm90by5PcFByb3RvLkF0dHISDwoHY29tbWVudBgFIAEoCRpjCgNW",
            "YXISDAoEbmFtZRgBIAEoCRIPCgdjb21tZW50GAIgASgJEhIKCmR1cGxpY2Fi",
            "bGUYAyABKAgSFAoMaW50ZXJtZWRpYXRlGAQgASgIEhMKC2Rpc3BlbnNhYmxl",
            "GAUgASgIGmgKBEF0dHISDAoEbmFtZRgBIAEoCRIuCgR0eXBlGAIgASgOMiAu",
            "cGFkZGxlLmZyYW1ld29yay5wcm90by5BdHRyVHlwZRIPCgdjb21tZW50GAMg",
            "ASgJEhEKCWdlbmVyYXRlZBgEIAEoCCLUCAoHVmFyVHlwZRIyCgR0eXBlGAEg",
            "ASgOMiQucGFkZGxlLmZyYW1ld29yay5wcm90by5WYXJUeXBlLlR5cGUSQQoN",
            "c2VsZWN0ZWRfcm93cxgCIAEoCzIqLnBhZGRsZS5mcmFtZXdvcmsucHJvdG8u",
            "VmFyVHlwZS5UZW5zb3JEZXNjEkEKCmxvZF90ZW5zb3IYAyABKAsyLS5wYWRk",
            "bGUuZnJhbWV3b3JrLnByb3RvLlZhclR5cGUuTG9EVGVuc29yRGVzYxJICgx0",
            "ZW5zb3JfYXJyYXkYBCABKAsyMi5wYWRkbGUuZnJhbWV3b3JrLnByb3RvLlZh",
            "clR5cGUuTG9EVGVuc29yQXJyYXlEZXNjEjoKBnJlYWRlchgFIAEoCzIqLnBh",
            "ZGRsZS5mcmFtZXdvcmsucHJvdG8uVmFyVHlwZS5SZWFkZXJEZXNjEjQKBXR1",
            "cGxlGAcgASgLMiUucGFkZGxlLmZyYW1ld29yay5wcm90by5WYXJUeXBlLlR1",
            "cGxlGlMKClRlbnNvckRlc2MSNwoJZGF0YV90eXBlGAEgASgOMiQucGFkZGxl",
            "LmZyYW1ld29yay5wcm90by5WYXJUeXBlLlR5cGUSDAoEZGltcxgCIAMoAxpe",
            "Cg1Mb0RUZW5zb3JEZXNjEjoKBnRlbnNvchgBIAEoCzIqLnBhZGRsZS5mcmFt",
            "ZXdvcmsucHJvdG8uVmFyVHlwZS5UZW5zb3JEZXNjEhEKCWxvZF9sZXZlbBgC",
            "IAEoBRpjChJMb0RUZW5zb3JBcnJheURlc2MSOgoGdGVuc29yGAEgASgLMiou",
            "cGFkZGxlLmZyYW1ld29yay5wcm90by5WYXJUeXBlLlRlbnNvckRlc2MSEQoJ",
            "bG9kX2xldmVsGAIgASgFGk8KClJlYWRlckRlc2MSQQoKbG9kX3RlbnNvchgB",
            "IAMoCzItLnBhZGRsZS5mcmFtZXdvcmsucHJvdG8uVmFyVHlwZS5Mb0RUZW5z",
            "b3JEZXNjGkMKBVR1cGxlEjoKDGVsZW1lbnRfdHlwZRgBIAMoDjIkLnBhZGRs",
            "ZS5mcmFtZXdvcmsucHJvdG8uVmFyVHlwZS5UeXBlIqICCgRUeXBlEggKBEJP",
            "T0wQABIJCgVJTlQxNhABEgkKBUlOVDMyEAISCQoFSU5UNjQQAxIICgRGUDE2",
            "EAQSCAoERlAzMhAFEggKBEZQNjQQBhIKCgZTSVpFX1QQExIJCgVVSU5UOBAU",
            "EggKBElOVDgQFRIOCgpMT0RfVEVOU09SEAcSEQoNU0VMRUNURURfUk9XUxAI",
            "EhIKDkZFRURfTUlOSUJBVENIEAkSDgoKRkVUQ0hfTElTVBAKEg8KC1NURVBf",
            "U0NPUEVTEAsSEgoOTE9EX1JBTktfVEFCTEUQDBIUChBMT0RfVEVOU09SX0FS",
            "UkFZEA0SDgoKUExBQ0VfTElTVBAOEgoKBlJFQURFUhAPEgcKA1JBVxAREgkK",
            "BVRVUExFEBIiWwoHVmFyRGVzYxIMCgRuYW1lGAEgASgJEi0KBHR5cGUYAiAB",
            "KAsyHy5wYWRkbGUuZnJhbWV3b3JrLnByb3RvLlZhclR5cGUSEwoLcGVyc2lz",
            "dGFibGUYAyABKAgiowEKCUJsb2NrRGVzYxILCgNpZHgYASABKAUSEgoKcGFy",
            "ZW50X2lkeBgCIAEoBRItCgR2YXJzGAMgAygLMh8ucGFkZGxlLmZyYW1ld29y",
            "ay5wcm90by5WYXJEZXNjEisKA29wcxgEIAMoCzIeLnBhZGRsZS5mcmFtZXdv",
            "cmsucHJvdG8uT3BEZXNjEhkKEWZvcndhcmRfYmxvY2tfaWR4GAUgASgFInIK",
            "C1Byb2dyYW1EZXNjEjEKBmJsb2NrcxgBIAMoCzIhLnBhZGRsZS5mcmFtZXdv",
            "cmsucHJvdG8uQmxvY2tEZXNjEjAKB3ZlcnNpb24YAiABKAsyHy5wYWRkbGUu",
            "ZnJhbWV3b3JrLnByb3RvLlZlcnNpb24qlAEKCEF0dHJUeXBlEgcKA0lOVBAA",
            "EgkKBUZMT0FUEAESCgoGU1RSSU5HEAISCAoESU5UUxADEgoKBkZMT0FUUxAE",
            "EgsKB1NUUklOR1MQBRILCgdCT09MRUFOEAYSDAoIQk9PTEVBTlMQBxIJCgVC",
            "TE9DSxAIEggKBExPTkcQCRIKCgZCTE9DS1MQChIJCgVMT05HUxALQgJIA2IG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Paddle.Framework.Proto.AttrType), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.Version), global::Paddle.Framework.Proto.Version.Parser, new[]{ "Version_" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.OpDesc), global::Paddle.Framework.Proto.OpDesc.Parser, new[]{ "Type", "Inputs", "Outputs", "Attrs", "IsTarget" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.OpDesc.Types.Attr), global::Paddle.Framework.Proto.OpDesc.Types.Attr.Parser, new[]{ "Name", "Type", "I", "F", "S", "Ints", "Floats", "Strings", "B", "Bools", "BlockIdx", "L", "BlocksIdx", "Longs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.OpDesc.Types.Var), global::Paddle.Framework.Proto.OpDesc.Types.Var.Parser, new[]{ "Parameter", "Arguments" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.OpProto), global::Paddle.Framework.Proto.OpProto.Parser, new[]{ "Type", "Inputs", "Outputs", "Attrs", "Comment" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.OpProto.Types.Var), global::Paddle.Framework.Proto.OpProto.Types.Var.Parser, new[]{ "Name", "Comment", "Duplicable", "Intermediate", "Dispensable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.OpProto.Types.Attr), global::Paddle.Framework.Proto.OpProto.Types.Attr.Parser, new[]{ "Name", "Type", "Comment", "Generated" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.VarType), global::Paddle.Framework.Proto.VarType.Parser, new[]{ "Type", "SelectedRows", "LodTensor", "TensorArray", "Reader", "Tuple" }, null, new[]{ typeof(global::Paddle.Framework.Proto.VarType.Types.Type) }, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.VarType.Types.TensorDesc), global::Paddle.Framework.Proto.VarType.Types.TensorDesc.Parser, new[]{ "DataType", "Dims" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.VarType.Types.LoDTensorDesc), global::Paddle.Framework.Proto.VarType.Types.LoDTensorDesc.Parser, new[]{ "Tensor", "LodLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.VarType.Types.LoDTensorArrayDesc), global::Paddle.Framework.Proto.VarType.Types.LoDTensorArrayDesc.Parser, new[]{ "Tensor", "LodLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.VarType.Types.ReaderDesc), global::Paddle.Framework.Proto.VarType.Types.ReaderDesc.Parser, new[]{ "LodTensor" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.VarType.Types.Tuple), global::Paddle.Framework.Proto.VarType.Types.Tuple.Parser, new[]{ "ElementType" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.VarDesc), global::Paddle.Framework.Proto.VarDesc.Parser, new[]{ "Name", "Type", "Persistable" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.BlockDesc), global::Paddle.Framework.Proto.BlockDesc.Parser, new[]{ "Idx", "ParentIdx", "Vars", "Ops", "ForwardBlockIdx" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Paddle.Framework.Proto.ProgramDesc), global::Paddle.Framework.Proto.ProgramDesc.Parser, new[]{ "Blocks", "Version" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum AttrType {
    [pbr::OriginalName("INT")] Int = 0,
    [pbr::OriginalName("FLOAT")] Float = 1,
    [pbr::OriginalName("STRING")] String = 2,
    [pbr::OriginalName("INTS")] Ints = 3,
    [pbr::OriginalName("FLOATS")] Floats = 4,
    [pbr::OriginalName("STRINGS")] Strings = 5,
    [pbr::OriginalName("BOOLEAN")] Boolean = 6,
    [pbr::OriginalName("BOOLEANS")] Booleans = 7,
    [pbr::OriginalName("BLOCK")] Block = 8,
    [pbr::OriginalName("LONG")] Long = 9,
    [pbr::OriginalName("BLOCKS")] Blocks = 10,
    [pbr::OriginalName("LONGS")] Longs = 11,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Any incompatible changes to ProgramDesc and its dependencies should
  /// raise the version defined version.h.
  ///
  /// Serailization and Deserialization codes should be modified in a way
  /// that supports old versions following the version and compatibility policy.
  /// </summary>
  public sealed partial class Version : pb::IMessage<Version> {
    private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Version> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paddle.Framework.Proto.FrameworkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version(Version other) : this() {
      version_ = other.version_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Version Clone() {
      return new Version(this);
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int Version_FieldNumber = 1;
    private long version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version_ {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Version);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Version other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Version_ != other.Version_) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Version_ != 0L) hash ^= Version_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Version_ != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Version_);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Version_ != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version_);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Version other) {
      if (other == null) {
        return;
      }
      if (other.Version_ != 0L) {
        Version_ = other.Version_;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Version_ = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// OpDesc describes an instance of a C++ framework::OperatorBase
  /// derived class type.
  /// </summary>
  public sealed partial class OpDesc : pb::IMessage<OpDesc> {
    private static readonly pb::MessageParser<OpDesc> _parser = new pb::MessageParser<OpDesc>(() => new OpDesc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpDesc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paddle.Framework.Proto.FrameworkReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpDesc(OpDesc other) : this() {
      type_ = other.type_;
      inputs_ = other.inputs_.Clone();
      outputs_ = other.outputs_.Clone();
      attrs_ = other.attrs_.Clone();
      isTarget_ = other.isTarget_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpDesc Clone() {
      return new OpDesc(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 3;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paddle.Framework.Proto.OpDesc.Types.Var> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(10, global::Paddle.Framework.Proto.OpDesc.Types.Var.Parser);
    private readonly pbc::RepeatedField<global::Paddle.Framework.Proto.OpDesc.Types.Var> inputs_ = new pbc::RepeatedField<global::Paddle.Framework.Proto.OpDesc.Types.Var>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paddle.Framework.Proto.OpDesc.Types.Var> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Paddle.Framework.Proto.OpDesc.Types.Var> _repeated_outputs_codec
        = pb::FieldCodec.ForMessage(18, global::Paddle.Framework.Proto.OpDesc.Types.Var.Parser);
    private readonly pbc::RepeatedField<global::Paddle.Framework.Proto.OpDesc.Types.Var> outputs_ = new pbc::RepeatedField<global::Paddle.Framework.Proto.OpDesc.Types.Var>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paddle.Framework.Proto.OpDesc.Types.Var> Outputs {
      get { return outputs_; }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Paddle.Framework.Proto.OpDesc.Types.Attr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(34, global::Paddle.Framework.Proto.OpDesc.Types.Attr.Parser);
    private readonly pbc::RepeatedField<global::Paddle.Framework.Proto.OpDesc.Types.Attr> attrs_ = new pbc::RepeatedField<global::Paddle.Framework.Proto.OpDesc.Types.Attr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paddle.Framework.Proto.OpDesc.Types.Attr> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "is_target" field.</summary>
    public const int IsTargetFieldNumber = 5;
    private bool isTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsTarget {
      get { return isTarget_; }
      set {
        isTarget_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpDesc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      if(!outputs_.Equals(other.outputs_)) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      if (IsTarget != other.IsTarget) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= inputs_.GetHashCode();
      hash ^= outputs_.GetHashCode();
      hash ^= attrs_.GetHashCode();
      if (IsTarget != false) hash ^= IsTarget.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      inputs_.WriteTo(output, _repeated_inputs_codec);
      outputs_.WriteTo(output, _repeated_outputs_codec);
      if (Type.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Type);
      }
      attrs_.WriteTo(output, _repeated_attrs_codec);
      if (IsTarget != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsTarget);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      if (IsTarget != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpDesc other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      inputs_.Add(other.inputs_);
      outputs_.Add(other.outputs_);
      attrs_.Add(other.attrs_);
      if (other.IsTarget != false) {
        IsTarget = other.IsTarget;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 18: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
          case 26: {
            Type = input.ReadString();
            break;
          }
          case 34: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 40: {
            IsTarget = input.ReadBool();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the OpDesc message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class Attr : pb::IMessage<Attr> {
        private static readonly pb::MessageParser<Attr> _parser = new pb::MessageParser<Attr>(() => new Attr());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Attr> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Paddle.Framework.Proto.OpDesc.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attr() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attr(Attr other) : this() {
          name_ = other.name_;
          type_ = other.type_;
          i_ = other.i_;
          f_ = other.f_;
          s_ = other.s_;
          ints_ = other.ints_.Clone();
          floats_ = other.floats_.Clone();
          strings_ = other.strings_.Clone();
          b_ = other.b_;
          bools_ = other.bools_.Clone();
          blockIdx_ = other.blockIdx_;
          l_ = other.l_;
          blocksIdx_ = other.blocksIdx_.Clone();
          longs_ = other.longs_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attr Clone() {
          return new Attr(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::Paddle.Framework.Proto.AttrType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Paddle.Framework.Proto.AttrType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "i" field.</summary>
        public const int IFieldNumber = 3;
        private int i_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int I {
          get { return i_; }
          set {
            i_ = value;
          }
        }

        /// <summary>Field number for the "f" field.</summary>
        public const int FFieldNumber = 4;
        private float f_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float F {
          get { return f_; }
          set {
            f_ = value;
          }
        }

        /// <summary>Field number for the "s" field.</summary>
        public const int SFieldNumber = 5;
        private string s_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string S {
          get { return s_; }
          set {
            s_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "ints" field.</summary>
        public const int IntsFieldNumber = 6;
        private static readonly pb::FieldCodec<int> _repeated_ints_codec
            = pb::FieldCodec.ForInt32(50);
        private readonly pbc::RepeatedField<int> ints_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> Ints {
          get { return ints_; }
        }

        /// <summary>Field number for the "floats" field.</summary>
        public const int FloatsFieldNumber = 7;
        private static readonly pb::FieldCodec<float> _repeated_floats_codec
            = pb::FieldCodec.ForFloat(58);
        private readonly pbc::RepeatedField<float> floats_ = new pbc::RepeatedField<float>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<float> Floats {
          get { return floats_; }
        }

        /// <summary>Field number for the "strings" field.</summary>
        public const int StringsFieldNumber = 8;
        private static readonly pb::FieldCodec<string> _repeated_strings_codec
            = pb::FieldCodec.ForString(66);
        private readonly pbc::RepeatedField<string> strings_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Strings {
          get { return strings_; }
        }

        /// <summary>Field number for the "b" field.</summary>
        public const int BFieldNumber = 10;
        private bool b_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool B {
          get { return b_; }
          set {
            b_ = value;
          }
        }

        /// <summary>Field number for the "bools" field.</summary>
        public const int BoolsFieldNumber = 11;
        private static readonly pb::FieldCodec<bool> _repeated_bools_codec
            = pb::FieldCodec.ForBool(90);
        private readonly pbc::RepeatedField<bool> bools_ = new pbc::RepeatedField<bool>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<bool> Bools {
          get { return bools_; }
        }

        /// <summary>Field number for the "block_idx" field.</summary>
        public const int BlockIdxFieldNumber = 12;
        private int blockIdx_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int BlockIdx {
          get { return blockIdx_; }
          set {
            blockIdx_ = value;
          }
        }

        /// <summary>Field number for the "l" field.</summary>
        public const int LFieldNumber = 13;
        private long l_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public long L {
          get { return l_; }
          set {
            l_ = value;
          }
        }

        /// <summary>Field number for the "blocks_idx" field.</summary>
        public const int BlocksIdxFieldNumber = 14;
        private static readonly pb::FieldCodec<int> _repeated_blocksIdx_codec
            = pb::FieldCodec.ForInt32(114);
        private readonly pbc::RepeatedField<int> blocksIdx_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<int> BlocksIdx {
          get { return blocksIdx_; }
        }

        /// <summary>Field number for the "longs" field.</summary>
        public const int LongsFieldNumber = 15;
        private static readonly pb::FieldCodec<long> _repeated_longs_codec
            = pb::FieldCodec.ForInt64(122);
        private readonly pbc::RepeatedField<long> longs_ = new pbc::RepeatedField<long>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Longs {
          get { return longs_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Attr);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Attr other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Type != other.Type) return false;
          if (I != other.I) return false;
          if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(F, other.F)) return false;
          if (S != other.S) return false;
          if(!ints_.Equals(other.ints_)) return false;
          if(!floats_.Equals(other.floats_)) return false;
          if(!strings_.Equals(other.strings_)) return false;
          if (B != other.B) return false;
          if(!bools_.Equals(other.bools_)) return false;
          if (BlockIdx != other.BlockIdx) return false;
          if (L != other.L) return false;
          if(!blocksIdx_.Equals(other.blocksIdx_)) return false;
          if(!longs_.Equals(other.longs_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (I != 0) hash ^= I.GetHashCode();
          if (F != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(F);
          if (S.Length != 0) hash ^= S.GetHashCode();
          hash ^= ints_.GetHashCode();
          hash ^= floats_.GetHashCode();
          hash ^= strings_.GetHashCode();
          if (B != false) hash ^= B.GetHashCode();
          hash ^= bools_.GetHashCode();
          if (BlockIdx != 0) hash ^= BlockIdx.GetHashCode();
          if (L != 0L) hash ^= L.GetHashCode();
          hash ^= blocksIdx_.GetHashCode();
          hash ^= longs_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (I != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(I);
          }
          if (F != 0F) {
            output.WriteRawTag(37);
            output.WriteFloat(F);
          }
          if (S.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(S);
          }
          ints_.WriteTo(output, _repeated_ints_codec);
          floats_.WriteTo(output, _repeated_floats_codec);
          strings_.WriteTo(output, _repeated_strings_codec);
          if (B != false) {
            output.WriteRawTag(80);
            output.WriteBool(B);
          }
          bools_.WriteTo(output, _repeated_bools_codec);
          if (BlockIdx != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(BlockIdx);
          }
          if (L != 0L) {
            output.WriteRawTag(104);
            output.WriteInt64(L);
          }
          blocksIdx_.WriteTo(output, _repeated_blocksIdx_codec);
          longs_.WriteTo(output, _repeated_longs_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (I != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(I);
          }
          if (F != 0F) {
            size += 1 + 4;
          }
          if (S.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(S);
          }
          size += ints_.CalculateSize(_repeated_ints_codec);
          size += floats_.CalculateSize(_repeated_floats_codec);
          size += strings_.CalculateSize(_repeated_strings_codec);
          if (B != false) {
            size += 1 + 1;
          }
          size += bools_.CalculateSize(_repeated_bools_codec);
          if (BlockIdx != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BlockIdx);
          }
          if (L != 0L) {
            size += 1 + pb::CodedOutputStream.ComputeInt64Size(L);
          }
          size += blocksIdx_.CalculateSize(_repeated_blocksIdx_codec);
          size += longs_.CalculateSize(_repeated_longs_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Attr other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.I != 0) {
            I = other.I;
          }
          if (other.F != 0F) {
            F = other.F;
          }
          if (other.S.Length != 0) {
            S = other.S;
          }
          ints_.Add(other.ints_);
          floats_.Add(other.floats_);
          strings_.Add(other.strings_);
          if (other.B != false) {
            B = other.B;
          }
          bools_.Add(other.bools_);
          if (other.BlockIdx != 0) {
            BlockIdx = other.BlockIdx;
          }
          if (other.L != 0L) {
            L = other.L;
          }
          blocksIdx_.Add(other.blocksIdx_);
          longs_.Add(other.longs_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                type_ = (global::Paddle.Framework.Proto.AttrType) input.ReadEnum();
                break;
              }
              case 24: {
                I = input.ReadInt32();
                break;
              }
              case 37: {
                F = input.ReadFloat();
                break;
              }
              case 42: {
                S = input.ReadString();
                break;
              }
              case 50:
              case 48: {
                ints_.AddEntriesFrom(input, _repeated_ints_codec);
                break;
              }
              case 58:
              case 61: {
                floats_.AddEntriesFrom(input, _repeated_floats_codec);
                break;
              }
              case 66: {
                strings_.AddEntriesFrom(input, _repeated_strings_codec);
                break;
              }
              case 80: {
                B = input.ReadBool();
                break;
              }
              case 90:
              case 88: {
                bools_.AddEntriesFrom(input, _repeated_bools_codec);
                break;
              }
              case 96: {
                BlockIdx = input.ReadInt32();
                break;
              }
              case 104: {
                L = input.ReadInt64();
                break;
              }
              case 114:
              case 112: {
                blocksIdx_.AddEntriesFrom(input, _repeated_blocksIdx_codec);
                break;
              }
              case 122:
              case 120: {
                longs_.AddEntriesFrom(input, _repeated_longs_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Var : pb::IMessage<Var> {
        private static readonly pb::MessageParser<Var> _parser = new pb::MessageParser<Var>(() => new Var());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Var> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Paddle.Framework.Proto.OpDesc.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Var() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Var(Var other) : this() {
          parameter_ = other.parameter_;
          arguments_ = other.arguments_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Var Clone() {
          return new Var(this);
        }

        /// <summary>Field number for the "parameter" field.</summary>
        public const int ParameterFieldNumber = 1;
        private string parameter_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Parameter {
          get { return parameter_; }
          set {
            parameter_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "arguments" field.</summary>
        public const int ArgumentsFieldNumber = 2;
        private static readonly pb::FieldCodec<string> _repeated_arguments_codec
            = pb::FieldCodec.ForString(18);
        private readonly pbc::RepeatedField<string> arguments_ = new pbc::RepeatedField<string>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<string> Arguments {
          get { return arguments_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Var);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Var other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Parameter != other.Parameter) return false;
          if(!arguments_.Equals(other.arguments_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Parameter.Length != 0) hash ^= Parameter.GetHashCode();
          hash ^= arguments_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Parameter.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Parameter);
          }
          arguments_.WriteTo(output, _repeated_arguments_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Parameter.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Parameter);
          }
          size += arguments_.CalculateSize(_repeated_arguments_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Var other) {
          if (other == null) {
            return;
          }
          if (other.Parameter.Length != 0) {
            Parameter = other.Parameter;
          }
          arguments_.Add(other.arguments_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Parameter = input.ReadString();
                break;
              }
              case 18: {
                arguments_.AddEntriesFrom(input, _repeated_arguments_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  /// <summary>
  /// OpProto describes a C++ framework::OperatorBase derived class.
  /// </summary>
  public sealed partial class OpProto : pb::IMessage<OpProto> {
    private static readonly pb::MessageParser<OpProto> _parser = new pb::MessageParser<OpProto>(() => new OpProto());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<OpProto> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paddle.Framework.Proto.FrameworkReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpProto() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpProto(OpProto other) : this() {
      type_ = other.type_;
      inputs_ = other.inputs_.Clone();
      outputs_ = other.outputs_.Clone();
      attrs_ = other.attrs_.Clone();
      comment_ = other.comment_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OpProto Clone() {
      return new OpProto(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "inputs" field.</summary>
    public const int InputsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Paddle.Framework.Proto.OpProto.Types.Var> _repeated_inputs_codec
        = pb::FieldCodec.ForMessage(18, global::Paddle.Framework.Proto.OpProto.Types.Var.Parser);
    private readonly pbc::RepeatedField<global::Paddle.Framework.Proto.OpProto.Types.Var> inputs_ = new pbc::RepeatedField<global::Paddle.Framework.Proto.OpProto.Types.Var>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paddle.Framework.Proto.OpProto.Types.Var> Inputs {
      get { return inputs_; }
    }

    /// <summary>Field number for the "outputs" field.</summary>
    public const int OutputsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Paddle.Framework.Proto.OpProto.Types.Var> _repeated_outputs_codec
        = pb::FieldCodec.ForMessage(26, global::Paddle.Framework.Proto.OpProto.Types.Var.Parser);
    private readonly pbc::RepeatedField<global::Paddle.Framework.Proto.OpProto.Types.Var> outputs_ = new pbc::RepeatedField<global::Paddle.Framework.Proto.OpProto.Types.Var>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paddle.Framework.Proto.OpProto.Types.Var> Outputs {
      get { return outputs_; }
    }

    /// <summary>Field number for the "attrs" field.</summary>
    public const int AttrsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Paddle.Framework.Proto.OpProto.Types.Attr> _repeated_attrs_codec
        = pb::FieldCodec.ForMessage(34, global::Paddle.Framework.Proto.OpProto.Types.Attr.Parser);
    private readonly pbc::RepeatedField<global::Paddle.Framework.Proto.OpProto.Types.Attr> attrs_ = new pbc::RepeatedField<global::Paddle.Framework.Proto.OpProto.Types.Attr>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paddle.Framework.Proto.OpProto.Types.Attr> Attrs {
      get { return attrs_; }
    }

    /// <summary>Field number for the "comment" field.</summary>
    public const int CommentFieldNumber = 5;
    private string comment_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Comment {
      get { return comment_; }
      set {
        comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as OpProto);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(OpProto other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if(!inputs_.Equals(other.inputs_)) return false;
      if(!outputs_.Equals(other.outputs_)) return false;
      if(!attrs_.Equals(other.attrs_)) return false;
      if (Comment != other.Comment) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      hash ^= inputs_.GetHashCode();
      hash ^= outputs_.GetHashCode();
      hash ^= attrs_.GetHashCode();
      if (Comment.Length != 0) hash ^= Comment.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      inputs_.WriteTo(output, _repeated_inputs_codec);
      outputs_.WriteTo(output, _repeated_outputs_codec);
      attrs_.WriteTo(output, _repeated_attrs_codec);
      if (Comment.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Comment);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      size += inputs_.CalculateSize(_repeated_inputs_codec);
      size += outputs_.CalculateSize(_repeated_outputs_codec);
      size += attrs_.CalculateSize(_repeated_attrs_codec);
      if (Comment.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(OpProto other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      inputs_.Add(other.inputs_);
      outputs_.Add(other.outputs_);
      attrs_.Add(other.attrs_);
      if (other.Comment.Length != 0) {
        Comment = other.Comment;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            inputs_.AddEntriesFrom(input, _repeated_inputs_codec);
            break;
          }
          case 26: {
            outputs_.AddEntriesFrom(input, _repeated_outputs_codec);
            break;
          }
          case 34: {
            attrs_.AddEntriesFrom(input, _repeated_attrs_codec);
            break;
          }
          case 42: {
            Comment = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the OpProto message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      /// <summary>
      /// VarProto describes the C++ type framework::Variable.
      /// </summary>
      public sealed partial class Var : pb::IMessage<Var> {
        private static readonly pb::MessageParser<Var> _parser = new pb::MessageParser<Var>(() => new Var());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Var> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Paddle.Framework.Proto.OpProto.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Var() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Var(Var other) : this() {
          name_ = other.name_;
          comment_ = other.comment_;
          duplicable_ = other.duplicable_;
          intermediate_ = other.intermediate_;
          dispensable_ = other.dispensable_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Var Clone() {
          return new Var(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "comment" field.</summary>
        public const int CommentFieldNumber = 2;
        private string comment_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Comment {
          get { return comment_; }
          set {
            comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "duplicable" field.</summary>
        public const int DuplicableFieldNumber = 3;
        private bool duplicable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Duplicable {
          get { return duplicable_; }
          set {
            duplicable_ = value;
          }
        }

        /// <summary>Field number for the "intermediate" field.</summary>
        public const int IntermediateFieldNumber = 4;
        private bool intermediate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Intermediate {
          get { return intermediate_; }
          set {
            intermediate_ = value;
          }
        }

        /// <summary>Field number for the "dispensable" field.</summary>
        public const int DispensableFieldNumber = 5;
        private bool dispensable_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Dispensable {
          get { return dispensable_; }
          set {
            dispensable_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Var);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Var other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Comment != other.Comment) return false;
          if (Duplicable != other.Duplicable) return false;
          if (Intermediate != other.Intermediate) return false;
          if (Dispensable != other.Dispensable) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Comment.Length != 0) hash ^= Comment.GetHashCode();
          if (Duplicable != false) hash ^= Duplicable.GetHashCode();
          if (Intermediate != false) hash ^= Intermediate.GetHashCode();
          if (Dispensable != false) hash ^= Dispensable.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Comment.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(Comment);
          }
          if (Duplicable != false) {
            output.WriteRawTag(24);
            output.WriteBool(Duplicable);
          }
          if (Intermediate != false) {
            output.WriteRawTag(32);
            output.WriteBool(Intermediate);
          }
          if (Dispensable != false) {
            output.WriteRawTag(40);
            output.WriteBool(Dispensable);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Comment.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
          }
          if (Duplicable != false) {
            size += 1 + 1;
          }
          if (Intermediate != false) {
            size += 1 + 1;
          }
          if (Dispensable != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Var other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Comment.Length != 0) {
            Comment = other.Comment;
          }
          if (other.Duplicable != false) {
            Duplicable = other.Duplicable;
          }
          if (other.Intermediate != false) {
            Intermediate = other.Intermediate;
          }
          if (other.Dispensable != false) {
            Dispensable = other.Dispensable;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 18: {
                Comment = input.ReadString();
                break;
              }
              case 24: {
                Duplicable = input.ReadBool();
                break;
              }
              case 32: {
                Intermediate = input.ReadBool();
                break;
              }
              case 40: {
                Dispensable = input.ReadBool();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      /// AttrProto describes the C++ type Attribute.
      /// </summary>
      public sealed partial class Attr : pb::IMessage<Attr> {
        private static readonly pb::MessageParser<Attr> _parser = new pb::MessageParser<Attr>(() => new Attr());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Attr> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Paddle.Framework.Proto.OpProto.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attr() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attr(Attr other) : this() {
          name_ = other.name_;
          type_ = other.type_;
          comment_ = other.comment_;
          generated_ = other.generated_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Attr Clone() {
          return new Attr(this);
        }

        /// <summary>Field number for the "name" field.</summary>
        public const int NameFieldNumber = 1;
        private string name_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Name {
          get { return name_; }
          set {
            name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 2;
        private global::Paddle.Framework.Proto.AttrType type_ = 0;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Paddle.Framework.Proto.AttrType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "comment" field.</summary>
        public const int CommentFieldNumber = 3;
        private string comment_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Comment {
          get { return comment_; }
          set {
            comment_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "generated" field.</summary>
        public const int GeneratedFieldNumber = 4;
        private bool generated_;
        /// <summary>
        /// If that attribute is generated, it means the Paddle third
        /// language binding has responsibility to fill that
        /// attribute. End-User should not set that attribute.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Generated {
          get { return generated_; }
          set {
            generated_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Attr);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Attr other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Name != other.Name) return false;
          if (Type != other.Type) return false;
          if (Comment != other.Comment) return false;
          if (Generated != other.Generated) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Name.Length != 0) hash ^= Name.GetHashCode();
          if (Type != 0) hash ^= Type.GetHashCode();
          if (Comment.Length != 0) hash ^= Comment.GetHashCode();
          if (Generated != false) hash ^= Generated.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Name.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Name);
          }
          if (Type != 0) {
            output.WriteRawTag(16);
            output.WriteEnum((int) Type);
          }
          if (Comment.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(Comment);
          }
          if (Generated != false) {
            output.WriteRawTag(32);
            output.WriteBool(Generated);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Name.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
          }
          if (Type != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (Comment.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Comment);
          }
          if (Generated != false) {
            size += 1 + 1;
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Attr other) {
          if (other == null) {
            return;
          }
          if (other.Name.Length != 0) {
            Name = other.Name;
          }
          if (other.Type != 0) {
            Type = other.Type;
          }
          if (other.Comment.Length != 0) {
            Comment = other.Comment;
          }
          if (other.Generated != false) {
            Generated = other.Generated;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                Name = input.ReadString();
                break;
              }
              case 16: {
                type_ = (global::Paddle.Framework.Proto.AttrType) input.ReadEnum();
                break;
              }
              case 26: {
                Comment = input.ReadString();
                break;
              }
              case 32: {
                Generated = input.ReadBool();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class VarType : pb::IMessage<VarType> {
    private static readonly pb::MessageParser<VarType> _parser = new pb::MessageParser<VarType>(() => new VarType());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VarType> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paddle.Framework.Proto.FrameworkReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarType() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarType(VarType other) : this() {
      type_ = other.type_;
      selectedRows_ = other.selectedRows_ != null ? other.selectedRows_.Clone() : null;
      lodTensor_ = other.lodTensor_ != null ? other.lodTensor_.Clone() : null;
      tensorArray_ = other.tensorArray_ != null ? other.tensorArray_.Clone() : null;
      reader_ = other.reader_ != null ? other.reader_.Clone() : null;
      tuple_ = other.tuple_ != null ? other.tuple_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarType Clone() {
      return new VarType(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Paddle.Framework.Proto.VarType.Types.Type type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paddle.Framework.Proto.VarType.Types.Type Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "selected_rows" field.</summary>
    public const int SelectedRowsFieldNumber = 2;
    private global::Paddle.Framework.Proto.VarType.Types.TensorDesc selectedRows_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paddle.Framework.Proto.VarType.Types.TensorDesc SelectedRows {
      get { return selectedRows_; }
      set {
        selectedRows_ = value;
      }
    }

    /// <summary>Field number for the "lod_tensor" field.</summary>
    public const int LodTensorFieldNumber = 3;
    private global::Paddle.Framework.Proto.VarType.Types.LoDTensorDesc lodTensor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paddle.Framework.Proto.VarType.Types.LoDTensorDesc LodTensor {
      get { return lodTensor_; }
      set {
        lodTensor_ = value;
      }
    }

    /// <summary>Field number for the "tensor_array" field.</summary>
    public const int TensorArrayFieldNumber = 4;
    private global::Paddle.Framework.Proto.VarType.Types.LoDTensorArrayDesc tensorArray_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paddle.Framework.Proto.VarType.Types.LoDTensorArrayDesc TensorArray {
      get { return tensorArray_; }
      set {
        tensorArray_ = value;
      }
    }

    /// <summary>Field number for the "reader" field.</summary>
    public const int ReaderFieldNumber = 5;
    private global::Paddle.Framework.Proto.VarType.Types.ReaderDesc reader_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paddle.Framework.Proto.VarType.Types.ReaderDesc Reader {
      get { return reader_; }
      set {
        reader_ = value;
      }
    }

    /// <summary>Field number for the "tuple" field.</summary>
    public const int TupleFieldNumber = 7;
    private global::Paddle.Framework.Proto.VarType.Types.Tuple tuple_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paddle.Framework.Proto.VarType.Types.Tuple Tuple {
      get { return tuple_; }
      set {
        tuple_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VarType);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VarType other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(SelectedRows, other.SelectedRows)) return false;
      if (!object.Equals(LodTensor, other.LodTensor)) return false;
      if (!object.Equals(TensorArray, other.TensorArray)) return false;
      if (!object.Equals(Reader, other.Reader)) return false;
      if (!object.Equals(Tuple, other.Tuple)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != 0) hash ^= Type.GetHashCode();
      if (selectedRows_ != null) hash ^= SelectedRows.GetHashCode();
      if (lodTensor_ != null) hash ^= LodTensor.GetHashCode();
      if (tensorArray_ != null) hash ^= TensorArray.GetHashCode();
      if (reader_ != null) hash ^= Reader.GetHashCode();
      if (tuple_ != null) hash ^= Tuple.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (selectedRows_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(SelectedRows);
      }
      if (lodTensor_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(LodTensor);
      }
      if (tensorArray_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(TensorArray);
      }
      if (reader_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Reader);
      }
      if (tuple_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Tuple);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (selectedRows_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectedRows);
      }
      if (lodTensor_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(LodTensor);
      }
      if (tensorArray_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TensorArray);
      }
      if (reader_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Reader);
      }
      if (tuple_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tuple);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VarType other) {
      if (other == null) {
        return;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.selectedRows_ != null) {
        if (selectedRows_ == null) {
          selectedRows_ = new global::Paddle.Framework.Proto.VarType.Types.TensorDesc();
        }
        SelectedRows.MergeFrom(other.SelectedRows);
      }
      if (other.lodTensor_ != null) {
        if (lodTensor_ == null) {
          lodTensor_ = new global::Paddle.Framework.Proto.VarType.Types.LoDTensorDesc();
        }
        LodTensor.MergeFrom(other.LodTensor);
      }
      if (other.tensorArray_ != null) {
        if (tensorArray_ == null) {
          tensorArray_ = new global::Paddle.Framework.Proto.VarType.Types.LoDTensorArrayDesc();
        }
        TensorArray.MergeFrom(other.TensorArray);
      }
      if (other.reader_ != null) {
        if (reader_ == null) {
          reader_ = new global::Paddle.Framework.Proto.VarType.Types.ReaderDesc();
        }
        Reader.MergeFrom(other.Reader);
      }
      if (other.tuple_ != null) {
        if (tuple_ == null) {
          tuple_ = new global::Paddle.Framework.Proto.VarType.Types.Tuple();
        }
        Tuple.MergeFrom(other.Tuple);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            type_ = (global::Paddle.Framework.Proto.VarType.Types.Type) input.ReadEnum();
            break;
          }
          case 18: {
            if (selectedRows_ == null) {
              selectedRows_ = new global::Paddle.Framework.Proto.VarType.Types.TensorDesc();
            }
            input.ReadMessage(selectedRows_);
            break;
          }
          case 26: {
            if (lodTensor_ == null) {
              lodTensor_ = new global::Paddle.Framework.Proto.VarType.Types.LoDTensorDesc();
            }
            input.ReadMessage(lodTensor_);
            break;
          }
          case 34: {
            if (tensorArray_ == null) {
              tensorArray_ = new global::Paddle.Framework.Proto.VarType.Types.LoDTensorArrayDesc();
            }
            input.ReadMessage(tensorArray_);
            break;
          }
          case 42: {
            if (reader_ == null) {
              reader_ = new global::Paddle.Framework.Proto.VarType.Types.ReaderDesc();
            }
            input.ReadMessage(reader_);
            break;
          }
          case 58: {
            if (tuple_ == null) {
              tuple_ = new global::Paddle.Framework.Proto.VarType.Types.Tuple();
            }
            input.ReadMessage(tuple_);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the VarType message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum Type {
        /// <summary>
        /// Pod Types
        /// </summary>
        [pbr::OriginalName("BOOL")] Bool = 0,
        [pbr::OriginalName("INT16")] Int16 = 1,
        [pbr::OriginalName("INT32")] Int32 = 2,
        [pbr::OriginalName("INT64")] Int64 = 3,
        [pbr::OriginalName("FP16")] Fp16 = 4,
        [pbr::OriginalName("FP32")] Fp32 = 5,
        [pbr::OriginalName("FP64")] Fp64 = 6,
        /// <summary>
        /// Tensor&lt;size_t> is used in C++.
        /// </summary>
        [pbr::OriginalName("SIZE_T")] SizeT = 19,
        [pbr::OriginalName("UINT8")] Uint8 = 20,
        [pbr::OriginalName("INT8")] Int8 = 21,
        /// <summary>
        /// Other types that may need additional descriptions
        /// </summary>
        [pbr::OriginalName("LOD_TENSOR")] LodTensor = 7,
        [pbr::OriginalName("SELECTED_ROWS")] SelectedRows = 8,
        [pbr::OriginalName("FEED_MINIBATCH")] FeedMinibatch = 9,
        [pbr::OriginalName("FETCH_LIST")] FetchList = 10,
        [pbr::OriginalName("STEP_SCOPES")] StepScopes = 11,
        [pbr::OriginalName("LOD_RANK_TABLE")] LodRankTable = 12,
        [pbr::OriginalName("LOD_TENSOR_ARRAY")] LodTensorArray = 13,
        [pbr::OriginalName("PLACE_LIST")] PlaceList = 14,
        [pbr::OriginalName("READER")] Reader = 15,
        /// <summary>
        /// Any runtime decided variable type is raw
        /// raw variables should manage their own allocations
        /// in operators like nccl_op
        /// </summary>
        [pbr::OriginalName("RAW")] Raw = 17,
        [pbr::OriginalName("TUPLE")] Tuple = 18,
      }

      public sealed partial class TensorDesc : pb::IMessage<TensorDesc> {
        private static readonly pb::MessageParser<TensorDesc> _parser = new pb::MessageParser<TensorDesc>(() => new TensorDesc());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<TensorDesc> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Paddle.Framework.Proto.VarType.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TensorDesc() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TensorDesc(TensorDesc other) : this() {
          dataType_ = other.dataType_;
          dims_ = other.dims_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public TensorDesc Clone() {
          return new TensorDesc(this);
        }

        /// <summary>Field number for the "data_type" field.</summary>
        public const int DataTypeFieldNumber = 1;
        private global::Paddle.Framework.Proto.VarType.Types.Type dataType_ = 0;
        /// <summary>
        /// Should only be PODType. Is enforced in C++
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Paddle.Framework.Proto.VarType.Types.Type DataType {
          get { return dataType_; }
          set {
            dataType_ = value;
          }
        }

        /// <summary>Field number for the "dims" field.</summary>
        public const int DimsFieldNumber = 2;
        private static readonly pb::FieldCodec<long> _repeated_dims_codec
            = pb::FieldCodec.ForInt64(18);
        private readonly pbc::RepeatedField<long> dims_ = new pbc::RepeatedField<long>();
        /// <summary>
        /// [UNK, 640, 480] is saved as [-1, 640, 480]
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<long> Dims {
          get { return dims_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as TensorDesc);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(TensorDesc other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DataType != other.DataType) return false;
          if(!dims_.Equals(other.dims_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DataType != 0) hash ^= DataType.GetHashCode();
          hash ^= dims_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DataType != 0) {
            output.WriteRawTag(8);
            output.WriteEnum((int) DataType);
          }
          dims_.WriteTo(output, _repeated_dims_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DataType != 0) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DataType);
          }
          size += dims_.CalculateSize(_repeated_dims_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(TensorDesc other) {
          if (other == null) {
            return;
          }
          if (other.DataType != 0) {
            DataType = other.DataType;
          }
          dims_.Add(other.dims_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                dataType_ = (global::Paddle.Framework.Proto.VarType.Types.Type) input.ReadEnum();
                break;
              }
              case 18:
              case 16: {
                dims_.AddEntriesFrom(input, _repeated_dims_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class LoDTensorDesc : pb::IMessage<LoDTensorDesc> {
        private static readonly pb::MessageParser<LoDTensorDesc> _parser = new pb::MessageParser<LoDTensorDesc>(() => new LoDTensorDesc());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LoDTensorDesc> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Paddle.Framework.Proto.VarType.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoDTensorDesc() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoDTensorDesc(LoDTensorDesc other) : this() {
          tensor_ = other.tensor_ != null ? other.tensor_.Clone() : null;
          lodLevel_ = other.lodLevel_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoDTensorDesc Clone() {
          return new LoDTensorDesc(this);
        }

        /// <summary>Field number for the "tensor" field.</summary>
        public const int TensorFieldNumber = 1;
        private global::Paddle.Framework.Proto.VarType.Types.TensorDesc tensor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Paddle.Framework.Proto.VarType.Types.TensorDesc Tensor {
          get { return tensor_; }
          set {
            tensor_ = value;
          }
        }

        /// <summary>Field number for the "lod_level" field.</summary>
        public const int LodLevelFieldNumber = 2;
        private int lodLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LodLevel {
          get { return lodLevel_; }
          set {
            lodLevel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LoDTensorDesc);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LoDTensorDesc other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tensor, other.Tensor)) return false;
          if (LodLevel != other.LodLevel) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tensor_ != null) hash ^= Tensor.GetHashCode();
          if (LodLevel != 0) hash ^= LodLevel.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tensor_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tensor);
          }
          if (LodLevel != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(LodLevel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tensor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tensor);
          }
          if (LodLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LodLevel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LoDTensorDesc other) {
          if (other == null) {
            return;
          }
          if (other.tensor_ != null) {
            if (tensor_ == null) {
              tensor_ = new global::Paddle.Framework.Proto.VarType.Types.TensorDesc();
            }
            Tensor.MergeFrom(other.Tensor);
          }
          if (other.LodLevel != 0) {
            LodLevel = other.LodLevel;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tensor_ == null) {
                  tensor_ = new global::Paddle.Framework.Proto.VarType.Types.TensorDesc();
                }
                input.ReadMessage(tensor_);
                break;
              }
              case 16: {
                LodLevel = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class LoDTensorArrayDesc : pb::IMessage<LoDTensorArrayDesc> {
        private static readonly pb::MessageParser<LoDTensorArrayDesc> _parser = new pb::MessageParser<LoDTensorArrayDesc>(() => new LoDTensorArrayDesc());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LoDTensorArrayDesc> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Paddle.Framework.Proto.VarType.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoDTensorArrayDesc() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoDTensorArrayDesc(LoDTensorArrayDesc other) : this() {
          tensor_ = other.tensor_ != null ? other.tensor_.Clone() : null;
          lodLevel_ = other.lodLevel_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LoDTensorArrayDesc Clone() {
          return new LoDTensorArrayDesc(this);
        }

        /// <summary>Field number for the "tensor" field.</summary>
        public const int TensorFieldNumber = 1;
        private global::Paddle.Framework.Proto.VarType.Types.TensorDesc tensor_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::Paddle.Framework.Proto.VarType.Types.TensorDesc Tensor {
          get { return tensor_; }
          set {
            tensor_ = value;
          }
        }

        /// <summary>Field number for the "lod_level" field.</summary>
        public const int LodLevelFieldNumber = 2;
        private int lodLevel_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int LodLevel {
          get { return lodLevel_; }
          set {
            lodLevel_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LoDTensorArrayDesc);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LoDTensorArrayDesc other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (!object.Equals(Tensor, other.Tensor)) return false;
          if (LodLevel != other.LodLevel) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (tensor_ != null) hash ^= Tensor.GetHashCode();
          if (LodLevel != 0) hash ^= LodLevel.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (tensor_ != null) {
            output.WriteRawTag(10);
            output.WriteMessage(Tensor);
          }
          if (LodLevel != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(LodLevel);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (tensor_ != null) {
            size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tensor);
          }
          if (LodLevel != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(LodLevel);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LoDTensorArrayDesc other) {
          if (other == null) {
            return;
          }
          if (other.tensor_ != null) {
            if (tensor_ == null) {
              tensor_ = new global::Paddle.Framework.Proto.VarType.Types.TensorDesc();
            }
            Tensor.MergeFrom(other.Tensor);
          }
          if (other.LodLevel != 0) {
            LodLevel = other.LodLevel;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                if (tensor_ == null) {
                  tensor_ = new global::Paddle.Framework.Proto.VarType.Types.TensorDesc();
                }
                input.ReadMessage(tensor_);
                break;
              }
              case 16: {
                LodLevel = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

      public sealed partial class ReaderDesc : pb::IMessage<ReaderDesc> {
        private static readonly pb::MessageParser<ReaderDesc> _parser = new pb::MessageParser<ReaderDesc>(() => new ReaderDesc());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<ReaderDesc> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Paddle.Framework.Proto.VarType.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReaderDesc() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReaderDesc(ReaderDesc other) : this() {
          lodTensor_ = other.lodTensor_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ReaderDesc Clone() {
          return new ReaderDesc(this);
        }

        /// <summary>Field number for the "lod_tensor" field.</summary>
        public const int LodTensorFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Paddle.Framework.Proto.VarType.Types.LoDTensorDesc> _repeated_lodTensor_codec
            = pb::FieldCodec.ForMessage(10, global::Paddle.Framework.Proto.VarType.Types.LoDTensorDesc.Parser);
        private readonly pbc::RepeatedField<global::Paddle.Framework.Proto.VarType.Types.LoDTensorDesc> lodTensor_ = new pbc::RepeatedField<global::Paddle.Framework.Proto.VarType.Types.LoDTensorDesc>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Paddle.Framework.Proto.VarType.Types.LoDTensorDesc> LodTensor {
          get { return lodTensor_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as ReaderDesc);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(ReaderDesc other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!lodTensor_.Equals(other.lodTensor_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= lodTensor_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          lodTensor_.WriteTo(output, _repeated_lodTensor_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += lodTensor_.CalculateSize(_repeated_lodTensor_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(ReaderDesc other) {
          if (other == null) {
            return;
          }
          lodTensor_.Add(other.lodTensor_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10: {
                lodTensor_.AddEntriesFrom(input, _repeated_lodTensor_codec);
                break;
              }
            }
          }
        }

      }

      public sealed partial class Tuple : pb::IMessage<Tuple> {
        private static readonly pb::MessageParser<Tuple> _parser = new pb::MessageParser<Tuple>(() => new Tuple());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Tuple> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Paddle.Framework.Proto.VarType.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tuple() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tuple(Tuple other) : this() {
          elementType_ = other.elementType_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Tuple Clone() {
          return new Tuple(this);
        }

        /// <summary>Field number for the "element_type" field.</summary>
        public const int ElementTypeFieldNumber = 1;
        private static readonly pb::FieldCodec<global::Paddle.Framework.Proto.VarType.Types.Type> _repeated_elementType_codec
            = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::Paddle.Framework.Proto.VarType.Types.Type) x);
        private readonly pbc::RepeatedField<global::Paddle.Framework.Proto.VarType.Types.Type> elementType_ = new pbc::RepeatedField<global::Paddle.Framework.Proto.VarType.Types.Type>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<global::Paddle.Framework.Proto.VarType.Types.Type> ElementType {
          get { return elementType_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Tuple);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Tuple other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if(!elementType_.Equals(other.elementType_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          hash ^= elementType_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          elementType_.WriteTo(output, _repeated_elementType_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          size += elementType_.CalculateSize(_repeated_elementType_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Tuple other) {
          if (other == null) {
            return;
          }
          elementType_.Add(other.elementType_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 10:
              case 8: {
                elementType_.AddEntriesFrom(input, _repeated_elementType_codec);
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  public sealed partial class VarDesc : pb::IMessage<VarDesc> {
    private static readonly pb::MessageParser<VarDesc> _parser = new pb::MessageParser<VarDesc>(() => new VarDesc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<VarDesc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paddle.Framework.Proto.FrameworkReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarDesc(VarDesc other) : this() {
      name_ = other.name_;
      type_ = other.type_ != null ? other.type_.Clone() : null;
      persistable_ = other.persistable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public VarDesc Clone() {
      return new VarDesc(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 2;
    private global::Paddle.Framework.Proto.VarType type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paddle.Framework.Proto.VarType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "persistable" field.</summary>
    public const int PersistableFieldNumber = 3;
    private bool persistable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Persistable {
      get { return persistable_; }
      set {
        persistable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as VarDesc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(VarDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if (!object.Equals(Type, other.Type)) return false;
      if (Persistable != other.Persistable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (type_ != null) hash ^= Type.GetHashCode();
      if (Persistable != false) hash ^= Persistable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (type_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Type);
      }
      if (Persistable != false) {
        output.WriteRawTag(24);
        output.WriteBool(Persistable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (type_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Type);
      }
      if (Persistable != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(VarDesc other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.type_ != null) {
        if (type_ == null) {
          type_ = new global::Paddle.Framework.Proto.VarType();
        }
        Type.MergeFrom(other.Type);
      }
      if (other.Persistable != false) {
        Persistable = other.Persistable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            if (type_ == null) {
              type_ = new global::Paddle.Framework.Proto.VarType();
            }
            input.ReadMessage(type_);
            break;
          }
          case 24: {
            Persistable = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BlockDesc : pb::IMessage<BlockDesc> {
    private static readonly pb::MessageParser<BlockDesc> _parser = new pb::MessageParser<BlockDesc>(() => new BlockDesc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BlockDesc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paddle.Framework.Proto.FrameworkReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockDesc(BlockDesc other) : this() {
      idx_ = other.idx_;
      parentIdx_ = other.parentIdx_;
      vars_ = other.vars_.Clone();
      ops_ = other.ops_.Clone();
      forwardBlockIdx_ = other.forwardBlockIdx_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BlockDesc Clone() {
      return new BlockDesc(this);
    }

    /// <summary>Field number for the "idx" field.</summary>
    public const int IdxFieldNumber = 1;
    private int idx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Idx {
      get { return idx_; }
      set {
        idx_ = value;
      }
    }

    /// <summary>Field number for the "parent_idx" field.</summary>
    public const int ParentIdxFieldNumber = 2;
    private int parentIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentIdx {
      get { return parentIdx_; }
      set {
        parentIdx_ = value;
      }
    }

    /// <summary>Field number for the "vars" field.</summary>
    public const int VarsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Paddle.Framework.Proto.VarDesc> _repeated_vars_codec
        = pb::FieldCodec.ForMessage(26, global::Paddle.Framework.Proto.VarDesc.Parser);
    private readonly pbc::RepeatedField<global::Paddle.Framework.Proto.VarDesc> vars_ = new pbc::RepeatedField<global::Paddle.Framework.Proto.VarDesc>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paddle.Framework.Proto.VarDesc> Vars {
      get { return vars_; }
    }

    /// <summary>Field number for the "ops" field.</summary>
    public const int OpsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Paddle.Framework.Proto.OpDesc> _repeated_ops_codec
        = pb::FieldCodec.ForMessage(34, global::Paddle.Framework.Proto.OpDesc.Parser);
    private readonly pbc::RepeatedField<global::Paddle.Framework.Proto.OpDesc> ops_ = new pbc::RepeatedField<global::Paddle.Framework.Proto.OpDesc>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paddle.Framework.Proto.OpDesc> Ops {
      get { return ops_; }
    }

    /// <summary>Field number for the "forward_block_idx" field.</summary>
    public const int ForwardBlockIdxFieldNumber = 5;
    private int forwardBlockIdx_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ForwardBlockIdx {
      get { return forwardBlockIdx_; }
      set {
        forwardBlockIdx_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BlockDesc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BlockDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Idx != other.Idx) return false;
      if (ParentIdx != other.ParentIdx) return false;
      if(!vars_.Equals(other.vars_)) return false;
      if(!ops_.Equals(other.ops_)) return false;
      if (ForwardBlockIdx != other.ForwardBlockIdx) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Idx != 0) hash ^= Idx.GetHashCode();
      if (ParentIdx != 0) hash ^= ParentIdx.GetHashCode();
      hash ^= vars_.GetHashCode();
      hash ^= ops_.GetHashCode();
      if (ForwardBlockIdx != 0) hash ^= ForwardBlockIdx.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Idx != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Idx);
      }
      if (ParentIdx != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ParentIdx);
      }
      vars_.WriteTo(output, _repeated_vars_codec);
      ops_.WriteTo(output, _repeated_ops_codec);
      if (ForwardBlockIdx != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ForwardBlockIdx);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Idx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Idx);
      }
      if (ParentIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentIdx);
      }
      size += vars_.CalculateSize(_repeated_vars_codec);
      size += ops_.CalculateSize(_repeated_ops_codec);
      if (ForwardBlockIdx != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ForwardBlockIdx);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BlockDesc other) {
      if (other == null) {
        return;
      }
      if (other.Idx != 0) {
        Idx = other.Idx;
      }
      if (other.ParentIdx != 0) {
        ParentIdx = other.ParentIdx;
      }
      vars_.Add(other.vars_);
      ops_.Add(other.ops_);
      if (other.ForwardBlockIdx != 0) {
        ForwardBlockIdx = other.ForwardBlockIdx;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Idx = input.ReadInt32();
            break;
          }
          case 16: {
            ParentIdx = input.ReadInt32();
            break;
          }
          case 26: {
            vars_.AddEntriesFrom(input, _repeated_vars_codec);
            break;
          }
          case 34: {
            ops_.AddEntriesFrom(input, _repeated_ops_codec);
            break;
          }
          case 40: {
            ForwardBlockIdx = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Please refer to
  /// https://github.com/PaddlePaddle/Paddle/blob/develop/doc/design/program.md
  /// for more details.
  /// TODO(panyx0718): A model can have multiple programs. Need a
  /// way to distinguish them. Maybe ID or name?
  /// </summary>
  public sealed partial class ProgramDesc : pb::IMessage<ProgramDesc> {
    private static readonly pb::MessageParser<ProgramDesc> _parser = new pb::MessageParser<ProgramDesc>(() => new ProgramDesc());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProgramDesc> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Paddle.Framework.Proto.FrameworkReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProgramDesc() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProgramDesc(ProgramDesc other) : this() {
      blocks_ = other.blocks_.Clone();
      version_ = other.version_ != null ? other.version_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProgramDesc Clone() {
      return new ProgramDesc(this);
    }

    /// <summary>Field number for the "blocks" field.</summary>
    public const int BlocksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Paddle.Framework.Proto.BlockDesc> _repeated_blocks_codec
        = pb::FieldCodec.ForMessage(10, global::Paddle.Framework.Proto.BlockDesc.Parser);
    private readonly pbc::RepeatedField<global::Paddle.Framework.Proto.BlockDesc> blocks_ = new pbc::RepeatedField<global::Paddle.Framework.Proto.BlockDesc>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Paddle.Framework.Proto.BlockDesc> Blocks {
      get { return blocks_; }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private global::Paddle.Framework.Proto.Version version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Paddle.Framework.Proto.Version Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProgramDesc);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProgramDesc other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!blocks_.Equals(other.blocks_)) return false;
      if (!object.Equals(Version, other.Version)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= blocks_.GetHashCode();
      if (version_ != null) hash ^= Version.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      blocks_.WriteTo(output, _repeated_blocks_codec);
      if (version_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Version);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += blocks_.CalculateSize(_repeated_blocks_codec);
      if (version_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Version);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProgramDesc other) {
      if (other == null) {
        return;
      }
      blocks_.Add(other.blocks_);
      if (other.version_ != null) {
        if (version_ == null) {
          version_ = new global::Paddle.Framework.Proto.Version();
        }
        Version.MergeFrom(other.Version);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            blocks_.AddEntriesFrom(input, _repeated_blocks_codec);
            break;
          }
          case 18: {
            if (version_ == null) {
              version_ = new global::Paddle.Framework.Proto.Version();
            }
            input.ReadMessage(version_);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
